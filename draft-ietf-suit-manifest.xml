<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-19" category="std">

  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>

    <date year="2022" month="August" day="09"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about code/data obtained by a recipient (chiefly
the firmware for an IoT device), where to find the that code/data, the
devices to which it applies, and cryptographic information protecting
the manifest. Software updates and Trusted Invocation both tend to use
sequences of common operations, so the manifest encodes those sequences
of operations, rather than declaring the metadata.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata describing one or more code or data payloads and how to:</t>

<t><list style="symbols">
  <t>Obtain any dependencies</t>
  <t>Obtain the payload(s)</t>
  <t>Install them</t>
  <t>Verify them</t>
  <t>Load them into memory</t>
  <t>Invoke them</t>
</list></t>

<t>This specification defines the SUIT manifest format and it is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="RFC9124"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>a Firmware Author to reason about releasing a firmware.</t>
  <t>a Network Operator to reason about compatibility of a firmware.</t>
  <t>a Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>a Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>a device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>a device to reason about the applicability of a firmware.</t>
  <t>a device to reason about the installation of a firmware.</t>
  <t>a device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="RFC9019"/> and the threats, requirements, and user stories in <xref target="RFC9124"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or Trusted Invocation are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In this document, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the language is tailored to software updates and Trusted Invocation.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and Trusted Invocation use cases, there is nothing in the SUIT Information Model (<xref target="RFC9124"/>) that restricts its use to only those use cases. Other use cases include the management of trusted applications (TAs) in a Trusted Execution Environment (TEE), as discussed in <xref target="I-D.ietf-teep-architecture"/>.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient's storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document"><name>How to use this Document</name>

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rational is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> gives a summarize of the mandatory-to-implement features of this specification.</t>

<t>This specification covers the core features of SUIT. Additional specifications describe functionality of advanced use cases, such as:</t>

<t><list style="symbols">
  <t>Firmware Encryption is covered in <xref target="I-D.ietf-suit-firmware-encryption"/></t>
  <t>Update Management is covered in <xref target="I-D.ietf-suit-update-management"/></t>
  <t>Features, such as dependencies, key delegation, multiple processors, required by the use of multiple trust domains are covered in <xref target="I-D.ietf-suit-trust-domains"/></t>
  <t>Secure reporting of the update status is covered in <xref target="I-D.ietf-suit-report"/></t>
  <t>Compression of firmware images</t>
</list></t>

</section>
<section anchor="background"><name>Background</name>

<t>Distributing software updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="RFC9019"/>. The security aspects are described in <xref target="RFC9124"/>.</t>

<section anchor="iot-firmware-update-constraints"><name>IoT Firmware Update Constraints</name>

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivered to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model"><name>SUIT Workflow Model</name>

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Invocation Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Run image(s).</t>
</list></t>

<t>If verification and running is implemented in a bootloader, then the bootloader MUST also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader may add its own authentication, e.g. a Message Authentication Code (MAC), to the manifest in order to prevent further verifications.</t>

</section>
</section>
<section anchor="metadata-structure-overview"><name>Metadata Structure Overview</name>

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest..</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, such as affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable elements.</t>
    </list></t>
  <t>Severable elements (see <xref target="ovr-severable"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| Integrated Payloads     |          | Structure Version            |
+-------------------------+          | Sequence Number              |
                                     | Reference to Full Manifest   |
                               +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Components IDs          |      +-> +-----------------------+
| Common Command Sequence ---------> | Command Sequence      |
+-------------------------+          +-----------------------+
                                     | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope"><name>Envelope</name>

<t>The SUIT Envelope is a container that encloses the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that would add substantial complexity with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-auth"><name>Authentication Block</name>

<t>The Authentication Block contains a bstr-wrapped SUIT Digest Container, see <xref target="SUIT_Digest"/>, and one or more <xref target="RFC8152"/> CBOR Object Signing and Encryption (COSE) authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>Each of these objects is used in detached payload mode. The payload is the bstr-wrapped SUIT_Digest.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest"><name>Manifest</name>

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical"><name>Critical Metadata</name>

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which manifest is newest and whether the structure version is supported. It also MAY provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, and <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common"><name>Common</name>

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of two parts: a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence MUST NOT have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/> for more detail.</t>

</section>
<section anchor="ovr-commands"><name>Command Sequences</name>

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Payload Fetch, and Payload Installation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Invocation Command Sequences are: System Validation, Image Loading, and Image Invocation. An Invocation Procedure is the complete set of each Invocation Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command (dependencies are not defined in this specification).</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity"><name>Integrity Check Values</name>

<t>To enable <xref target="ovr-severable"/>, there needs to be a mechanism to verify integrity of any metadata outside the manifest. Integrity Check Values are used to verify the integrity of metadata that is not contained in the manifest. This MAY include Severable Command Sequences, or Text data. Integrated Payloads are integrity-checked using Command Sequences, so they do not have Integrity Check Values present in the Manifest.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text"><name>Human-Readable Text</name>

<t>Text is typically a Severable Element (<xref target="ovr-severable"/>). It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable"><name>Â Severable Elements</name>

<t>Severable Elements are elements of the Envelope (<xref target="ovr-envelope"/>) that have Integrity Check Values (<xref target="ovr-integrity"/>) in the Manifest (<xref target="ovr-manifest"/>).</t>

<t>Because of this organisation, these elements can be discarded or "Severed" from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system severs the Text sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated"><name>Integrated Payloads</name>

<t>In some cases, it is beneficial to include a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest's envelope.</t>
</list></t>

<t>See <xref target="template-integrated-payload"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior"><name>Manifest Processor Behavior</name>

<t>This section describes the behavior of the manifest processor and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the manifest processor: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup"><name>Manifest Processor Setup</name>

<t>Prior to executing any command sequence, the manifest processor or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the manifest processor or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the manifest processor can choose between several manifests, it MUST select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest, according to application-specific policy.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported Component Identifier encountered.</t>
  <t>Payload not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Payload verification failed.</t>
  <t>Missing required component from a Component Set.</t>
  <t>Required parameter not supplied.</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Selecting an older manifest in the event of failure of the latest valid manifest is a robustness mechanism that is necessary for supporting the requirements in <xref target="RFC9019"/>, section 3.5. It may not be appropriate for all applications. In particular Trusted Execution Environments MAY require a failure to invoke a new installation, rather than a rollback approach. See <xref target="RFC9124"/>, Section 4.2.1 for more discussion on the security considerations that apply to rollback.</t>

<t>Following these initial tests, the manifest processor clears all parameter storage. This ensures that the manifest processor begins without any leaked data.</t>

</section>
<section anchor="required-checks"><name>Â Required Checks</name>

<t>The RECOMMENDED process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a Recipient receives an incompatible manifest.</t>

<t>When validating authenticity of manifests, the manifest processor MAY use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity.</t>

<t>Once a valid, authentic manifest has been selected, the manifest processor MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component is supported.</t>

<t>For each listed component, the manifest processor MUST provide storage for the supported parameters. If the manifest processor does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The manifest processor SHOULD check that the common sequence contains at least Check Vendor Identifier command and at least one Check Class Identifier command.</t>

<t>Because the common sequence contains Check Vendor Identifier and Check Class Identifier command(s), no custom commands are permitted in the common sequence. This ensures that any custom commands are only executed by devices that understand them.</t>

<t>If the manifest contains more than one component, each command sequence MUST begin with a Set Component Index.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by one update, that is the manifest:</t>

<t><list style="numbers">
  <t>has sufficient permissions imparted by its signatures</t>
  <t>specifies a digest and a payload for every Component in the Component Set.</t>
</list></t>

<section anchor="minimal-sigs"><name>Minimizing Signature Verifications</name>

<t>Signature verification can be energy and time expensive on a constrained device. MAC verification is typically unaffected by these concerns. A Recipient MAY choose to parse and execute only the SUIT_Common section of the manifest prior to signature verification, if all of the below apply:</t>

<t><list style="symbols">
  <t>The Authentication Block contains a COSE_Sign_Tagged or COSE_Sign1_Tagged</t>
  <t>The Recipient receives manifests over an unauthenticated channel, exposing it to more inauthentic or incompatible manifests, and</t>
  <t>The Recipient has a power budget that makes signature verification undesirable</t>
</list></t>

<t>When executing Common prior to authenticity validation, the Manifest Processor MUST first evaluate the integrity of the manifest using the SUIT_Digest present in the authentication block.</t>

<t>The guidelines in Creating Manifests (<xref target="creating-manifests"/>) require that the common section contains the applicability checks, so this section is sufficient for applicability verification. The parser MUST restrict acceptable commands to conditions and the following directives: Override Parameters, Set Parameters, Try Each, and Run Sequence ONLY. The manifest parser MUST NOT execute any command with side-effects outside the parser (for example, Run, Copy, Swap, or Fetch commands) prior to authentication and any such command MUST Abort. The Common Sequence MUST be executed again, in its entirety, after authenticity validation.</t>

<t>A Recipient MAY rely on network infrastructure to filter inapplicable manifests.</t>

</section>
</section>
<section anchor="interpreter-fundamental-properties"><name>Interpreter Fundamental Properties</name>

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a Trusted Invocation MUST either result in an error, or an invoked image.</t>
  <t>Executing the same manifest on multiple Recipients MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

<section anchor="resilience-to-disruption"><name>Resilience to Disruption</name>

<t>As required in Section 3 of RFC9019 and as an extension of design goal 1, devices must remain operable after a disruption, such as a power failure or network interruption, interrupts the update process.</t>

<t>The manifest processor must be resilient to these faults. In order to enable this resilience, systems implementing the manifest processor MUST make the following guarantees:</t>

<t>Either:
1. A fallback/recovery image is provided so that a disrupted system can apply the SUIT Manifest again.
2. Manifests are constructed so that repeated partial invocations of any manifest sequence always results in a correct system configuration.
3. A journal of manifest operations is stored in nonvolatile memory so that a repeated invocation does not alter nonvolatile memory up until the point of the previous failure. The journal enables the parser to recreate the processor state just prior to the disruption. This journal can be, for example, a SUIT Report. This report can be used to resume processing of the manifest from the point of failure.</t>

<t>AND</t>

<t><list style="numbers">
  <t>Where a command is not repeatable because of the way in which it alters system state (e.g. swapping images or in-place delta) it MUST be resumable or revertible. This applies to commands that modify at least one source component as well as the destination component.</t>
</list></t>

</section>
</section>
<section anchor="command-behavior"><name>Abstract Machine Description</name>

<t>The heart of the manifest is the list of commands, which are processed by a Manifest Processor--a form of interpreter. This Manifest Processor can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>Conditions MUST NOT have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag (<xref target="suit-parameter-soft-failure"/>) is set when a Condition reports failure.</t>

<t>Directives MAY have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter MUST Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>To simplify the logic describing the command semantics, the object "current" is used. It represents the component identified by the Component Index:</t>

<figure><artwork><![CDATA[
current := components\[component-index\]
]]></artwork></figure>

<t>As a result, Set Component Index is described as current := components[arg].</t>

<t>The following table describes the behavior of each command. "params" represents the parameters for the current component. Most commands operate on a component.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for-each k,v in arg</c>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in params for-each k,v in arg</c>
      <c>Run</c>
      <c>run(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Slot</c>
      <c>assert(current.slot-index == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>try-each-done if exec(seq) is not error for-each seq in arg</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Run with Arguments</c>
      <c>run(current, arg)</c>
</texttable>

</section>
<section anchor="index-true"><name>Special Cases of Component Index</name>

<t>Component Index can take on one of three types:</t>

<t><list style="numbers">
  <t>Integer</t>
  <t>Array of integers</t>
  <t>True</t>
</list></t>

<t>Integers MUST always be supported by Set Component Index. Arrays of integers MUST be supported by Set Component Index if the Recipient supports 3 or more components. True MUST be supported by Set Component Index if the Recipient supports 2 or more components. Each of these operates on the list of components declared in the manifest.</t>

<t>Integer indices are the default case as described in the previous section. An array of integers represents a list of the components (Set Component Index) to which each subsequent command applies. The value True replaces the list of component indices with the full list of components, as defined in the manifest.</t>

<t>When a command is executed, it either 1. operates on the component identified by the component index if that index is an integer, or 2. it operates on each component identified by an array of indicies, or 3. it operates on every component if the index is the boolean True. This is described by the following pseudocode:</t>

<figure><artwork><![CDATA[
if component-index is true:
    current-list = components
else if component-index is array:
    current-list = [ components[idx] for idx in component-index ]
else:
    current-list = [ components[component-index] ]
for current in current-list:
    cmd(current)
]]></artwork></figure>

<t>Try Each and Run Sequence are affected in the same way as other commands: they are invoked once for each possible Component. This means that the sequences that are arguments to Try Each and Run Sequence are NOT invoked with Component Index = True, nor are they invoked with array indices. They are only invoked with integer indices. The interpreter loops over the whole sequence, setting the Component Index to each index in turn.</t>

</section>
<section anchor="serial-processing"><name>Serialized Processing Interpreter</name>

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor MAY handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

<t>When a serialized Manifest Processor encounters a component index of True, it does not ignore any commands. It applies them to the current component on each iteration.</t>

</section>
<section anchor="parallel-processing"><name>Parallel Processing Interpreter</name>

<t>Advanced Recipients MAY make use of the Strict Order parameter and enable parallel processing of some Command Sequences, or it may reorder some Command Sequences. To perform parallel processing, once the Strict Order parameter is set to False, the Recipient may issue each or every command concurrently until the Strict Order parameter is returned to True or the Command Sequence ends. Then, it waits for all issued commands to complete before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the Recipient consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>When the manifest processor encounters any of these scenarios the parallel processing MUST halt until all issued commands have completed:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, a manifest author may collect sequences of commands in a Run Sequence command. Then, each of these sequences MAY be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence MUST begin with a Set Component Index directive with the following exception: when the index is either True or an array of indices, the Set Component Index is implied. Any further Set Component Index directives MUST cause an Abort. This allows the interpreter that issues Run Sequence commands to check that the first element is correct, then issue the sequence to a parallel execution context to handle the remainder of the sequence.</t>

</section>
</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC8152"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>The author MUST ensure that all parameters consumed by a command are set prior to invoking that command. Where Component Index = True, this means that the parameters consumed by each command MUST have been set for each Component.</t>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<t>NOTE: On systems that support only a single component, Set Component Index has no effect and can be omitted.</t>

<t>NOTE: <strong>A digest MUST always be set using Override Parameters.</strong></t>

<section anchor="template-compatibility-check"><name>Compatibility Check Template</name>

<t>The goal of the compatibility check template ensure that Recipients only install compatible images.</t>

<t>In this template all information is contained in the common sequence and the following sequence of commands is used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="uuid-identifiers"/>)</t>
  <t>Check Class Identifier condition (see <xref target="uuid-identifiers"/>)</t>
</list></t>

</section>
<section anchor="template-secure-boot"><name>Trusted Invocation Template</name>

<t>The goal of the Trusted Invocation template is to ensure that only authorized code is invoked; such as in Secure Boot or when a Trusted Application is loaded into a TEE.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>The system validation sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>Then, the run sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Run directive (see <xref target="suit-directive-run-sequence"/>)</t>
</list></t>

</section>
<section anchor="firmware-download-template"><name>Component Download Template</name>

<t>The goal of the Component Download template is to acquire and store an image.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI (see <xref target="suit-parameter-uri"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-install"><name>Install Template</name>

<t>The goal of the Install template is to use an image already stored in an identified component to copy into a second component.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: the Component Download operations are moved from the Payload Install sequence to the Payload Fetch sequence.</t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="suit-parameter-source-component"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-integrated-payload"><name>Integrated Payload Template</name>

<t>The goal of the Integrated Payload template is to install a payload that is included in the manifest envelope. It is identical to the Component Download template (<xref target="firmware-download-template"/>).</t>

<t>An implementer MAY choose to place a payload in the envelope of a manifest. The payload envelope key MUST be a string. The payload MUST be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way MAY be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4.</t>

<t>A distributor MAY choose to pre-fetch a payload and add it to the manifest envelope, using the URI as the key.</t>

</section>
<section anchor="template-load-ext"><name>Load from Nonvolatile Storage Template</name>

<t>The goal of the Load from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="a-b-template"><name>A/B Image Template</name>

<t>The goal of the A/B Image Template is to acquire, validate, and invoke one of two images, based on a test.</t>

<t>The following commands are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following commands are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

<t>If Trusted Invocation (<xref target="template-secure-boot"/>) is used, only the run sequence is added to this template, since the common sequence is populated by this template:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
    </list></t>
  <t>Run</t>
</list></t>

<t>NOTE: Any test can be used to select between images, Check Slot Condition is used in this template because it is a typical test for execute-in-place devices.</t>

</section>
</section>
<section anchor="metadata-structure"><name>Metadata Structure</name>

<t>The metadata for SUIT updates is composed of several primary constituent parts: the Envelope, Authentication Information, Manifest, and Severable Elements.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding-considerations"><name>Encoding Considerations</name>

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialized variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific values, as described in <xref target="iana"/>.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

<t>All CBOR maps in the Manifest and manifest envelope MUST be encoded with the canonical CBOR ordering as defined in <xref target="RFC8949"/>.</t>

</section>
<section anchor="envelope"><name>Envelope</name>

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="authentication-info"><name>Authenticated Manifests</name>

<t>The suit-authentication-wrapper contains a SUIT Digest Container (see <xref target="SUIT_Digest"/>) and one or more SUIT Authentication Blocks. The SUIT_Digest carries the result of computing the indicated hash algorithm over the suit-manifest element. A signing application MUST verify the suit-manifest element against the SUIT_Digest prior to signing. A SUIT Authentication Block is implemented as COSE_Mac_Tagged, COSE_Mac0_Tagged, COSE_Sign_Tagged or COSE_Sign1_Tagged structures with detached payloads, as described in RFC 8152 <xref target="RFC8152"/>.</t>

<t>For COSE_Sign and COSE_Sign1 a special signature structure (called Sig_structure) has to be created onto which the selected digital signature algorithm is applied to, see Section 4.4 of <xref target="RFC8152"/> for details. This specification requires Sig_structure to be populated as follows:
* The external_aad field MUST be set to a zero-length binary string (i.e. there is no external additional authenticated data).
* The payload field contains the SUIT_Digest wrapped in a bstr, as per the requirements in Section 4.4 of RFC 8152.
All other fields in the Sig_structure are populated as described in Section 4.4 of <xref target="RFC8152"/>.</t>

<t>Likewise, Section 6.3 of <xref target="RFC8152"/> describes the details for computing a MAC and the fields of the MAC_structure need to be populated. The rules for external_aad and the payload fields described in the paragraph above also apply to this structure.</t>

<t>The suit-authentication-wrapper MUST come before the suit-manifest element, regardless of canonical encoding of CBOR.</t>

<t>A SUIT_Envelope that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be a list containing only the SUIT_Digest.</t>

<t>The algorithms used in SUIT_Authentication are defined by the profiles declared in <xref target="I-D.moran-suit-mti"/>.</t>

</section>
<section anchor="manifest-structure"><name>Manifest</name>

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
</list></t>

<t>The Text section, or any Command Sequence of the Update Procedure (Image Fetch, Image Installation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable element. Severable elements are RECOMMENDED to implement. In particular, the human-readable text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version"><name>suit-manifest-version</name>

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED to implement.</t>

</section>
<section anchor="manifest-seqnr"><name>suit-manifest-sequence-number</name>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. Each Recipient MUST reject any manifest that has a sequence number lower than its current sequence number. For convenience, an implementer MAY use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED to implement.</t>

</section>
<section anchor="manifest-reference-uri"><name>suit-reference-uri</name>

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.</t>

</section>
<section anchor="manifest-digest-text"><name>suit-text</name>

<t>suit-text SHOULD be a severable element. suit-text is a map containing two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text</t>
  <t>SUIT_Component_Identifier =&gt; map</t>
</list></t>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text MUST also be present in suit-common (<xref target="manifest-common"/>).</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The YAML (<xref target="YAML"/>)-formatted document that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A free text representation of the component version</c>
</texttable>

<t>suit-text is OPTIONAL to implement.</t>

</section>
<section anchor="manifest-common"><name>suit-common</name>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is REQUIRED to implement.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED to implement. It is REQUIRED if the optimizations described in <xref target="minimal-sigs"/> will be used. Whenever a parameter or Try Each command is required by more than one Command Sequence, placing that parameter or command in suit-common-sequence results in a smaller encoding.</t>

<section anchor="suit-component-identifier"><name>SUIT_Component_Identifier</name>

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>A Component Identifier can be trivial, such as the simple array [h'00']. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path "/usr/bin/env" would encode to ['usr','bin','env'].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands"><name>SUIT_Command_Sequence</name>

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL to implement.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation. suit-validate is REQUIRED to implement.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL to implement.</t>
  <t>Run or Boot: suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: the "run" directive. suit-run is OPTIONAL to implement.</t>
</list></t>

<t>Goals 1,2 form the Update Procedure. Goals 4,5,6 form the Invocation Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true and any failure is treated as a failure of the update/load/invocation</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>Each condition is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>A <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided. This index is a numeric index into the Component Identifier table defined at the beginning of the manifest.</t>

<t>To facilitate optional conditions, a special directive, suit-directive-try-each (<xref target="suit-directive-try-each"/>), is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/invocation, but a parameter is provided to override this behavior. See suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>).</t>

</section>
<section anchor="reporting-policy"><name>Reporting Policy</name>

<t>To facilitate construction of Reports that describe the success or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>At the completion of each command, a Manifest Processor MAY forward information about the command to a Reporting Engine, which is responsible for reporting boot or update status to a third party. The Reporting Engine is entirely implementation-defined, the reporting policy simply facilitates the Reporting Engine's interface to the SUIT Manifest Processor.</t>

<t>The information elements provided to the Reporting Engine are:</t>

<t><list style="symbols">
  <t>The reporting policy</t>
  <t>The result of the command</t>
  <t>The values of parameters consumed by the command</t>
  <t>The system information consumed by the command</t>
</list></t>

<t>Together, these elements are called a Record. A group of Records is a Report.</t>

<t>If the component index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine MUST receive one Record for each Component, in the order expressed in the Components list or the component index array.</t>

<t>This specification does not define a particular format of Records or Reports. This specification only defines hints to the Reporting Engine for which Records it should aggregate into the Report. The Reporting Engine MAY choose to ignore these hints and apply its own policy instead.</t>

<t>When used in a Invocation Procedure, the report MAY form the basis of an attestation report. When used in an Update Process, the report MAY form the basis for one or more log entries.</t>

</section>
<section anchor="secparameters"><name>SUIT_Parameters</name>

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reuse of parameters between commands, thus reducing manifest size.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Component Slot</c>
      <c>suit-parameter-component-slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Run Args</c>
      <c>suit-parameter-run-args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately.</t>

<section anchor="cbor-pen-uuid-namespace-identifier"><name>CBOR PEN UUID Namespace Identifier</name>

<t>The CBOR PEN UUID Namespace Identifier is constructed as follows:</t>

<t>It uses the OID Namespace as a starting point, then uses the CBOR absolute OID encoding for the IANA PEN OID (1.3.6.1.4.1):</t>

<figure><artwork><![CDATA[
D8 6F                # tag(111)
   45                # bytes(5)
# Absolute OID encoding of IANA Private Enterprise Number:
#    1.3. 6. 1. 4. 1
      2B 06 01 04 01 # X.690 Clause 8.19
]]></artwork></figure>

<t>Computing a type 5 UUID from these produces:</t>

<figure><artwork><![CDATA[
NAMESPACE_CBOR_PEN = UUID5(NAMESPACE_OID, h'D86F452B06010401')
NAMESPACE_CBOR_PEN = 47fbdabb-f2e4-55f0-bb39-3620c2f6df4e
]]></artwork></figure>

</section>
<section anchor="uuid-identifiers"><name>Constructing UUIDs</name>

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient MAY match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They MUST NOT be used as assertions of identity. They are evaluated by identifier conditions (<xref target="identifier-conditions"/>).</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module's firmware has a proprietary update mechanism and doesn't support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:</t>

<figure><artwork><![CDATA[
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)
]]></artwork></figure>

<t>If the Vendor ID is a UUID, the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(Vendor ID, Class-Specific-Information)
]]></artwork></figure>

<t>If the Vendor ID is a CBOR PEN (see <xref target="suit-parameter-vendor-identifier"/>), the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(
    UUID5(NAMESPACE_CBOR_PEN, CBOR_PEN),
    Class-Specific-Information)
]]></artwork></figure>

<t>Class-specific-information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier"><name>suit-parameter-vendor-identifier</name>

<t>suit-parameter-vendor-identifier may be presented in one of two ways:</t>

<t><list style="symbols">
  <t>A Private Enterprise Number</t>
  <t>A byte string containing a UUID (<xref target="RFC4122"/>)</t>
</list></t>

<t>Private Enterprise Numbers are encoded as a relative OID, according to the definition in <xref target="I-D.ietf-cbor-tags-oid"/>. All PENs are relative to the IANA PEN: 1.3.6.1.4.1.</t>

</section>
<section anchor="suit-parameter-class-identifier"><name>suit-parameter-class-identifier</name>

<t>A RFC 4122 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier"><name>suit-parameter-device-identifier</name>

<t>A RFC 4122 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest"><name>suit-parameter-image-digest</name>

<t>A fingerprint computed over the component itself, encoded in the SUIT_Digest <xref target="SUIT_Digest"/> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size"><name>suit-parameter-image-size</name>

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-component-slot"><name>suit-parameter-component-slot</name>

<t>This parameter sets the slot index of a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its index into the component's storage area. This slot MUST be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-uri"><name>suit-parameter-uri</name>

<t>A URI Reference (<xref target="RFC3986"/>) from which to fetch a resource, encoded as a text string. CBOR Tag 32 is not used because the meaning of the text string is unambiguous in this context.</t>

</section>
<section anchor="suit-parameter-source-component"><name>suit-parameter-source-component</name>

<t>This parameter sets the source component to be used with either suit-directive-copy (<xref target="suit-directive-copy"/>) or with suit-directive-swap (<xref target="suit-directive-swap"/>). The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-run-args"><name>suit-parameter-run-args</name>

<t>This parameter contains an encoded set of arguments for suit-directive-run (<xref target="suit-directive-run"/>). The arguments MUST be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-fetch-arguments"><name>suit-parameter-fetch-arguments</name>

<t>An implementation-defined set of arguments to suit-directive-fetch (<xref target="suit-directive-fetch"/>). Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order"><name>suit-parameter-strict-order</name>

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure"><name>suit-parameter-soft-failure</name>

<t>When executing a command sequence inside suit-directive-try-each (<xref target="suit-directive-try-each"/>) or suit-directive-run-sequence (<xref target="suit-directive-run-sequence"/>) and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates. It MUST NOT be set outside of suit-directive-try-each or suit-directive-run-sequence.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom"><name>suit-parameter-custom</name>

<t>This parameter is an extension point for any proprietary, application specific conditions and directives. It MUST NOT be used in the common sequence. This effectively scopes each custom command to a particular Vendor Identifier/Class Identifier pair.</t>

</section>
</section>
<section anchor="suitcondition"><name>SUIT_Condition</name>

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Component Slot</c>
      <c>suit-condition-component-slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>Abort</c>
      <c>suit-condition-abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>Custom Condition</c>
      <c>suit-condition-custom</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition MUST report a result code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. A subsequent command or command sequence MAY continue executing if suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is set. If a condition requires additional information, this MUST be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it MUST report a failure. If a Recipient encounters an unknown condition, it MUST report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary definition by the author of a manifest processor. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions"><name>suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier</name>

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing Recipient MUST match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. Each component MAY match more than one identifier. Care is needed to ensure that manifests correctly identify their targets using these conditions. Using only a generic class ID for a device-specific firmware could result in matching devices that are not compatible.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers MUST be known to the Manifest Processor in order to evaluate compatibility.</t>

</section>
<section anchor="suit-condition-image-match"><name>suit-condition-image-match</name>

<t>Verify that the current component matches the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>) for the current component. The digest is verified against the digest specified in the Component's parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-component-slot"><name>suit-condition-component-slot</name>

<t>Verify that the slot index of the current component matches the slot index set in suit-parameter-component-slot (<xref target="suit-parameter-component-slot"/>). This condition allows a manifest to select between several images to match a target slot.</t>

</section>
<section anchor="suit-condition-abort"><name>suit-condition-abort</name>

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each (<xref target="suit-directive-try-each"/>).</t>

</section>
<section anchor="SUIT_Condition_Custom"><name>suit-condition-custom</name>

<t>suit-condition-custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="suitdirective"><name>SUIT_Directive</name>
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Run</c>
      <c>suit-directive-run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it MUST report a result code. If the Directive reports failure, then the current Command Sequence MUST be terminated.</t>

<section anchor="suit-directive-set-component-index"><name>suit-directive-set-component-index</name>

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be one of three types:</t>

<t><list style="numbers">
  <t>An unsigned integer (REQUIRED to implement in parser)</t>
  <t>A boolean (REQUIRED to implement in parser ONLY IF 2 or more components supported)</t>
  <t>An array of unsigned integers (REQUIRED to implement in parser ONLY IF 3 or more components supported)</t>
</list></t>

<t>If the following commands apply to ONE component, an unsigned integer index into the component list is used. If the following commands apply to ALL components, then the boolean value "True" is used instead of an index. If the following commands apply to more than one, but not all components, then an array of unsigned integer indices into the component list is used.
See <xref target="index-true"/> for more details.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-try-each"><name>suit-directive-try-each</name>

<t>This command runs several SUIT_Command_Sequence instances, one after another, in a strict order. Use this command to implement a "try/catch-try/catch" sequence. Manifest processors MAY implement this command.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters"><name>suit-directive-override-parameters</name>

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch"><name>suit-directive-fetch</name>

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more payloads. suit-directive-fetch retrieves each component listed in component-index. If component-index is True, instead of an integer, then all current manifest components are fetched. If component-index is an array, then all listed components are fetched.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

</section>
<section anchor="suit-directive-copy"><name>suit-directive-copy</name>

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. As described in <xref target="index-true"/> component index may be a single integer, a list of integers, or True. suit-directive-copy retrieves each component specified by the current component-index, respectively.</t>

<t>suit-directive-copy reads its source from suit-parameter-source-component (<xref target="suit-parameter-source-component"/>).</t>

<t>If either the source component parameter or the source component itself is absent, this command fails.</t>

</section>
<section anchor="suit-directive-run"><name>suit-directive-run</name>

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-run through suit-parameter-run-arguments (<xref target="suit-parameter-run-args"/>) and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-run-sequence"><name>suit-directive-run-sequence</name>

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap"><name>suit-directive-swap</name>

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. As with suit-directive-copy, if the source component is missing, this command fails.</t>

<t>If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they MUST be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="integrity-checks"><name>Integrity Check Values</name>

<t>When the Text section or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope. The keys for the envelope elements have the same values as the keys for the manifest elements.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="severable-fields"><name>Severable Elements</name>

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or "Severed" without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD NOT be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists"><name>Access Control Lists</name>

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or Component Identifier prefixes to the listed identities or identity groups. Any identity can verify an image digest, but fetching into or fetching from a Component Identifier requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the Component Identifier or Component Identifier prefix that an identity can use, and also lists the commands and parameters that the identity can use in combination with that Component Identifier.</t>

</section>
<section anchor="SUIT_Digest"><name>SUIT Digest Container</name>

<t>The SUIT digest is a CBOR List containing two elements: an algorithm identifier and a bstr containing the bytes of the digest. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The values of the algorithm identifier are defined by <xref target="I-D.ietf-cose-hash-algs"/>. The following algorithms MUST be implemented by all Manifest Processors:</t>

<t><list style="symbols">
  <t>SHA-256 (-16)</t>
</list></t>

<t>The following algorithms MAY be implemented in a Manifest Processor:</t>

<t><list style="symbols">
  <t>SHAKE128 (-18)</t>
  <t>SHA-384 (-43)</t>
  <t>SHA-512 (-44)</t>
  <t>SHAKE256 (-45)</t>
</list></t>

</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate CBOR tag 107 (suggested) in the "CBOR Tags" registry for the SUIT Envelope.</t>
  <t>allocate CBOR tag 1070 (suggested) in the "CBOR Tags" registry for the SUIT Manifest.</t>
  <t>allocate media type application/suit-envelope in the "Media Types" registry, see below.</t>
  <t>setup several registries as described below.</t>
</list></t>

<t>IANA is requested to create a new category for Software Update for the Internet of Things (SUIT) 
and a page within this category for SUIT manifests.</t>

<t>IANA is also requested to create several registries defined in the subsections below.</t>

<t>For each registry, values 0-255 are Standards Action and 256 or greater are Expert Review. Negative values -255 to 0 are Standards Action, and -256 and lower are Private Use.</t>

<t>New entries to those registries need to provide a label, a name and a reference to a specification that describes the functionality. More guidance on the expert review can be found below.</t>

<section anchor="suit-envelope-elements"><name>SUIT Envelope Elements</name>

<t>IANA is requested to create a new registry for SUIT envelope elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>2</c>
      <c>Authentication Wrapper</c>
      <c><xref target="authentication-info"/></c>
      <c>3</c>
      <c>Manifest</c>
      <c><xref target="manifest-structure"/></c>
      <c>16</c>
      <c>Payload Fetch</c>
      <c><xref target="manifest-commands"/></c>
      <c>17</c>
      <c>Payload Installation</c>
      <c><xref target="manifest-commands"/></c>
      <c>23</c>
      <c>Text Description</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-manifest-elements"><name>SUIT Manifest Elements</name>

<t>IANA is requested to create a new registry for SUIT manifest elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Encoding Version</c>
      <c><xref target="manifest-version"/></c>
      <c>2</c>
      <c>Sequence Number</c>
      <c><xref target="manifest-seqnr"/></c>
      <c>3</c>
      <c>Common Data</c>
      <c><xref target="manifest-common"/></c>
      <c>4</c>
      <c>Reference URI</c>
      <c><xref target="manifest-reference-uri"/></c>
      <c>7</c>
      <c>Image Validation</c>
      <c><xref target="manifest-commands"/></c>
      <c>8</c>
      <c>Image Loading</c>
      <c><xref target="manifest-commands"/></c>
      <c>9</c>
      <c>Image Invocation</c>
      <c><xref target="manifest-commands"/></c>
      <c>16</c>
      <c>Payload Fetch</c>
      <c><xref target="manifest-commands"/></c>
      <c>17</c>
      <c>Payload Installation</c>
      <c><xref target="manifest-commands"/></c>
      <c>23</c>
      <c>Text Description</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-common-elements"><name>SUIT Common Elements</name>

<t>IANA is requested to create a new registry for SUIT common elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>2</c>
      <c>Component Identifiers</c>
      <c><xref target="manifest-common"/></c>
      <c>4</c>
      <c>Common Command Sequence</c>
      <c><xref target="manifest-common"/></c>
</texttable>

</section>
<section anchor="suit-commands"><name>SUIT Commands</name>

<t>IANA is requested to create a new registry for SUIT commands.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>2</c>
      <c>Class Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>3</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>12</c>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>13</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>14</c>
      <c>Abort</c>
      <c>&#160;</c>
      <c>15</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>16</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>17</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>18</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>21</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>22</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>23</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>24</c>
      <c>Device Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>25</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>31</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>32</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>33</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

</section>
<section anchor="suit-parameters"><name>SUIT Parameters</name>

<t>IANA is requested to create a new registry for SUIT parameters.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>2</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>3</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>12</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>13</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>14</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>18</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>21</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>22</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>23</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>24</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

</section>
<section anchor="suit-text-values"><name>SUIT Text Values</name>

<t>IANA is requested to create a new registry for SUIT text values.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Manifest Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Update Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Manifest JSON Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Manifest YAML Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-component-text-values"><name>Â SUIT Component Text Values</name>

<t>IANA is requested to create a new registry for SUIT component text values.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Model Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Vendor Domain</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Model Info</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>5</c>
      <c>Component Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>6</c>
      <c>Component Version</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>7</c>
      <c>Component Version Required</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="expert-review-instructions"><name>Expert Review Instructions</name>

<t>The IANA registries established in this document allow values to be added
based on expert review. This section gives some general guidelines for
what the experts should be looking for, but they are being designated
as experts for a reason, so they should be given substantial
latitude.</t>

<t>Expert reviewers should take into consideration the following points:</t>

<t><list style="symbols">
  <t>Point squatting should be discouraged.  Reviewers are encouraged
   to get sufficient information for registration requests to ensure
   that the usage is not going to duplicate one that is already
   registered, and that the point is likely to be used in
   deployments.  The zones tagged as private use 
   are intended for testing purposes and closed environments; 
   code points in other ranges should not be assigned for testing.</t>
  <t>Specifications are required for the standards track range of point
   assignment.  Specifications should exist for  all other ranges,
   but early assignment before a specification is
   available is considered to be permissible.
   When specifications are not provided, the description provided
   needs to have sufficient information to identify what the point is
   being used for.</t>
  <t>Experts should take into account the expected usage of fields when
   approving point assignment.  The fact that there is a range for
   standards track documents does not mean that a standards track
   document cannot have points assigned outside of that range.  The
   length of the encoded value should be weighed against how many
   code points of that length are left, the size of device it will be
   used on, and the number of code points left that encode to that
   size.</t>
</list></t>

</section>
<section anchor="media-type-registration"><name>Media Type Registration</name>

<t>This section registers the 'application/suit-envelope' media type in the
"Media Types" registry.  This media type are used to indicate that
the content is a SUIT envelope.</t>

<t>```
      Type name: application</t>

<figure><artwork><![CDATA[
  Subtype name: suit-envelope

  Required parameters: N/A

  Optional parameters: N/A

  Encoding considerations: binary

  Security considerations: See the Security Considerations section
  of [[This RFC]].

  Interoperability considerations: N/A

  Published specification: [[This RFC]]

  Applications that use this media type: Primarily used for 
        Firmware and software updates although the content may
        also contain configuration data and other information
        related to software and firmware.

  Fragment identifier considerations: N/A

  Additional information:

  *  Deprecated alias names for this type: N/A

  *  Magic number(s): N/A

  *  File extension(s): cbor

  *  Macintosh file type code(s): N/A

  Person & email address to contact for further information:
  iesg@ietf.org

  Intended usage: COMMON

  Restrictions on usage: N/A

  Author: Brendan Moran, <brendan.moran.ietf@gmail.com>

  Change Controller: IESG

  Provisional registration?  No ```
]]></artwork></figure>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Ãyvind RÃ¸nningstad</t>
  <t>Frank Audun KvamtrÃ¸</t>
  <t>Krzysztof ChruÅciÅski</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC4122' target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author fullname='P. Leach' initials='P.' surname='Leach'><organization/></author>
<author fullname='M. Mealling' initials='M.' surname='Mealling'><organization/></author>
<author fullname='R. Salz' initials='R.' surname='Salz'><organization/></author>
<date month='July' year='2005'/>
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC3986' target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'><organization/></author>
<author fullname='R. Fielding' initials='R.' surname='Fielding'><organization/></author>
<author fullname='L. Masinter' initials='L.' surname='Masinter'><organization/></author>
<date month='January' year='2005'/>
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference anchor='RFC8949' target='https://www.rfc-editor.org/info/rfc8949'>
<front>
<title>Concise Binary Object Representation (CBOR)</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='P. Hoffman' initials='P.' surname='Hoffman'><organization/></author>
<date month='December' year='2020'/>
<abstract><t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t><t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t></abstract>
</front>
<seriesInfo name='STD' value='94'/>
<seriesInfo name='RFC' value='8949'/>
<seriesInfo name='DOI' value='10.17487/RFC8949'/>
</reference>



<reference anchor='RFC9019' target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>



<reference anchor='RFC9124' target='https://www.rfc-editor.org/info/rfc9124'>
<front>
<title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<date month='January' year='2022'/>
<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t><t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9124'/>
<seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.moran-suit-mti'>
   <front>
      <title>Mandatory-to-Implement Algorithms for Creators and Consumers of Software Update for the Internet of Things manifests</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='27' month='July' year='2022'/>
      <abstract>
	 <t>   This document specifies algorithm profiles for SUIT manifest parsers
   and authors to ensure better interoperability.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-moran-suit-mti-01'/>
   <format target='https://www.ietf.org/archive/id/draft-moran-suit-mti-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-cose-hash-algs'>
   <front>
      <title>CBOR Object Signing and Encryption (COSE): Hash Algorithms</title>
      <author fullname='Jim Schaad'>
	 <organization>August Cellars</organization>
      </author>
      <date day='14' month='September' year='2020'/>
      <abstract>
	 <t>   The CBOR Object Signing and Encryption (COSE) syntax
   [I-D.ietf-cose-rfc8152bis-struct] does not define any direct methods
   for using hash algorithms.  There are, however, circumstances where
   hash algorithms are used, such as indirect signatures where the hash
   of one or more contents are signed, and X.509 certificate or other
   object identification by the use of a fingerprint.  This document
   defines a set of hash algorithms that are identified by COSE
   Algorithm Identifiers.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cose-hash-algs-09'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cose-hash-algs-09.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-teep-architecture'>
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname='Mingliang Pei'>
	 <organization>Broadcom</organization>
      </author>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Dave Thaler'>
	 <organization>Microsoft</organization>
      </author>
      <author fullname='David Wheeler'>
	 <organization>Amazon</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-18'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-teep-architecture-18.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-cbor-tags-oid'>
   <front>
      <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
      <author fullname='Carsten Bormann'>
	 <organization>UniversitÃ¤t Bremen TZI</organization>
      </author>
      <date day='21' month='May' year='2021'/>
      <abstract>
	 <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.

 This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cbor-tags-oid-08'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Firmware Encryption with SUIT Manifests</title>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   This document specifies a firmware update mechanism where the
   firmware image is encrypted.  Firmware encryption uses the IETF SUIT
   manifest with key establishment provided by hybrid public-key
   encryption (HPKE) and AES Key Wrap (AES-KW).  HPKE uses public key
   cryptography while AES-KW uses a pre-shared key-encryption key.
   Encryption of the firmware image is accomplished with convential
   symmetric key cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-06'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-firmware-encryption-06.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-update-management'>
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to IoT
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-update-management-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-update-management-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-trust-domains'>
   <front>
      <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   (as defined in [I-D.ietf-suit-manifest]) for use in deployments with
   multiple trust domains.  A device has more than one trust domain when
   it uses different trust anchors for different purposes or components
   in the context of firmware update.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-trust-domains-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-trust-domains-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-report'>
   <front>
      <title>Secure Reporting of Update Status</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz'>
	 <organization>Fraunhofer SIT</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   The Software Update for the Internet of Things (SUIT) manifest
   provides a way for many different update and boot workflows to be
   described by a common format.  However, this does not provide a
   feedback mechanism for developers in the event that an update or boot
   fails.

   This specification describes a lightweight feedback mechanism that
   allows a developer in possession of a manifest to reconstruct the
   decisions made and actions performed by a manifest processor.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-report-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-report-02.txt' type='TXT'/>
</reference>



<reference anchor='RFC7228' target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='M. Ersue' initials='M.' surname='Ersue'><organization/></author>
<author fullname='A. Keranen' initials='A.' surname='Keranen'><organization/></author>
<date month='May' year='2014'/>
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>


<reference anchor="YAML" target="https://yaml.org/">
  <front>
    <title>YAML Ain't Markup Language</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<t>To be valid, the following CDDL MUST have the COSE CDDL appended to it. The COSE CDDL can be obtained by following the directions in <xref target="RFC8152"/>, Section 1.3.</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Envelope_Tagged = #6.107(SUIT_Envelope)
SUIT_Envelope = {
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * SUIT_Integrated_Payload,
  * $$SUIT_Envelope_Extensions,
}

SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]

SUIT_Digest = [
  suit-digest-algorithm-id : suit-cose-hash-algs,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

SUIT_Severable_Manifest_Members = (
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  * $$SUIT_severable-members-extensions,
)

SUIT_Integrated_Payload = (suit-integrated-payload-key => bstr)
suit-integrated-payload-key = tstr

SUIT_Manifest_Tagged = #6.1070(SUIT_Manifest)

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Unseverable_Members,
    SUIT_Severable_Members_Choice,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-run => bstr .cbor SUIT_Command_Sequence,
  * $$unseverable-manifest-member-extensions,
)

SUIT_Severable_Members_Choice = (
  ? suit-payload-fetch => SUIT_Digest / 
      bstr .cbor SUIT_Command_Sequence,
  ? suit-install => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
  ? suit-text => SUIT_Digest / bstr .cbor SUIT_Text_Map,
  * $$severable-manifest-members-choice-extensions
)

SUIT_Common = {
    ? suit-components             => SUIT_Components,
    ? suit-common-sequence        => bstr .cbor SUIT_Common_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Components           = [ + SUIT_Component_Identifier ]

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
    * $$SUIT_Dependency-extensions,
}

;REQUIRED to implement:
suit-cose-hash-algs /= cose-alg-sha-256

;OPTIONAL to implement:
suit-cose-hash-algs /= cose-alg-shake128
suit-cose-hash-algs /= cose-alg-sha-384
suit-cose-hash-algs /= cose-alg-sha-512
suit-cose-hash-algs /= cose-alg-shake256

SUIT_Component_Identifier =  [* bstr]

SUIT_Common_Sequence = [
    + ( SUIT_Condition // SUIT_Common_Commands )
]

SUIT_Common_Commands //= (suit-directive-set-component-index,  IndexArg)
SUIT_Common_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Common_Sequence)
SUIT_Common_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument_Common)
SUIT_Common_Commands //= (suit-directive-override-parameters,
    {+ $$SUIT_Parameters})

IndexArg /= uint
IndexArg /= bool
IndexArg /= [+uint]


SUIT_Directive_Try_Each_Argument_Common = [
    2* bstr .cbor SUIT_Common_Sequence,
    ?nil
]

SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-component-slot,    SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-abort,             SUIT_Rep_Policy)

SUIT_Directive //= (suit-directive-set-component-index,  IndexArg)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-override-parameters,
    {+ $$SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-copy,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-swap,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-run,               SUIT_Rep_Policy)

SUIT_Directive_Try_Each_Argument = [
    2* bstr .cbor SUIT_Command_Sequence,
    ?nil
]

SUIT_Rep_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

$$SUIT_Parameters //= (suit-parameter-vendor-identifier =>
    (RFC4122_UUID / cbor-pen))

cbor-pen = #6.112(bstr)

$$SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
$$SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
$$SUIT_Parameters //= (suit-parameter-image-size => uint)
$$SUIT_Parameters //= (suit-parameter-component-slot => uint)

$$SUIT_Parameters //= (suit-parameter-uri => tstr)
$$SUIT_Parameters //= (suit-parameter-source-component => uint)
$$SUIT_Parameters //= (suit-parameter-run-args => bstr)

$$SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)

$$SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

$$SUIT_Parameters //= (suit-parameter-strict-order => bool)
$$SUIT_Parameters //= (suit-parameter-soft-failure => bool)

RFC4122_UUID = bstr .size 16

SUIT_Text_Map = {
    SUIT_Text_Keys,
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    }
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

suit-authentication-wrapper = 2
suit-manifest = 3

;REQUIRED to implement:
cose-alg-sha-256 = -16

;OPTIONAL to implement:
cose-alg-shake128 = -18
cose-alg-sha-384 = -43
cose-alg-sha-512 = -44
cose-alg-shake256 = -45

;Unseverable, recipient-necessary
suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-validate = 7
suit-load = 8
suit-run = 9
;Severable, recipient-necessary
suit-payload-fetch = 16
suit-install = 17
;Severable, recipient-unnecessary
suit-text = 23

suit-components = 2
suit-common-sequence = 4

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-component-slot    = 5

suit-condition-abort                    = 14
suit-condition-device-identifier        = 24

suit-directive-set-component-index      = 12
suit-directive-try-each                 = 15
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-swap                     = 31
suit-directive-run-sequence             = 32

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-component-slot    = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14

suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-run-args          = 23

suit-parameter-device-identifier = 24

suit-parameter-custom = nint

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
]]></sourcecode></figure>

</section>
<section anchor="examples"><name>B. Examples</name>

<t>The following examples demonstrate a small subset of the functionality of the manifest. Even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<t>Note that reporting policies are declared for each non-flow-control command in these examples. The reporting policies used in the examples are described in the following tables.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Label</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Rec-Pass</c>
      <c>suit-send-record-on-failure</c>
      <c>Rec-Fail</c>
      <c>suit-send-sysinfo-success</c>
      <c>Sys-Pass</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Sys-Fail</c>
</texttable>

<texttable>
      <ttcol align='left'>Command</ttcol>
      <ttcol align='left'>Sys-Fail</ttcol>
      <ttcol align='left'>Sys-Pass</ttcol>
      <ttcol align='left'>Rec-Fail</ttcol>
      <ttcol align='left'>Rec-Pass</ttcol>
      <c>suit-condition-vendor-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-class-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-image-match</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-component-slot</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>1</c>
      <c>suit-directive-fetch</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-copy</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-run</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
</texttable>

<section anchor="example-0-secure-boot"><name>Example 0: Secure Boot</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
</list></t>

<t>It also serves as the minimum example.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'6658ea560262696dd1f13b782239a064da7c6c5cbaf52fded428a6fc83c7e5af'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'68113f1e76731330fea16136cead2be4fa
8d4bb3e327e3f9232eb4f13b5d118f2ea6e31d9a09a240f6f5770776916e15a4ebca1b
6262cf6e40a44353bd8161d9'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:0,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-run / 23,2
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  161</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af035871a50101020003585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f0943821702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  237</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af584ad28443a10126a0f6584068113f
1e76731330fea16136cead2be4fa8d4bb3e327e3f9232eb4f13b5d118f2e
a6e31d9a09a240f6f5770776916e15a4ebca1b6262cf6e40a44353bd8161
d9035871a50101020003585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f0943821702
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload"><name>Example 1: Simultaneous Download and Installation of Payload</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Simultaneous download and installation of payload. No secure boot is present in this example to demonstrate a download-only manifest.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'ef14b7091e8adae8aa3bb6fca1d64fb37e19dcf8b35714cfdddc5968c80ff50e'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'11b434a425e02f8ca4459c61a85b140732
5b6d686ead7ab50c1fcb9501a54520dd07146c733628bbeaa42752fab0cb828d8b41f2
53813e2132977a6be244c3bf'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:1,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  196</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820ef14b7091e8adae8aa3bb6fca1d64fb37e
19dcf8b35714cfdddc5968c80ff50e035894a50101020103585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f1158258614a115781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  272</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820ef14b7091e8adae8aa3bb6fca1d64fb37e
19dcf8b35714cfdddc5968c80ff50e584ad28443a10126a0f6584011b434
a425e02f8ca4459c61a85b1407325b6d686ead7ab50c1fcb9501a54520dd
07146c733628bbeaa42752fab0cb828d8b41f253813e2132977a6be244c3
bf035894a50101020103585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f1158258614a11578
1b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502
030f
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-secure-boot-severed-fields"><name>Example 2: Simultaneous Download, Installation, Secure Boot, Severed Fields</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>This example also demonstrates severable elements (<xref target="ovr-severable"/>), and text (<xref target="manifest-digest-text"/>).</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'86bbcc8823f3a4441956f02b001302f503487461fb77fab086efe31530881f97'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'8c6bf014b62fa7b80dd5eb2ff7024ab52a
116cd1bc0db1f10311b31e7b29e3beae765fad42fb8600fa13a6bf6d5e45929a05a607
67f9b7420a5002a05d95e49e'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:2,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-run / 23,2
            ] >>,
            / install / 17:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'cfa90c5c58595e7f5119a72f803fd0370b3e6abbec6315cd38f63135281bc498'
            ],
            / text / 23:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'2bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918'
            ],
        } >>,
    })
]]></artwork></figure>

<t>Total size of the Envelope without COSE authentication object or Severable Elements:  235</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f582086bbcc8823f3a4441956f02b001302f503
487461fb77fab086efe31530881f970358bba70101020203585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f094382170211822f5820cfa90c5c58595e7f5119a72f803f
d0370b3e6abbec6315cd38f63135281bc49817822f58202bfc4d0cc6680b
e7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918
]]></artwork></figure>
<t>Total size of the Envelope with COSE authentication object but without Severable Elements:  311</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f582086bbcc8823f3a4441956f02b001302f503
487461fb77fab086efe31530881f97584ad28443a10126a0f658408c6bf0
14b62fa7b80dd5eb2ff7024ab52a116cd1bc0db1f10311b31e7b29e3beae
765fad42fb8600fa13a6bf6d5e45929a05a60767f9b7420a5002a05d95e4
9e0358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f094382170211822f
5820cfa90c5c58595e7f5119a72f803fd0370b3e6abbec6315cd38f63135
281bc49817822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf918
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object and Severable Elements:  894</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba4025873825824822f582086bbcc8823f3a4441956f02b001302f503
487461fb77fab086efe31530881f97584ad28443a10126a0f658408c6bf0
14b62fa7b80dd5eb2ff7024ab52a116cd1bc0db1f10311b31e7b29e3beae
765fad42fb8600fa13a6bf6d5e45929a05a60767f9b7420a5002a05d95e4
9e0358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f094382170211822f
5820cfa90c5c58595e7f5119a72f803fd0370b3e6abbec6315cd38f63135
281bc49817822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf91811583c8614a1157832687474703a2f2f657861
6d706c652e636f6d2f766572792f6c6f6e672f706174682f746f2f66696c
652f66696c652e62696e1502030f17590204a20179019d2323204578616d
706c6520323a2053696d756c74616e656f757320446f776e6c6f61642c20
496e7374616c6c6174696f6e2c2053656375726520426f6f742c20536576
65726564204669656c64730a0a2020202054686973206578616d706c6520
636f766572732074686520666f6c6c6f77696e672074656d706c61746573
3a0a202020200a202020202a20436f6d7061746962696c69747920436865
636b20287b7b74656d706c6174652d636f6d7061746962696c6974792d63
6865636b7d7d290a202020202a2053656375726520426f6f7420287b7b74
656d706c6174652d7365637572652d626f6f747d7d290a202020202a2046
69726d7761726520446f776e6c6f616420287b7b6669726d776172652d64
6f776e6c6f61642d74656d706c6174657d7d290a202020200a2020202054
686973206578616d706c6520616c736f2064656d6f6e7374726174657320
736576657261626c6520656c656d656e747320287b7b6f76722d73657665
7261626c657d7d292c20616e64207465787420287b7b6d616e6966657374
2d6469676573742d746578747d7d292e814100a2036761726d2e636f6d05
78525468697320636f6d706f6e656e7420697320612064656d6f6e737472
6174696f6e2e205468652064696765737420697320612073616d706c6520
7061747465726e2c206e6f742061207265616c206f6e652e
]]></artwork></figure>

</section>
<section anchor="example-3-ab-images"><name>Example 3: A/B images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>A/B Image Template (<xref target="a-b-template"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'b3e6a52776bf3ed218feba031c609c98260e1a52fc1f019683edb6d1c5c4a379'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'9ff1d63474897d302f7ec4ab98cb07e22c
9853b92a56e3ec9286a4e248d4ac59665de35824c1caad4b056b35e8a40c60086f36eb
519e31c7710db4fdc0b99eff'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:3,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    } ,
                    / directive-try-each / 15,[
                        << [
                            / directive-override-parameters / 20,{
                                / slot / 5:0,
                            } ,
                            / condition-component-slot / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<< [
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                                ] >>,
                                / image-size / 14:34768,
                            }
                        ] >> ,
                        << [
                            / directive-override-parameters / 20,{
                                / slot / 5:1,
                            } ,
                            / condition-component-slot / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<< [
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                                ] >>,
                                / image-size / 14:76834,
                            }
                        ] >>
                    ] ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-try-each / 15,[
                    << [
                        / directive-override-parameters / 20,{
                            / slot / 5:0,
                        } ,
                        / condition-component-slot / 5,5 ,
                        / directive-override-parameters / 20,{
                            / uri / 21:'http://example.com/file1.bin',
                        }
                    ] >> ,
                    << [
                        / directive-override-parameters / 20,{
                            / slot / 5:1,
                        } ,
                        / condition-component-slot / 5,5 ,
                        / directive-override-parameters / 20,{
                            / uri / 21:'http://example.com/file2.bin',
                        }
                    ] >>
                ] ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  320</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820b3e6a52776bf3ed218feba031c609c9826
0e1a52fc1f019683edb6d1c5c4a3790359010fa5010102030358a4a20281
81410004589b8814a20150fa6b4a53d5ad5fdfbe9de663e4d41ffe025014
92af1425695e48bf429b2d51f2ab450f8258348614a10500050514a20358
24822f582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d058368614a10501050514a2035824822f582001
23456789abcdeffedcba987654321000112233445566778899aabbccddee
ff0e1a00012c22010f020f074382030f11585b860f8258288614a1050005
0514a115781c687474703a2f2f6578616d706c652e636f6d2f66696c6531
2e62696e58288614a10501050514a115781c687474703a2f2f6578616d70
6c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  396</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820b3e6a52776bf3ed218feba031c609c9826
0e1a52fc1f019683edb6d1c5c4a379584ad28443a10126a0f658409ff1d6
3474897d302f7ec4ab98cb07e22c9853b92a56e3ec9286a4e248d4ac5966
5de35824c1caad4b056b35e8a40c60086f36eb519e31c7710db4fdc0b99e
ff0359010fa5010102030358a4a2028181410004589b8814a20150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450f8258348614a10500050514a2035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0583686
14a10501050514a2035824822f58200123456789abcdeffedcba98765432
1000112233445566778899aabbccddeeff0e1a00012c22010f020f074382
030f11585b860f8258288614a10500050514a115781c687474703a2f2f65
78616d706c652e636f6d2f66696c65312e62696e58288614a10501050514
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

</section>
<section anchor="example-4-load-from-external-storage"><name>Example 4: Load from External Storage</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>Install (<xref target="template-install"/>)</t>
  <t>Load (<xref target="template-load-ext"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'838eb848698c9d9dd29b5930102ea1f29743857d975f52ed4d19589b821e82cf'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'5ee9d2698734cef75582a2c188a328b06d
414b20dff7043528045a3fc2bdcb6be36887e2dfdb6ea5ab91d74077a6cc806c458002
6bfea22c4f3153e1d9692c5a'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:4,
            / common / 3:<< {
                / components / 2:[
                    [h'00'] ,
                    [h'02'] ,
                    [h'01']
                ],
                / common-sequence / 4:<< [
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15
            ] >>,
            / load / 8:<< [
                / directive-set-component-index / 12,2 ,
                / directive-override-parameters / 20,{
                    / image-digest / 3:<< [
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ] >>,
                    / image-size / 14:76834,
                    / source-component / 22:0 / [h'00'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-set-component-index / 12,2 ,
                / directive-run / 23,2
            ] >>,
            / payload-fetch / 16:<< [
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / image-digest / 3:<< [
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ] >>,
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / source-component / 22:1 / [h'02'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  327</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820838eb848698c9d9dd29b5930102ea1f297
43857d975f52ed4d19589b821e82cf03590116a801010204035867a20283
814100814102814101045858880c0014a40150fa6b4a53d5ad5fdfbe9de6
63e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820
00112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100e1987d0010f020f0745840c00030f085838880c0214a3035824822f
58200123456789abcdeffedcba987654321000112233445566778899aabb
ccddeeff0e1a00012c2216001602030f0945840c02170210584e880c0114
a2035824822f582000112233445566778899aabbccddeeff0123456789ab
cdeffedcba987654321015781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e1502030f114b880c0014a116011602030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  403</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820838eb848698c9d9dd29b5930102ea1f297
43857d975f52ed4d19589b821e82cf584ad28443a10126a0f658405ee9d2
698734cef75582a2c188a328b06d414b20dff7043528045a3fc2bdcb6be3
6887e2dfdb6ea5ab91d74077a6cc806c4580026bfea22c4f3153e1d9692c
5a03590116a801010204035867a20283814100814102814101045858880c
0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e
48bf429b2d51f2ab45035824822f582000112233445566778899aabbccdd
eeff0123456789abcdeffedcba98765432100e1987d0010f020f0745840c
00030f085838880c0214a3035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c2216001602
030f0945840c02170210584e880c0114a2035824822f5820001122334455
66778899aabbccddeeff0123456789abcdeffedcba987654321015781b68
7474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502030f
114b880c0014a116011602030f
]]></artwork></figure>

</section>
<section anchor="example-5-two-images"><name>Example 5: Two Images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Furthermore, it shows using these templates with two images.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'264dc89eb4a39ae7a8ed05e4d6232153bce4fb9a111a31310b90627d1edfc3bb'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'c0bf1b20b847292dc45015a013edbc5691
5b22fe81a8aec825eac2fb3b084fa6fa08761461987c92189ec6b8b5ab361d2588b050
70b3ed03943549bafd355bf0'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:5,
            / common / 3:<< {
                / components / 2:[
                    [h'00'] ,
                    [h'01']
                ],
                / common-sequence / 4:<< [
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15 ,
                    / directive-set-component-index / 12,1 ,
                    / directive-override-parameters / 20,{
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                        ] >>,
                        / image-size / 14:76834,
                    }
                ] >>,
            } >>,
            / validate / 7:<< [
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-set-component-index / 12,0 ,
                / directive-run / 23,2
            ] >>,
            / install / 17:<< [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file1.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file2.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  306</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820264dc89eb4a39ae7a8ed05e4d6232153bc
e4fb9a111a31310b90627d1edfc3bb03590101a601010205035895a20282
8141008141010458898c0c0014a40150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820001122
33445566778899aabbccddeeff0123456789abcdeffedcba98765432100e
1987d0010f020f0c0114a2035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c220749880c
00030f0c01030f0945840c00170211584f900c0014a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65312e62696e1502030f0c0114
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  382</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820264dc89eb4a39ae7a8ed05e4d6232153bc
e4fb9a111a31310b90627d1edfc3bb584ad28443a10126a0f65840c0bf1b
20b847292dc45015a013edbc56915b22fe81a8aec825eac2fb3b084fa6fa
08761461987c92189ec6b8b5ab361d2588b05070b3ed03943549bafd355b
f003590101a601010205035895a202828141008141010458898c0c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab45035824822f582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d0010f020f0c0114a2035824
822f58200123456789abcdeffedcba987654321000112233445566778899
aabbccddeeff0e1a00012c220749880c00030f0c01030f0945840c001702
11584f900c0014a115781c687474703a2f2f6578616d706c652e636f6d2f
66696c65312e62696e1502030f0c0114a115781c687474703a2f2f657861
6d706c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

</section>
</section>
<section anchor="design-rationale"><name>C. Design Rational</name>

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted invocation operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted invocation of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency's commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope"><name>C.1 Design Rationale: Envelope</name>

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of Severable Elements (<xref target="severable-fields"/>)</t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers"><name>C.2 Byte String Wrappers</name>

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the common sequence. The common sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>
<section anchor="implementation-matrix"><name>D. Implementation Conformance Matrix</name>

<t>This section summarizes the functionality a minimal manifest processor
implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Class Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Device Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>OPTIONAL</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>REQUIRED</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>Abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>OPTIONAL</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>REQUIRED if more than one component</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>OPTIONAL</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>REQUIRED</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>REQUIRED for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>OPTIONAL</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>REQUIRED for Bootloader</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>OPTIONAL</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>REQUIRED</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>REQUIRED</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>REQUIRED</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>REQUIRED</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>REQUIRED for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>OPTIONAL</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>OPTIONAL</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>OPTIONAL</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>OPTIONAL</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>OPTIONAL</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c>OPTIONAL</c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
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
MZF1fkWh0AinaoesYZREYpCrjPb2QtcO+t2h+KbvQTBAoNPHdzhP9PQxJSu/
8o6IHls7RByt6L/iDDEbXnLJ86cEZDlNm++rYQKXyeGborThHbZxEZeXGvqr
KeR0k8XV+HKSzxD3LSF7+5hSLIOmA57Ha0HgBSlHsVvSgMMtIHEwDpP/OSlb
XnXTx3HjjOcpttpjKxZ2wgkyvK1IshQlvRjRbU8uLOCgxdoptKWzV8I9I5BF
vmoANIAkSTfoXKJl0KA759C2WsD1laQF6lDy5jmrAX8U+WhVVhlmJXpatuq5
CTID5DIUTbMxktrPlujb5Xt3eJ8UOD/Jw8t2IddcPbod7dIU5T8mF+NGyB5e
ZZd8oBMn2Y7gMNFNcR0EZYaQwx5zppGBvqVORUvl6GPuE3V9b3gw3PcEFYYJ
Ip+iCPyaIhJkLCoz0cRt7RK29YlDtiEqSrOUfJ8VM9gu7jxP4qLUFBmhSpEW
RS0JYBk6mhklM9SqDZYWbm9oGK0LgruMOqPRPylwKGrr4VGrAPvGPNQhy3Sl
PJvtIkHtIGCgMazHnVCq6Ig1lsnOVnEhAL8cpxzFMzQYIKzRKIX7ukAOuVwR
jMEq8/yBlKacFhNNHLIbdJyXlMyNSRCY0TpjLKOasdvwUpABi/l/7gcQc1Cw
H9Zbg5X0btOOXUISF7P50fFTNSSzx20gqSRU96Ak1dt3ohFXeOtnCxfp7LKi
VKNpUliyYFwF44JhP0ehJN5wN+M1N2KxgP1A3eNnqSm2ETmeS+4fCvRXEokZ
CHURv00Xq4WKU6GHSExwcGcmZKDlIGIMtUBrCbYZMPbAHYgnrmh/cfME1AWi
OpmlATevR+RhnerFJE9KZ5grV4hnzRgTCeoFSKnahQeCK5StMHTKON2imJSk
X3jrVVJtErF9BbZh5xFTFRzfHLiwjqZaVg5rsb9uagJMxkKu8Z2xegVF0nXG
vAq5DYY7sGVIZBQnNego6f/0ZXTq8AciyjTe96xEG/vv6ha729zDTrmLUbkR
MP8qXzhdkLBh8ehVlVOIa/23sWdSm1raIm+jij54Uh2iPKK0ZAhXWEkI/YKD
+QOq86IUaq5gpfhWamCCp8tBU0BAFvIlO+j5Lffns0M5CqX4wloAkzyi3KmJ
WruSTwBkLHTk8wQkdi+KT5Y2aIA1bQOOHK1prisxPxkci7c+HIxOtlp3DGn/
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
iVPc4AEGxTYqZ7UIF7rAG8oI+v23FW4TBqIL31l9m1663xgUFy1r+Q/Gdq/+
cvOus5cP7jVhDFuq42jTB/WXDTe/ZRz3t4Fz13HstYNct87wYL8VQLnj5caY
kVq7Xr7bjurY/vbdxjgCcMnaywcNfMwNlLVBznSU1VHzUDtstLSBsjokkdq+
d8gc+lajR08SdWRxr9Fl4Dup7fEGUdHb3BaBsG1XN4p/7iw0ZTufM3TfoG77
uu9Nt3vdt6XbvO470mNjm6SlYEAdIlIwoA65KBxQuzCkt8UmCSi63/pOIPZE
DzBuAMMxHg2jE0ZSQ/QNAVWT2sdeSII+iCbJgkHRKDqD8L4YgsFQygJYgSb4
3MkVAwPTJd+G3oqhEYpLvMgN/axMAuSICwoUlkFR0WAOtHXFbN3gT44fnxO4
0hKu/mIf0ZkOKXACA1MGg0cn35w+i168PP3+6OIk+u7kR/q1d3b6zbdHs5Oj
s0dn3zxa//rN+dm9h/D3N8fH8u/rk28ffbN3HV+fPjr6859nR8t/+vGXfzp+
9c3Ts/t73z867h3/8uN59Zcv9h7+8s0iW//pRbF8/PTitzuX6V+eX748enZ8
dHR+Ms9PEOv3118f/uny+7dp8uWzfHH1669Pv3pZXfVefDFKqx9+GF9Oro6K
i3L63ZuqPP7x5O31d8+q4tm3f0kfPn9099kX19nRq6r8bfHy4O7Zveq79Aee
1smzx81J0a5fNKJklhibOSbYKh/HMQDMLt2Ct6zeq0dPT4+9xXvy5vrk+sdv
v8v/6fS3X/aOj/7846n8+/HRn8ePYblOLv8UP/rm13tPf/316vzH78c/Zqvf
4j8VD35N75yMeqPf7izuFd/Ps9O/jK6/2/vy2/Xy6eho8ehsfPzLKP7t5f69
q4vZ5Ldp+afrJ09HZ/ffTKrfnj89z+ezr7/25l8bFk2fYUB5Klws+fzbI4Lo
KD1sH6NjxOfIJUS4XgclTbTmCtwhmltAl3UGvGYK9KewbK4MV1ZbTA4NamlY
i5xWdVIP4DxDUifQczwfYqN6H1Hal+Z49RomJWSJYjLCnLDx4AXcha2vTS2p
E1/DFE/vtbr56X10vi7rbdUNUPwStdTTdH73m9eG16c/Si9x7X0wwU2S5fto
3/+/G6XMG973Bc6bmg6Fg/fRnry5595ultPc819sFcpueIeLZYavcMYZn4C9
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
wINYms2pcfcHbegQNwYs5/8DlSk/jWg0AgA=

-->

</rfc>

