<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-19" category="std">

  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>
    <author initials="Ø." surname="Rønningstad" fullname="Øyvind Rønningstad">
      <organization>Nordic Semiconductor</organization>
      <address>
        <email>oyvind.ronningstad@gmail.com</email>
      </address>
    </author>

    <date year="2022" month="October" day="06"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about code/data obtained by a recipient (chiefly
the firmware for an IoT device), where to find the that code/data, the
devices to which it applies, and cryptographic information protecting
the manifest. Software updates and Trusted Invocation both tend to use
sequences of common operations, so the manifest encodes those sequences
of operations, rather than declaring the metadata.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata describing one or more code or data payloads and how to:</t>

<t><list style="symbols">
  <t>Obtain any dependencies</t>
  <t>Obtain the payload(s)</t>
  <t>Install them</t>
  <t>Verify them</t>
  <t>Load them into memory</t>
  <t>Invoke them</t>
</list></t>

<t>This specification defines the SUIT manifest format and it is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="RFC9124"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>a Firmware Author to reason about releasing a firmware.</t>
  <t>a Network Operator to reason about compatibility of a firmware.</t>
  <t>a Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>a Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>a device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>a device to reason about the applicability of a firmware.</t>
  <t>a device to reason about the installation of a firmware.</t>
  <t>a device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="RFC9019"/> and the threats, requirements, and user stories in <xref target="RFC9124"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or Trusted Invocation are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In this document, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the language is tailored to software updates and Trusted Invocation.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and Trusted Invocation use cases, there is nothing in the SUIT Information Model (<xref target="RFC9124"/>) that restricts its use to only those use cases. Other use cases include the management of trusted applications (TAs) in a Trusted Execution Environment (TEE), as discussed in <xref target="I-D.ietf-teep-architecture"/>.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient's storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document"><name>How to use this Document</name>

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rational is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> gives a summarize of the mandatory-to-implement features of this specification.</t>

<t>This specification covers the core features of SUIT. Additional specifications describe functionality of advanced use cases, such as:</t>

<t><list style="symbols">
  <t>Firmware Encryption is covered in <xref target="I-D.ietf-suit-firmware-encryption"/></t>
  <t>Update Management is covered in <xref target="I-D.ietf-suit-update-management"/></t>
  <t>Features, such as dependencies, key delegation, multiple processors, required by the use of multiple trust domains are covered in <xref target="I-D.ietf-suit-trust-domains"/></t>
  <t>Secure reporting of the update status is covered in <xref target="I-D.ietf-suit-report"/></t>
  <t>Compression of firmware images</t>
</list></t>

</section>
<section anchor="background"><name>Background</name>

<t>Distributing software updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="RFC9019"/>. The security aspects are described in <xref target="RFC9124"/>.</t>

<section anchor="iot-firmware-update-constraints"><name>IoT Firmware Update Constraints</name>

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivered to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model"><name>SUIT Workflow Model</name>

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Invocation Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and invoking images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Invoke image(s).</t>
</list></t>

<t>If verification and invocation is implemented in a bootloader, then the bootloader MUST also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader may add its own authentication, e.g. a Message Authentication Code (MAC), to the manifest in order to prevent further verifications.</t>

</section>
</section>
<section anchor="metadata-structure-overview"><name>Metadata Structure Overview</name>

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest..</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, such as affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable elements.</t>
    </list></t>
  <t>Severable elements (see <xref target="ovr-severable"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| Integrated Payloads     |          | Structure Version            |
+-------------------------+          | Sequence Number              |
                                     | Reference to Full Manifest   |
                               +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Components IDs          |      +-> +-----------------------+
| Common Command Sequence ---------> | Command Sequence      |
+-------------------------+          +-----------------------+
                                     | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope"><name>Envelope</name>

<t>The SUIT Envelope is a container that encloses the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that would add substantial complexity with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-auth"><name>Authentication Block</name>

<t>The Authentication Block contains a bstr-wrapped SUIT Digest Container, see <xref target="SUIT_Digest"/>, and one or more <xref target="RFC8152"/> CBOR Object Signing and Encryption (COSE) authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>Each of these objects is used in detached payload mode. The payload is the bstr-wrapped SUIT_Digest.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest"><name>Manifest</name>

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical"><name>Critical Metadata</name>

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which manifest is newest and whether the structure version is supported. It also MAY provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, and <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common"><name>Common</name>

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of two parts: a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence MUST NOT have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/> for more detail.</t>

</section>
<section anchor="ovr-commands"><name>Command Sequences</name>

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Payload Fetch, and Payload Installation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Invocation Command Sequences are: System Validation, Image Loading, and Image Invocation. An Invocation Procedure is the complete set of each Invocation Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command (dependencies are not defined in this specification).</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity"><name>Integrity Check Values</name>

<t>To enable <xref target="ovr-severable"/>, there needs to be a mechanism to verify integrity of any metadata outside the manifest. Integrity Check Values are used to verify the integrity of metadata that is not contained in the manifest. This MAY include Severable Command Sequences, or Text data. Integrated Payloads are integrity-checked using Command Sequences, so they do not have Integrity Check Values present in the Manifest.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text"><name>Human-Readable Text</name>

<t>Text is typically a Severable Element (<xref target="ovr-severable"/>). It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable"><name> Severable Elements</name>

<t>Severable Elements are elements of the Envelope (<xref target="ovr-envelope"/>) that have Integrity Check Values (<xref target="ovr-integrity"/>) in the Manifest (<xref target="ovr-manifest"/>).</t>

<t>Because of this organisation, these elements can be discarded or "Severed" from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system severs the Text sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated"><name>Integrated Payloads</name>

<t>In some cases, it is beneficial to include a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest's envelope.</t>
</list></t>

<t>See <xref target="template-integrated-payload"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior"><name>Manifest Processor Behavior</name>

<t>This section describes the behavior of the manifest processor and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the manifest processor: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup"><name>Manifest Processor Setup</name>

<t>Prior to executing any command sequence, the manifest processor or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the manifest processor or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the manifest processor can choose between several manifests, it MUST select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest, according to application-specific policy.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported Component Identifier encountered.</t>
  <t>Payload not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Payload verification failed.</t>
  <t>Missing required component from a Component Set.</t>
  <t>Required parameter not supplied.</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Selecting an older manifest in the event of failure of the latest valid manifest is a robustness mechanism that is necessary for supporting the requirements in <xref target="RFC9019"/>, section 3.5. It may not be appropriate for all applications. In particular Trusted Execution Environments MAY require a failure to invoke a new installation, rather than a rollback approach. See <xref target="RFC9124"/>, Section 4.2.1 for more discussion on the security considerations that apply to rollback.</t>

<t>Following these initial tests, the manifest processor clears all parameter storage. This ensures that the manifest processor begins without any leaked data.</t>

</section>
<section anchor="required-checks"><name> Required Checks</name>

<t>The RECOMMENDED process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a Recipient receives an incompatible manifest.</t>

<t>When validating authenticity of manifests, the manifest processor MAY use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity.</t>

<t>Once a valid, authentic manifest has been selected, the manifest processor MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component is supported.</t>

<t>For each listed component, the manifest processor MUST provide storage for the supported parameters. If the manifest processor does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The manifest processor SHOULD check that the shared sequence contains at least Check Vendor Identifier command and at least one Check Class Identifier command.</t>

<t>Because the shared sequence contains Check Vendor Identifier and Check Class Identifier command(s), no custom commands are permitted in the shared sequence. This ensures that any custom commands are only executed by devices that understand them.</t>

<t>If the manifest contains more than one component, each command sequence MUST begin with a Set Component Index.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by one update, that is the manifest:</t>

<t><list style="numbers">
  <t>has sufficient permissions imparted by its signatures</t>
  <t>specifies a digest and a payload for every Component in the Component Set.</t>
</list></t>

<section anchor="minimal-sigs"><name>Minimizing Signature Verifications</name>

<t>Signature verification can be energy and time expensive on a constrained device. MAC verification is typically unaffected by these concerns. A Recipient MAY choose to parse and execute only the SUIT_Common section of the manifest prior to signature verification, if all of the below apply:</t>

<t><list style="symbols">
  <t>The Authentication Block contains a COSE_Sign_Tagged or COSE_Sign1_Tagged</t>
  <t>The Recipient receives manifests over an unauthenticated channel, exposing it to more inauthentic or incompatible manifests, and</t>
  <t>The Recipient has a power budget that makes signature verification undesirable</t>
</list></t>

<t>When executing Common prior to authenticity validation, the Manifest Processor MUST first evaluate the integrity of the manifest using the SUIT_Digest present in the authentication block.</t>

<t>The guidelines in Creating Manifests (<xref target="creating-manifests"/>) require that the common section contains the applicability checks, so this section is sufficient for applicability verification. The parser MUST restrict acceptable commands to conditions and the following directives: Override Parameters, Set Parameters, Try Each, and Run Sequence ONLY. The manifest parser MUST NOT execute any command with side-effects outside the parser (for example, Run, Copy, Swap, or Fetch commands) prior to authentication and any such command MUST Abort. The Shared sequence MUST be executed again, in its entirety, after authenticity validation.</t>

<t>A Recipient MAY rely on network infrastructure to filter inapplicable manifests.</t>

</section>
</section>
<section anchor="interpreter-fundamental-properties"><name>Interpreter Fundamental Properties</name>

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a Trusted Invocation MUST either result in an error, or an invoked image.</t>
  <t>Executing the same manifest on multiple Recipients MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

<section anchor="resilience-to-disruption"><name>Resilience to Disruption</name>

<t>As required in Section 3 of RFC9019 and as an extension of design goal 1, devices must remain operable after a disruption, such as a power failure or network interruption, interrupts the update process.</t>

<t>The manifest processor must be resilient to these faults. In order to enable this resilience, systems implementing the manifest processor MUST make the following guarantees:</t>

<t>Either:
1. A fallback/recovery image is provided so that a disrupted system can apply the SUIT Manifest again.
2. Manifests are constructed so that repeated partial invocations of any manifest sequence always results in a correct system configuration.
3. A journal of manifest operations is stored in nonvolatile memory so that a repeated invocation does not alter nonvolatile memory up until the point of the previous failure. The journal enables the parser to recreate the processor state just prior to the disruption. This journal can be, for example, a SUIT Report. This report can be used to resume processing of the manifest from the point of failure.</t>

<t>AND</t>

<t><list style="numbers">
  <t>Where a command is not repeatable because of the way in which it alters system state (e.g. swapping images or in-place delta) it MUST be resumable or revertible. This applies to commands that modify at least one source component as well as the destination component.</t>
</list></t>

</section>
</section>
<section anchor="command-behavior"><name>Abstract Machine Description</name>

<t>The heart of the manifest is the list of commands, which are processed by a Manifest Processor--a form of interpreter. This Manifest Processor can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>Conditions MUST NOT have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag (<xref target="suit-parameter-soft-failure"/>) is set when a Condition reports failure.</t>

<t>Directives MAY have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter MUST Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>To simplify the logic describing the command semantics, the object "current" is used. It represents the component identified by the Component Index:</t>

<figure><artwork><![CDATA[
current := components\[component-index\]
]]></artwork></figure>

<t>As a result, Set Component Index is described as current := components[arg].</t>

<t>The following table describes the behavior of each command. "params" represents the parameters for the current component. Most commands operate on a component.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Check Content</c>
      <c>assert(binary-match(current, current.params[content]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for-each k,v in arg</c>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in params for-each k,v in arg</c>
      <c>Invoke</c>
      <c>invoke(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Write</c>
      <c>store(current, current.params[content])</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Slot</c>
      <c>assert(current.slot-index == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>try-each-done if exec(seq) is not error for-each seq in arg</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Invoke with Arguments</c>
      <c>invoke(current, arg)</c>
</texttable>

</section>
<section anchor="index-true"><name>Special Cases of Component Index</name>

<t>Component Index can take on one of three types:</t>

<t><list style="numbers">
  <t>Integer</t>
  <t>Array of integers</t>
  <t>True</t>
</list></t>

<t>Integers MUST always be supported by Set Component Index. Arrays of integers MUST be supported by Set Component Index if the Recipient supports 3 or more components. True MUST be supported by Set Component Index if the Recipient supports 2 or more components. Each of these operates on the list of components declared in the manifest.</t>

<t>Integer indices are the default case as described in the previous section. An array of integers represents a list of the components (Set Component Index) to which each subsequent command applies. The value True replaces the list of component indices with the full list of components, as defined in the manifest.</t>

<t>When a command is executed, it either 1. operates on the component identified by the component index if that index is an integer, or 2. it operates on each component identified by an array of indicies, or 3. it operates on every component if the index is the boolean True. This is described by the following pseudocode:</t>

<figure><artwork><![CDATA[
if component-index is true:
    current-list = components
else if component-index is array:
    current-list = [ components[idx] for idx in component-index ]
else:
    current-list = [ components[component-index] ]
for current in current-list:
    cmd(current)
]]></artwork></figure>

<t>Try Each and Run Sequence are affected in the same way as other commands: they are invoked once for each possible Component. This means that the sequences that are arguments to Try Each and Run Sequence are NOT invoked with Component Index = True, nor are they invoked with array indices. They are only invoked with integer indices. The interpreter loops over the whole sequence, setting the Component Index to each index in turn.</t>

</section>
<section anchor="serial-processing"><name>Serialized Processing Interpreter</name>

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor MAY handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

<t>When a serialized Manifest Processor encounters a component index of True, it does not ignore any commands. It applies them to the current component on each iteration.</t>

</section>
<section anchor="parallel-processing"><name>Parallel Processing Interpreter</name>

<t>Advanced Recipients MAY make use of the Strict Order parameter and enable parallel processing of some Command Sequences, or it may reorder some Command Sequences. To perform parallel processing, once the Strict Order parameter is set to False, the Recipient may issue each or every command concurrently until the Strict Order parameter is returned to True or the Command Sequence ends. Then, it waits for all issued commands to complete before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the Recipient consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>When the manifest processor encounters any of these scenarios the parallel processing MUST halt until all issued commands have completed:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, a manifest author may collect sequences of commands in a Run Sequence command. Then, each of these sequences MAY be run in parallel. There are several invocation options for Run Sequence:</t>

<t><list style="symbols">
  <t>Component Index is a positive integer, Strict Order is False: Strict Order is set to True before the sequence argument is run. The sequence argument MUST begin with set-component-index.</t>
  <t>Component Index is true or an array of positive integers, Strict Order is False: The sequence argument is run once for each component (or each component in the array); the manifest processor presets the component index and Strict Order = True before each iteration of the sequence argument.</t>
  <t>Component Index is a positive integer, Strict Order is True: No special considerations</t>
  <t>Component Index is True or an array of positive integers, Strict Order is True: The sequence argument is run once for each component (or each component in the array); the manifest processor presets the component index before each iteration of the sequence argument.</t>
</list></t>

<t>These rules isolate each sequence from each other sequence, ensuring that they operate as expected. When Strict Order = False, any further Set Component Index directives in the Run Sequence command sequence argument MUST cause an Abort. This allows the interpreter that issues Run Sequence commands to check that the first element is correct, then issue the sequence to a parallel execution context to handle the remainder of the sequence.</t>

</section>
</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC8152"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>The author MUST ensure that all parameters consumed by a command are set prior to invoking that command. Where Component Index = True, this means that the parameters consumed by each command MUST have been set for each Component.</t>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<t>NOTE: On systems that support only a single component, Set Component Index has no effect and can be omitted.</t>

<t>NOTE: <strong>A digest MUST always be set using Override Parameters.</strong></t>

<section anchor="template-compatibility-check"><name>Compatibility Check Template</name>

<t>The goal of the compatibility check template ensure that Recipients only install compatible images.</t>

<t>In this template all information is contained in the shared sequence and the following sequence of commands is used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="uuid-identifiers"/>)</t>
  <t>Check Class Identifier condition (see <xref target="uuid-identifiers"/>)</t>
</list></t>

</section>
<section anchor="template-secure-boot"><name>Trusted Invocation Template</name>

<t>The goal of the Trusted Invocation template is to ensure that only authorized code is invoked; such as in Secure Boot or when a Trusted Application is loaded into a TEE.</t>

<t>The following commands are placed into the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>The system validation sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>Then, the run sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Invoke directive (see <xref target="suit-directive-invoke"/>)</t>
</list></t>

</section>
<section anchor="firmware-download-template"><name>Component Download Template</name>

<t>The goal of the Component Download template is to acquire and store an image.</t>

<t>The following commands are placed into the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI (see <xref target="suit-parameter-uri"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-install"><name>Install Template</name>

<t>The goal of the Install template is to use an image already stored in an identified component to copy into a second component.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: the Component Download operations are moved from the Payload Install sequence to the Payload Fetch sequence.</t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="suit-parameter-source-component"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-integrated-payload"><name>Integrated Payload Template</name>

<t>The goal of the Integrated Payload template is to install a payload that is included in the manifest envelope. It is identical to the Component Download template (<xref target="firmware-download-template"/>).</t>

<t>An implementer MAY choose to place a payload in the envelope of a manifest. The payload envelope key MUST be a string. The payload MUST be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way MAY be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4.</t>

<t>A distributor MAY choose to pre-fetch a payload and add it to the manifest envelope, using the URI as the key.</t>

</section>
<section anchor="template-load-ext"><name>Load from Nonvolatile Storage Template</name>

<t>The goal of the Load from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="a-b-template"><name>A/B Image Template</name>

<t>The goal of the A/B Image Template is to acquire, validate, and invoke one of two images, based on a test.</t>

<t>The following commands are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following commands are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

<t>If Trusted Invocation (<xref target="template-secure-boot"/>) is used, only the run sequence is added to this template, since the shared sequence is populated by this template:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
    </list></t>
  <t>Invoke</t>
</list></t>

<t>NOTE: Any test can be used to select between images, Check Slot Condition is used in this template because it is a typical test for execute-in-place devices.</t>

</section>
</section>
<section anchor="metadata-structure"><name>Metadata Structure</name>

<t>The metadata for SUIT updates is composed of several primary constituent parts: the Envelope, Authentication Information, Manifest, and Severable Elements.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding-considerations"><name>Encoding Considerations</name>

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialized variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific values, as described in <xref target="iana"/>.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

<t>All CBOR maps in the Manifest and manifest envelope MUST be encoded with the canonical CBOR ordering as defined in <xref target="RFC8949"/>.</t>

</section>
<section anchor="envelope"><name>Envelope</name>

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="authentication-info"><name>Authenticated Manifests</name>

<t>The suit-authentication-wrapper contains a SUIT Digest Container (see <xref target="SUIT_Digest"/>) and one or more SUIT Authentication Blocks. The SUIT_Digest carries the result of computing the indicated hash algorithm over the suit-manifest element. A signing application MUST verify the suit-manifest element against the SUIT_Digest prior to signing. A SUIT Authentication Block is implemented as COSE_Mac_Tagged, COSE_Mac0_Tagged, COSE_Sign_Tagged or COSE_Sign1_Tagged structures with detached payloads, as described in RFC 8152 <xref target="RFC8152"/>.</t>

<t>For COSE_Sign and COSE_Sign1 a special signature structure (called Sig_structure) has to be created onto which the selected digital signature algorithm is applied to, see Section 4.4 of <xref target="RFC8152"/> for details. This specification requires Sig_structure to be populated as follows:
* The external_aad field MUST be set to a zero-length binary string (i.e. there is no external additional authenticated data).
* The payload field contains the SUIT_Digest wrapped in a bstr, as per the requirements in Section 4.4 of RFC 8152.
All other fields in the Sig_structure are populated as described in Section 4.4 of <xref target="RFC8152"/>.</t>

<t>Likewise, Section 6.3 of <xref target="RFC8152"/> describes the details for computing a MAC and the fields of the MAC_structure need to be populated. The rules for external_aad and the payload fields described in the paragraph above also apply to this structure.</t>

<t>The suit-authentication-wrapper MUST come before the suit-manifest element, regardless of canonical encoding of CBOR.</t>

<t>A SUIT_Envelope that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be a list containing only the SUIT_Digest.</t>

<t>The algorithms used in SUIT_Authentication are defined by the profiles declared in <xref target="I-D.moran-suit-mti"/>.</t>

</section>
<section anchor="manifest-structure"><name>Manifest</name>

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
</list></t>

<t>The Text section, or any Command Sequence of the Update Procedure (Image Fetch, Image Installation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable element. Severable elements are RECOMMENDED to implement. In particular, the human-readable text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version"><name>suit-manifest-version</name>

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED to implement.</t>

</section>
<section anchor="manifest-seqnr"><name>suit-manifest-sequence-number</name>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. Each Recipient MUST reject any manifest that has a sequence number lower than its current sequence number. For convenience, an implementer MAY use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED to implement.</t>

</section>
<section anchor="manifest-reference-uri"><name>suit-reference-uri</name>

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.</t>

</section>
<section anchor="manifest-digest-text"><name>suit-text</name>

<t>suit-text SHOULD be a severable element. suit-text is a map containing two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text</t>
  <t>SUIT_Component_Identifier =&gt; map</t>
</list></t>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text MUST also be present in suit-common (<xref target="manifest-common"/>).</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The YAML (<xref target="YAML"/>)-formatted document that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A free text representation of the component version</c>
</texttable>

<t>suit-text is OPTIONAL to implement.</t>

</section>
<section anchor="manifest-common"><name>suit-common</name>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-components, and suit-shared-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is REQUIRED to implement.</t>

<t>suit-shared-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-shared-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-shared-sequence is RECOMMENDED to implement. It is REQUIRED if the optimizations described in <xref target="minimal-sigs"/> will be used. Whenever a parameter or Try Each command is required by more than one Command Sequence, placing that parameter or command in suit-shared-sequence results in a smaller encoding.</t>

<section anchor="suit-component-identifier"><name>SUIT_Component_Identifier</name>

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>A Component Identifier can be trivial, such as the simple array [h'00']. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path "/usr/bin/env" would encode to ['usr','bin','env'].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands"><name>SUIT_Command_Sequence</name>

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL to implement.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation. suit-validate is REQUIRED to implement.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL to implement.</t>
  <t>Invoke or Boot: suit-invoke is a SUIT_Command_Sequence to execute in order to invoke an image. suit-invoke typically contains a single instruction: the "invoke" directive, but may also contain an image condition. suit-invoke is OPTIONAL to implement.</t>
</list></t>

<t>Goals 1,2 form the Update Procedure. Goals 4,5,6 form the Invocation Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true and any failure is treated as a failure of the update/load/invocation</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>Each condition is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>A <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided. This index is a numeric index into the Component Identifier table defined at the beginning of the manifest.</t>

<t>To facilitate optional conditions, a special directive, suit-directive-try-each (<xref target="suit-directive-try-each"/>), is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/invocation, but a parameter is provided to override this behavior. See suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>).</t>

</section>
<section anchor="reporting-policy"><name>Reporting Policy</name>

<t>To facilitate construction of Reports that describe the success or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>At the completion of each command, a Manifest Processor MAY forward information about the command to a Reporting Engine, which is responsible for reporting boot or update status to a third party. The Reporting Engine is entirely implementation-defined, the reporting policy simply facilitates the Reporting Engine's interface to the SUIT Manifest Processor.</t>

<t>The information elements provided to the Reporting Engine are:</t>

<t><list style="symbols">
  <t>The reporting policy</t>
  <t>The result of the command</t>
  <t>The values of parameters consumed by the command</t>
  <t>The system information consumed by the command</t>
</list></t>

<t>Together, these elements are called a Record. A group of Records is a Report.</t>

<t>If the component index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine MUST receive one Record for each Component, in the order expressed in the Components list or the component index array.</t>

<t>This specification does not define a particular format of Records or Reports. This specification only defines hints to the Reporting Engine for which Records it should aggregate into the Report. The Reporting Engine MAY choose to ignore these hints and apply its own policy instead.</t>

<t>When used in a Invocation Procedure, the report MAY form the basis of an attestation report. When used in an Update Process, the report MAY form the basis for one or more log entries.</t>

</section>
<section anchor="secparameters"><name>SUIT_Parameters</name>

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reuse of parameters between commands, thus reducing manifest size.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Content</c>
      <c>suit-parameter-content</c>
      <c><xref target="suit-parameter-content"/></c>
      <c>Component Slot</c>
      <c>suit-parameter-component-slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Invoke Args</c>
      <c>suit-parameter-invoke-args</c>
      <c><xref target="suit-parameter-invoke-args"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately.</t>

<section anchor="cbor-pen-uuid-namespace-identifier"><name>CBOR PEN UUID Namespace Identifier</name>

<t>The CBOR PEN UUID Namespace Identifier is constructed as follows:</t>

<t>It uses the OID Namespace as a starting point, then uses the CBOR absolute OID encoding for the IANA PEN OID (1.3.6.1.4.1):</t>

<figure><artwork><![CDATA[
D8 6F                # tag(111)
   45                # bytes(5)
# Absolute OID encoding of IANA Private Enterprise Number:
#    1.3. 6. 1. 4. 1
      2B 06 01 04 01 # X.690 Clause 8.19
]]></artwork></figure>

<t>Computing a type 5 UUID from these produces:</t>

<figure><artwork><![CDATA[
NAMESPACE_CBOR_PEN = UUID5(NAMESPACE_OID, h'D86F452B06010401')
NAMESPACE_CBOR_PEN = 47fbdabb-f2e4-55f0-bb39-3620c2f6df4e
]]></artwork></figure>

</section>
<section anchor="uuid-identifiers"><name>Constructing UUIDs</name>

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient MAY match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They MUST NOT be used as assertions of identity. They are evaluated by identifier conditions (<xref target="identifier-conditions"/>).</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module's firmware has a proprietary update mechanism and doesn't support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:</t>

<figure><artwork><![CDATA[
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)
]]></artwork></figure>

<t>If the Vendor ID is a UUID, the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(Vendor ID, Class-Specific-Information)
]]></artwork></figure>

<t>If the Vendor ID is a CBOR PEN (see <xref target="suit-parameter-vendor-identifier"/>), the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(
    UUID5(NAMESPACE_CBOR_PEN, CBOR_PEN),
    Class-Specific-Information)
]]></artwork></figure>

<t>Class-specific-information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier"><name>suit-parameter-vendor-identifier</name>

<t>suit-parameter-vendor-identifier may be presented in one of two ways:</t>

<t><list style="symbols">
  <t>A Private Enterprise Number</t>
  <t>A byte string containing a UUID (<xref target="RFC4122"/>)</t>
</list></t>

<t>Private Enterprise Numbers are encoded as a relative OID, according to the definition in <xref target="I-D.ietf-cbor-tags-oid"/>. All PENs are relative to the IANA PEN: 1.3.6.1.4.1.</t>

</section>
<section anchor="suit-parameter-class-identifier"><name>suit-parameter-class-identifier</name>

<t>A RFC 4122 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier"><name>suit-parameter-device-identifier</name>

<t>A RFC 4122 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest"><name>suit-parameter-image-digest</name>

<t>A fingerprint computed over the component itself, encoded in the SUIT_Digest <xref target="SUIT_Digest"/> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size"><name>suit-parameter-image-size</name>

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-component-slot"><name>suit-parameter-component-slot</name>

<t>This parameter sets the slot index of a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its index into the component's storage area. This slot MUST be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-content"><name>suit-parameter-content</name>

<t>A block of raw data for use with <xref target="suit-directive-write"/>. It contains a byte string of data to be written to a specified component ID in the same way as a fetch or a copy.</t>

<t>If data is encoded this way, it should be small. Large payloads written via this method will prevent the manifest from being held in memory during validation. Typical applications include small configuration parameters.</t>

<t>If suit-parameter-content is instantiated in a severable command sequence, then this becomes functionally very similar to an integrated payload, which may be a better choice.</t>

</section>
<section anchor="suit-parameter-uri"><name>suit-parameter-uri</name>

<t>A URI Reference (<xref target="RFC3986"/>) from which to fetch a resource, encoded as a text string. CBOR Tag 32 is not used because the meaning of the text string is unambiguous in this context.</t>

</section>
<section anchor="suit-parameter-source-component"><name>suit-parameter-source-component</name>

<t>This parameter sets the source component to be used with either suit-directive-copy (<xref target="suit-directive-copy"/>) or with suit-directive-swap (<xref target="suit-directive-swap"/>). The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-invoke-args"><name>suit-parameter-invoke-args</name>

<t>This parameter contains an encoded set of arguments for suit-directive-invoke (<xref target="suit-directive-invoke"/>). The arguments MUST be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-fetch-arguments"><name>suit-parameter-fetch-arguments</name>

<t>An implementation-defined set of arguments to suit-directive-fetch (<xref target="suit-directive-fetch"/>). Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order"><name>suit-parameter-strict-order</name>

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure"><name>suit-parameter-soft-failure</name>

<t>When executing a command sequence inside suit-directive-try-each (<xref target="suit-directive-try-each"/>) or suit-directive-run-sequence (<xref target="suit-directive-run-sequence"/>) and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates. It MUST NOT be set outside of suit-directive-try-each or suit-directive-run-sequence.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom"><name>suit-parameter-custom</name>

<t>This parameter is an extension point for any proprietary, application specific conditions and directives. It MUST NOT be used in the shared sequence. This effectively scopes each custom command to a particular Vendor Identifier/Class Identifier pair.</t>

</section>
</section>
<section anchor="suitcondition"><name>SUIT_Condition</name>

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Check Content</c>
      <c>suit-condition-check-content</c>
      <c><xref target="suit-condition-check-content"/></c>
      <c>Component Slot</c>
      <c>suit-condition-component-slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>Abort</c>
      <c>suit-condition-abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>Custom Condition</c>
      <c>suit-condition-custom</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition MUST report a result code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. A subsequent command or command sequence MAY continue executing if suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is set. If a condition requires additional information, this MUST be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it MUST report a failure. If a Recipient encounters an unknown condition, it MUST report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary definition by the author of a manifest processor. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions"><name>suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier</name>

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing Recipient MUST match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. Each component MAY match more than one identifier. Care is needed to ensure that manifests correctly identify their targets using these conditions. Using only a generic class ID for a device-specific firmware could result in matching devices that are not compatible.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers MUST be known to the Manifest Processor in order to evaluate compatibility.</t>

</section>
<section anchor="suit-condition-image-match"><name>suit-condition-image-match</name>

<t>Verify that the current component matches the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>) for the current component. The digest is verified against the digest specified in the Component's parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-check-content"><name>suit-condition-check-content</name>

<t>This directive compares the specified component identifier to the data indicated by suit-parameter-content. This functions similarly to suit-condition-image-match, however it does a direct, byte-by-byte comparison rather than a digest-based comparison. Because it is possible that an early stop to check-content could reveal information through timing, suit-condition-check-content MUST be constant time: no early exits. This MAY be implemented as follows:</t>

<t><spanx style="verb">
// content &amp; component must be same length
// returns 0 for match
bool check_content(content, component, length) {
    int residual = 0
    for (i = 0; i &lt; length; i++) {
        residual |= content[i] ^ component[i];
    }
    return residual;
}
</spanx></t>

</section>
<section anchor="suit-condition-component-slot"><name>suit-condition-component-slot</name>

<t>Verify that the slot index of the current component matches the slot index set in suit-parameter-component-slot (<xref target="suit-parameter-component-slot"/>). This condition allows a manifest to select between several images to match a target slot.</t>

</section>
<section anchor="suit-condition-abort"><name>suit-condition-abort</name>

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each (<xref target="suit-directive-try-each"/>).</t>

</section>
<section anchor="SUIT_Condition_Custom"><name>suit-condition-custom</name>

<t>suit-condition-custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="suitdirective"><name>SUIT_Directive</name>
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Write</c>
      <c>suit-directive-write</c>
      <c><xref target="suit-directive-write"/></c>
      <c>Invoke</c>
      <c>suit-directive-invoke</c>
      <c><xref target="suit-directive-invoke"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it MUST report a result code. If the Directive reports failure, then the current Command Sequence MUST be terminated.</t>

<section anchor="suit-directive-set-component-index"><name>suit-directive-set-component-index</name>

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be one of three types:</t>

<t><list style="numbers">
  <t>An unsigned integer (REQUIRED to implement in parser)</t>
  <t>A boolean (REQUIRED to implement in parser ONLY IF 2 or more components supported)</t>
  <t>An array of unsigned integers (REQUIRED to implement in parser ONLY IF 3 or more components supported)</t>
</list></t>

<t>If the following commands apply to ONE component, an unsigned integer index into the component list is used. If the following commands apply to ALL components, then the boolean value "True" is used instead of an index. If the following commands apply to more than one, but not all components, then an array of unsigned integer indices into the component list is used.
See <xref target="index-true"/> for more details.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-try-each"><name>suit-directive-try-each</name>

<t>This command runs several SUIT_Command_Sequence instances, one after another, in a strict order, until one succeeds or the list is exhausted. Use this command to implement a "try/catch-try/catch" sequence. Manifest processors MAY implement this command.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters"><name>suit-directive-override-parameters</name>

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch"><name>suit-directive-fetch</name>

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more payloads. suit-directive-fetch retrieves each component listed in component-index. If component-index is True, instead of an integer, then all current manifest components are fetched. If component-index is an array, then all listed components are fetched.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

</section>
<section anchor="suit-directive-copy"><name>suit-directive-copy</name>

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. As described in <xref target="index-true"/> component index may be a single integer, a list of integers, or True. suit-directive-copy retrieves each component specified by the current component-index, respectively.</t>

<t>suit-directive-copy reads its source from suit-parameter-source-component (<xref target="suit-parameter-source-component"/>).</t>

<t>If either the source component parameter or the source component itself is absent, this command fails.</t>

</section>
<section anchor="suit-directive-write"><name>suit-directive-write</name>

<t>This directive writes a small block of data, specified in <xref target="suit-parameter-content"/>, to a component.</t>

<t>Encoding Considerations: Careful consideration must be taken to determine whether it is more appropriate to use an integrated payload or to use <xref target="suit-parameter-content"/> for a particular application. While the encoding of suit-directive-write is smaller than an integrated payload, a large suit-parameter-content payload may prevent the manifest processor from holding the command sequence in memory while executing it.</t>

</section>
<section anchor="suit-directive-invoke"><name>suit-directive-invoke</name>

<t>suit-directive-invoke directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-invoke through suit-parameter-invoke-arguments (<xref target="suit-parameter-invoke-args"/>) and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-run-sequence"><name>suit-directive-run-sequence</name>

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr. This also allows a sequence of instructions to be iterated over, once for each current component index, when component-index = true or component-index = list. See <xref target="index-true"/>.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap"><name>suit-directive-swap</name>

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. As with suit-directive-copy, if the source component is missing, this command fails.</t>

<t>If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they MUST be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="integrity-checks"><name>Integrity Check Values</name>

<t>When the Text section or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope. The keys for the envelope elements have the same values as the keys for the manifest elements.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="severable-fields"><name>Severable Elements</name>

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or "Severed" without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD NOT be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists"><name>Access Control Lists</name>

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or Component Identifier prefixes to the listed identities or identity groups. Any identity can verify an image digest, but fetching into or fetching from a Component Identifier requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the Component Identifier or Component Identifier prefix that an identity can use, and also lists the commands and parameters that the identity can use in combination with that Component Identifier.</t>

</section>
<section anchor="SUIT_Digest"><name>SUIT Digest Container</name>

<t>The SUIT digest is a CBOR List containing two elements: an algorithm identifier and a bstr containing the bytes of the digest. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The values of the algorithm identifier are defined by <xref target="I-D.ietf-cose-hash-algs"/>. The following algorithms MUST be implemented by all Manifest Processors:</t>

<t><list style="symbols">
  <t>SHA-256 (-16)</t>
</list></t>

<t>The following algorithms MAY be implemented in a Manifest Processor:</t>

<t><list style="symbols">
  <t>SHAKE128 (-18)</t>
  <t>SHA-384 (-43)</t>
  <t>SHA-512 (-44)</t>
  <t>SHAKE256 (-45)</t>
</list></t>

</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate CBOR tag 107 (suggested) in the "CBOR Tags" registry for the SUIT Envelope.</t>
  <t>allocate CBOR tag 1070 (suggested) in the "CBOR Tags" registry for the SUIT Manifest.</t>
  <t>allocate media type application/suit-envelope in the "Media Types" registry, see below.</t>
  <t>setup several registries as described below.</t>
</list></t>

<t>IANA is requested to create a new category for Software Update for the Internet of Things (SUIT) 
and a page within this category for SUIT manifests.</t>

<t>IANA is also requested to create several registries defined in the subsections below.</t>

<t>For each registry, values 0-255 are Standards Action and 256 or greater are Expert Review. Negative values -255 to 0 are Standards Action, and -256 and lower are Private Use.</t>

<t>New entries to those registries need to provide a label, a name and a reference to a specification that describes the functionality. More guidance on the expert review can be found below.</t>

<section anchor="suit-envelope-elements"><name>SUIT Envelope Elements</name>

<t>IANA is requested to create a new registry for SUIT envelope elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>2</c>
      <c>Authentication Wrapper</c>
      <c><xref target="authentication-info"/></c>
      <c>3</c>
      <c>Manifest</c>
      <c><xref target="manifest-structure"/></c>
      <c>16</c>
      <c>Payload Fetch</c>
      <c><xref target="manifest-commands"/></c>
      <c>17</c>
      <c>Payload Installation</c>
      <c><xref target="manifest-commands"/></c>
      <c>23</c>
      <c>Text Description</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-manifest-elements"><name>SUIT Manifest Elements</name>

<t>IANA is requested to create a new registry for SUIT manifest elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Encoding Version</c>
      <c><xref target="manifest-version"/></c>
      <c>2</c>
      <c>Sequence Number</c>
      <c><xref target="manifest-seqnr"/></c>
      <c>3</c>
      <c>Common Data</c>
      <c><xref target="manifest-common"/></c>
      <c>4</c>
      <c>Reference URI</c>
      <c><xref target="manifest-reference-uri"/></c>
      <c>7</c>
      <c>Image Validation</c>
      <c><xref target="manifest-commands"/></c>
      <c>8</c>
      <c>Image Loading</c>
      <c><xref target="manifest-commands"/></c>
      <c>9</c>
      <c>Image Invocation</c>
      <c><xref target="manifest-commands"/></c>
      <c>16</c>
      <c>Payload Fetch</c>
      <c><xref target="manifest-commands"/></c>
      <c>17</c>
      <c>Payload Installation</c>
      <c><xref target="manifest-commands"/></c>
      <c>23</c>
      <c>Text Description</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-common-elements"><name>SUIT Common Elements</name>

<t>IANA is requested to create a new registry for SUIT common elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>2</c>
      <c>Component Identifiers</c>
      <c><xref target="manifest-common"/></c>
      <c>4</c>
      <c>Common Command Sequence</c>
      <c><xref target="manifest-common"/></c>
</texttable>

</section>
<section anchor="suit-commands"><name>SUIT Commands</name>

<t>IANA is requested to create a new registry for SUIT commands.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>2</c>
      <c>Class Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>3</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>6</c>
      <c>Check Content</c>
      <c><xref target="suit-condition-check-content"/></c>
      <c>12</c>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>13</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>14</c>
      <c>Abort</c>
      <c>&#160;</c>
      <c>15</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>16</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>17</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>18</c>
      <c>Write Content</c>
      <c><xref target="suit-directive-write"/></c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>21</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>22</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>23</c>
      <c>Invoke</c>
      <c><xref target="suit-directive-invoke"/></c>
      <c>24</c>
      <c>Device Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>25</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>31</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>32</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>33</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

</section>
<section anchor="suit-parameters"><name>SUIT Parameters</name>

<t>IANA is requested to create a new registry for SUIT parameters.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>2</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>3</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>12</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>13</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>14</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>18</c>
      <c>Content</c>
      <c><xref target="suit-parameter-content"/></c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>21</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>22</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>23</c>
      <c>Invoke Args</c>
      <c><xref target="suit-parameter-invoke-args"/></c>
      <c>24</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

</section>
<section anchor="suit-text-values"><name>SUIT Text Values</name>

<t>IANA is requested to create a new registry for SUIT text values.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Manifest Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Update Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Manifest JSON Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Manifest YAML Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-component-text-values"><name> SUIT Component Text Values</name>

<t>IANA is requested to create a new registry for SUIT component text values.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Model Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Vendor Domain</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Model Info</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>5</c>
      <c>Component Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>6</c>
      <c>Component Version</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>7</c>
      <c>Component Version Required</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="expert-review-instructions"><name>Expert Review Instructions</name>

<t>The IANA registries established in this document allow values to be added
based on expert review. This section gives some general guidelines for
what the experts should be looking for, but they are being designated
as experts for a reason, so they should be given substantial
latitude.</t>

<t>Expert reviewers should take into consideration the following points:</t>

<t><list style="symbols">
  <t>Point squatting should be discouraged.  Reviewers are encouraged
   to get sufficient information for registration requests to ensure
   that the usage is not going to duplicate one that is already
   registered, and that the point is likely to be used in
   deployments.  The zones tagged as private use 
   are intended for testing purposes and closed environments; 
   code points in other ranges should not be assigned for testing.</t>
  <t>Specifications are required for the standards track range of point
   assignment.  Specifications should exist for  all other ranges,
   but early assignment before a specification is
   available is considered to be permissible.
   When specifications are not provided, the description provided
   needs to have sufficient information to identify what the point is
   being used for.</t>
  <t>Experts should take into account the expected usage of fields when
   approving point assignment.  The fact that there is a range for
   standards track documents does not mean that a standards track
   document cannot have points assigned outside of that range.  The
   length of the encoded value should be weighed against how many
   code points of that length are left, the size of device it will be
   used on, and the number of code points left that encode to that
   size.</t>
</list></t>

</section>
<section anchor="media-type-registration"><name>Media Type Registration</name>

<t>This section registers the 'application/suit-envelope' media type in the
"Media Types" registry.  This media type are used to indicate that
the content is a SUIT envelope.</t>

<t>```
      Type name: application</t>

<figure><artwork><![CDATA[
  Subtype name: suit-envelope

  Required parameters: N/A

  Optional parameters: N/A

  Encoding considerations: binary

  Security considerations: See the Security Considerations section
  of [[This RFC]].

  Interoperability considerations: N/A

  Published specification: [[This RFC]]

  Applications that use this media type: Primarily used for 
    Firmware and software updates although the content may
    also contain configuration data and other information
    related to software and firmware.

  Fragment identifier considerations: N/A

  Additional information:

  *  Deprecated alias names for this type: N/A

  *  Magic number(s): N/A

  *  File extension(s): cbor

  *  Macintosh file type code(s): N/A

  Person & email address to contact for further information:
  iesg@ietf.org

  Intended usage: COMMON

  Restrictions on usage: N/A

  Author: Brendan Moran, <brendan.moran.ietf@gmail.com>

  Change Controller: IESG

  Provisional registration?  No ```
]]></artwork></figure>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC4122' target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author fullname='P. Leach' initials='P.' surname='Leach'><organization/></author>
<author fullname='M. Mealling' initials='M.' surname='Mealling'><organization/></author>
<author fullname='R. Salz' initials='R.' surname='Salz'><organization/></author>
<date month='July' year='2005'/>
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC3986' target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'><organization/></author>
<author fullname='R. Fielding' initials='R.' surname='Fielding'><organization/></author>
<author fullname='L. Masinter' initials='L.' surname='Masinter'><organization/></author>
<date month='January' year='2005'/>
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference anchor='RFC8949' target='https://www.rfc-editor.org/info/rfc8949'>
<front>
<title>Concise Binary Object Representation (CBOR)</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='P. Hoffman' initials='P.' surname='Hoffman'><organization/></author>
<date month='December' year='2020'/>
<abstract><t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t><t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t></abstract>
</front>
<seriesInfo name='STD' value='94'/>
<seriesInfo name='RFC' value='8949'/>
<seriesInfo name='DOI' value='10.17487/RFC8949'/>
</reference>



<reference anchor='RFC9019' target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>



<reference anchor='RFC9124' target='https://www.rfc-editor.org/info/rfc9124'>
<front>
<title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<date month='January' year='2022'/>
<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t><t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9124'/>
<seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.moran-suit-mti'>
   <front>
      <title>Mandatory-to-Implement Algorithms for Creators and Consumers of Software Update for the Internet of Things manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <date day='27' month='July' year='2022'/>
      <abstract>
	 <t>   This document specifies algorithm profiles for SUIT manifest parsers
   and authors to ensure better interoperability.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-moran-suit-mti-01'/>
   <format target='https://www.ietf.org/archive/id/draft-moran-suit-mti-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-cose-hash-algs'>
   <front>
      <title>CBOR Object Signing and Encryption (COSE): Hash Algorithms</title>
      <author fullname='Jim Schaad' initials='J.' surname='Schaad'>
         <organization>August Cellars</organization>
      </author>
      <date day='14' month='September' year='2020'/>
      <abstract>
	 <t>The CBOR Object Signing and Encryption (COSE) syntax (see RFC 9052) does not define any direct methods for using hash algorithms.  There are, however, circumstances where hash algorithms are used, such as indirect signatures, where the hash of one or more contents are signed, and identification of an X.509 certificate or other object by the use of a fingerprint.  This document defines hash algorithms that are identified by COSE algorithm identifiers.
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cose-hash-algs-09'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cose-hash-algs-09.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-teep-architecture'>
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname='Mingliang Pei' initials='M.' surname='Pei'>
         <organization>Broadcom</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Dave Thaler' initials='D.' surname='Thaler'>
         <organization>Microsoft</organization>
      </author>
      <author fullname='Dave Wheeler' initials='D. M.' surname='Wheeler'>
         <organization>Amazon</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-18'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-teep-architecture-18.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-cbor-tags-oid'>
   <front>
      <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
      <author fullname='Carsten Bormann' initials='C.' surname='Bormann'>
         <organization>Universität Bremen TZI</organization>
      </author>
      <date day='21' month='May' year='2021'/>
      <abstract>
	 <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.

 This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cbor-tags-oid-08'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Encrypted Payloads in SUIT Manifests</title>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Russ Housley' initials='R.' surname='Housley'>
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='David Brown' initials='D.' surname='Brown'>
         <organization>Linaro</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='6' month='October' year='2022'/>
      <abstract>
	 <t>   This document specifies techniques for encrypting software, firmware
   and personalization data by utilizing the IETF SUIT manifest.  Key
   establishment is provided by hybrid public-key encryption (HPKE) and
   AES Key Wrap (AES-KW).  HPKE uses public key cryptography while AES-
   KW uses a pre-shared key-encryption key.  Encryption of the plaintext
   is accomplished with conventional symmetric key cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-08'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-firmware-encryption-08.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-update-management'>
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to IoT
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-update-management-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-update-management-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-trust-domains'>
   <front>
      <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   (as defined in [I-D.ietf-suit-manifest]) for use in deployments with
   multiple trust domains.  A device has more than one trust domain when
   it uses different trust anchors for different purposes or components
   in the context of firmware update.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-trust-domains-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-trust-domains-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-report'>
   <front>
      <title>Secure Reporting of Update Status</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   The Software Update for the Internet of Things (SUIT) manifest
   provides a way for many different update and boot workflows to be
   described by a common format.  However, this does not provide a
   feedback mechanism for developers in the event that an update or boot
   fails.

   This specification describes a lightweight feedback mechanism that
   allows a developer in possession of a manifest to reconstruct the
   decisions made and actions performed by a manifest processor.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-report-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-report-02.txt' type='TXT'/>
</reference>



<reference anchor='RFC7228' target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='M. Ersue' initials='M.' surname='Ersue'><organization/></author>
<author fullname='A. Keranen' initials='A.' surname='Keranen'><organization/></author>
<date month='May' year='2014'/>
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>


<reference anchor="YAML" target="https://yaml.org/">
  <front>
    <title>YAML Ain't Markup Language</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<t>To be valid, the following CDDL MUST have the COSE CDDL appended to it. The COSE CDDL can be obtained by following the directions in <xref target="RFC8152"/>, Section 1.3.</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Envelope_Tagged = #6.107(SUIT_Envelope)
SUIT_Envelope = {
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * SUIT_Integrated_Payload,
  * $$SUIT_Envelope_Extensions,
}

SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]

SUIT_Digest = [
  suit-digest-algorithm-id : suit-cose-hash-algs,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

SUIT_Severable_Manifest_Members = (
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  * $$SUIT_severable-members-extensions,
)

SUIT_Integrated_Payload = (suit-integrated-payload-key => bstr)
suit-integrated-payload-key = tstr

SUIT_Manifest_Tagged = #6.1070(SUIT_Manifest)

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Unseverable_Members,
    SUIT_Severable_Members_Choice,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-invoke => bstr .cbor SUIT_Command_Sequence,
  * $$unseverable-manifest-member-extensions,
)

SUIT_Severable_Members_Choice = (
  ? suit-payload-fetch => SUIT_Digest / 
      bstr .cbor SUIT_Command_Sequence,
  ? suit-install => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
  ? suit-text => SUIT_Digest / bstr .cbor SUIT_Text_Map,
  * $$severable-manifest-members-choice-extensions
)

SUIT_Common = {
    ? suit-components             => SUIT_Components,
    ? suit-shared-sequence        => bstr .cbor SUIT_Shared_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Components           = [ + SUIT_Component_Identifier ]

;REQUIRED to implement:
suit-cose-hash-algs /= cose-alg-sha-256

;OPTIONAL to implement:
suit-cose-hash-algs /= cose-alg-shake128
suit-cose-hash-algs /= cose-alg-sha-384
suit-cose-hash-algs /= cose-alg-sha-512
suit-cose-hash-algs /= cose-alg-shake256

SUIT_Component_Identifier =  [* bstr]

SUIT_Shared_Sequence = [
    + ( SUIT_Condition // SUIT_Shared_Commands )
]

SUIT_Shared_Commands //= (suit-directive-set-component-index,  IndexArg)
SUIT_Shared_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Shared_Sequence)
SUIT_Shared_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument_Shared)
SUIT_Shared_Commands //= (suit-directive-override-parameters,
    {+ $$SUIT_Parameters})

IndexArg /= uint
IndexArg /= true
IndexArg /= [+uint]


SUIT_Directive_Try_Each_Argument_Shared = [
    2* bstr .cbor SUIT_Shared_Sequence,
    ?nil
]

SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-component-slot,    SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-check-content,     SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-abort,             SUIT_Rep_Policy)

SUIT_Directive //= (suit-directive-write,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-component-index,  IndexArg)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-override-parameters,
    {+ $$SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-copy,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-swap,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-invoke,            SUIT_Rep_Policy)

SUIT_Directive_Try_Each_Argument = [
    2* bstr .cbor SUIT_Command_Sequence,
    ?nil
]

SUIT_Rep_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

$$SUIT_Parameters //= (suit-parameter-vendor-identifier =>
    (RFC4122_UUID / cbor-pen))

cbor-pen = #6.112(bstr)

$$SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
$$SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
$$SUIT_Parameters //= (suit-parameter-image-size => uint)
$$SUIT_Parameters //= (suit-parameter-component-slot => uint)

$$SUIT_Parameters //= (suit-parameter-uri => tstr)
$$SUIT_Parameters //= (suit-parameter-source-component => uint)
$$SUIT_Parameters //= (suit-parameter-invoke-args => bstr)

$$SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)

$$SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

$$SUIT_Parameters //= (suit-parameter-content => bstr)
$$SUIT_Parameters //= (suit-parameter-strict-order => bool)
$$SUIT_Parameters //= (suit-parameter-soft-failure => bool)

RFC4122_UUID = bstr .size 16

SUIT_Text_Map = {
    SUIT_Text_Keys,
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    }
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

suit-authentication-wrapper = 2
suit-manifest = 3

;REQUIRED to implement:
cose-alg-sha-256 = -16

;OPTIONAL to implement:
cose-alg-shake128 = -18
cose-alg-sha-384 = -43
cose-alg-sha-512 = -44
cose-alg-shake256 = -45

;Unseverable, recipient-necessary
suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-validate = 7
suit-load = 8
suit-invoke = 9
;Severable, recipient-necessary
suit-payload-fetch = 16
suit-install = 17
;Severable, recipient-unnecessary
suit-text = 23

suit-components = 2
suit-shared-sequence = 4

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-component-slot    = 5
suit-condition-check-content     = 6

suit-condition-abort                    = 14
suit-condition-device-identifier        = 24

suit-directive-set-component-index      = 12
suit-directive-try-each                 = 15
suit-directive-write                    = 18
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-invoke                   = 23

suit-directive-swap                     = 31
suit-directive-run-sequence             = 32

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-component-slot    = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14
suit-parameter-content           = 18

suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-invoke-args       = 23

suit-parameter-device-identifier = 24

suit-parameter-custom = nint

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
]]></sourcecode></figure>

</section>
<section anchor="examples"><name>B. Examples</name>

<t>The following examples demonstrate a small subset of the functionality of the manifest. Even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<t>Note that reporting policies are declared for each non-flow-control command in these examples. The reporting policies used in the examples are described in the following tables.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Label</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Rec-Pass</c>
      <c>suit-send-record-on-failure</c>
      <c>Rec-Fail</c>
      <c>suit-send-sysinfo-success</c>
      <c>Sys-Pass</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Sys-Fail</c>
</texttable>

<texttable>
      <ttcol align='left'>Command</ttcol>
      <ttcol align='left'>Sys-Fail</ttcol>
      <ttcol align='left'>Sys-Pass</ttcol>
      <ttcol align='left'>Rec-Fail</ttcol>
      <ttcol align='left'>Rec-Pass</ttcol>
      <c>suit-condition-vendor-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-class-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-image-match</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-component-slot</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>1</c>
      <c>suit-directive-fetch</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-copy</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-invoke</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
</texttable>

<section anchor="example-0-secure-boot"><name>Example 0: Secure Boot</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
</list></t>

<t>It also serves as the minimum example.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'6658ea560262696dd1f13b782239a064da7c6c5cbaf52fded428a6fc83c7e5af'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'e3505f7ab70bd3a0e04916f37b0d7251aa
6f52ca12c7edaa886a4129a298ca6a1ecc2a57955c6bf4ccb9f01d684d5d1c4774dffb
e508a034431feafa60848a2c'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:0,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-run / 23,2
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  161</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af035871a50101020003585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f0943821702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  237</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af584ad28443a10126a0f65840e3505f
7ab70bd3a0e04916f37b0d7251aa6f52ca12c7edaa886a4129a298ca6a1e
cc2a57955c6bf4ccb9f01d684d5d1c4774dffbe508a034431feafa60848a
2c035871a50101020003585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f0943821702
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload"><name>Example 1: Simultaneous Download and Installation of Payload</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Simultaneous download and installation of payload. No secure boot is present in this example to demonstrate a download-only manifest.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'ef14b7091e8adae8aa3bb6fca1d64fb37e19dcf8b35714cfdddc5968c80ff50e'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'e95d9bb4926c7c82138fc81b968fdc42d9
bc8cfadf9e35dde8cba7bd44b91af0427a13dff4e6bcf5f2d5577f8f3bcaed55983e43
e984d14d6bdb2c762d9378b5'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:1,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  196</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820ef14b7091e8adae8aa3bb6fca1d64fb37e
19dcf8b35714cfdddc5968c80ff50e035894a50101020103585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f1158258614a115781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  272</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820ef14b7091e8adae8aa3bb6fca1d64fb37e
19dcf8b35714cfdddc5968c80ff50e584ad28443a10126a0f65840e95d9b
b4926c7c82138fc81b968fdc42d9bc8cfadf9e35dde8cba7bd44b91af042
7a13dff4e6bcf5f2d5577f8f3bcaed55983e43e984d14d6bdb2c762d9378
b5035894a50101020103585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f1158258614a11578
1b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502
030f
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-secure-boot-severed-fields"><name>Example 2: Simultaneous Download, Installation, Secure Boot, Severed Fields</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>This example also demonstrates severable elements (<xref target="ovr-severable"/>), and text (<xref target="manifest-digest-text"/>).</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'86bbcc8823f3a4441956f02b001302f503487461fb77fab086efe31530881f97'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'3a2d25bdff0d7aaee88549c14f0f1ee881
e3c92d2e51231f3e7bce213adbddefecf8a0ea98859b6d1a69a01c961858e99aacd520
dd59bb0bd8016a66de777b34'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:2,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-run / 23,2
            ] >>,
            / install / 17:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'cfa90c5c58595e7f5119a72f803fd0370b3e6abbec6315cd38f63135281bc498'
            ],
            / text / 23:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'2bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918'
            ],
        } >>,
    })
]]></artwork></figure>

<t>Total size of the Envelope without COSE authentication object or Severable Elements:  235</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f582086bbcc8823f3a4441956f02b001302f503
487461fb77fab086efe31530881f970358bba70101020203585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f094382170211822f5820cfa90c5c58595e7f5119a72f803f
d0370b3e6abbec6315cd38f63135281bc49817822f58202bfc4d0cc6680b
e7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918
]]></artwork></figure>
<t>Total size of the Envelope with COSE authentication object but without Severable Elements:  311</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f582086bbcc8823f3a4441956f02b001302f503
487461fb77fab086efe31530881f97584ad28443a10126a0f658403a2d25
bdff0d7aaee88549c14f0f1ee881e3c92d2e51231f3e7bce213adbddefec
f8a0ea98859b6d1a69a01c961858e99aacd520dd59bb0bd8016a66de777b
340358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f094382170211822f
5820cfa90c5c58595e7f5119a72f803fd0370b3e6abbec6315cd38f63135
281bc49817822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf918
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object and Severable Elements:  894</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba4025873825824822f582086bbcc8823f3a4441956f02b001302f503
487461fb77fab086efe31530881f97584ad28443a10126a0f658403a2d25
bdff0d7aaee88549c14f0f1ee881e3c92d2e51231f3e7bce213adbddefec
f8a0ea98859b6d1a69a01c961858e99aacd520dd59bb0bd8016a66de777b
340358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f094382170211822f
5820cfa90c5c58595e7f5119a72f803fd0370b3e6abbec6315cd38f63135
281bc49817822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf91811583c8614a1157832687474703a2f2f657861
6d706c652e636f6d2f766572792f6c6f6e672f706174682f746f2f66696c
652f66696c652e62696e1502030f17590204a20179019d2323204578616d
706c6520323a2053696d756c74616e656f757320446f776e6c6f61642c20
496e7374616c6c6174696f6e2c2053656375726520426f6f742c20536576
65726564204669656c64730a0a2020202054686973206578616d706c6520
636f766572732074686520666f6c6c6f77696e672074656d706c61746573
3a0a202020200a202020202a20436f6d7061746962696c69747920436865
636b20287b7b74656d706c6174652d636f6d7061746962696c6974792d63
6865636b7d7d290a202020202a2053656375726520426f6f7420287b7b74
656d706c6174652d7365637572652d626f6f747d7d290a202020202a2046
69726d7761726520446f776e6c6f616420287b7b6669726d776172652d64
6f776e6c6f61642d74656d706c6174657d7d290a202020200a2020202054
686973206578616d706c6520616c736f2064656d6f6e7374726174657320
736576657261626c6520656c656d656e747320287b7b6f76722d73657665
7261626c657d7d292c20616e64207465787420287b7b6d616e6966657374
2d6469676573742d746578747d7d292e814100a2036761726d2e636f6d05
78525468697320636f6d706f6e656e7420697320612064656d6f6e737472
6174696f6e2e205468652064696765737420697320612073616d706c6520
7061747465726e2c206e6f742061207265616c206f6e652e
]]></artwork></figure>

</section>
<section anchor="example-3-ab-images"><name>Example 3: A/B images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>A/B Image Template (<xref target="a-b-template"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'b3e6a52776bf3ed218feba031c609c98260e1a52fc1f019683edb6d1c5c4a379'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'3a4c404585cf111bb5556a0ce269aa56e7
56d998f09a1179640933c44230f6a7d2ea2331f9d904d84f39496721cf2f76ee85f06b
b71ab2179c833292f0d227bb'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:3,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    } ,
                    / directive-try-each / 15,[
                        << [
                            / directive-override-parameters / 20,{
                                / slot / 5:0,
                            } ,
                            / condition-component-slot / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<< [
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                                ] >>,
                                / image-size / 14:34768,
                            }
                        ] >> ,
                        << [
                            / directive-override-parameters / 20,{
                                / slot / 5:1,
                            } ,
                            / condition-component-slot / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<< [
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                                ] >>,
                                / image-size / 14:76834,
                            }
                        ] >>
                    ] ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-try-each / 15,[
                    << [
                        / directive-override-parameters / 20,{
                            / slot / 5:0,
                        } ,
                        / condition-component-slot / 5,5 ,
                        / directive-override-parameters / 20,{
                            / uri / 21:'http://example.com/file1.bin',
                        }
                    ] >> ,
                    << [
                        / directive-override-parameters / 20,{
                            / slot / 5:1,
                        } ,
                        / condition-component-slot / 5,5 ,
                        / directive-override-parameters / 20,{
                            / uri / 21:'http://example.com/file2.bin',
                        }
                    ] >>
                ] ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  320</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820b3e6a52776bf3ed218feba031c609c9826
0e1a52fc1f019683edb6d1c5c4a3790359010fa5010102030358a4a20281
81410004589b8814a20150fa6b4a53d5ad5fdfbe9de663e4d41ffe025014
92af1425695e48bf429b2d51f2ab450f8258348614a10500050514a20358
24822f582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d058368614a10501050514a2035824822f582001
23456789abcdeffedcba987654321000112233445566778899aabbccddee
ff0e1a00012c22010f020f074382030f11585b860f8258288614a1050005
0514a115781c687474703a2f2f6578616d706c652e636f6d2f66696c6531
2e62696e58288614a10501050514a115781c687474703a2f2f6578616d70
6c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  396</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820b3e6a52776bf3ed218feba031c609c9826
0e1a52fc1f019683edb6d1c5c4a379584ad28443a10126a0f658403a4c40
4585cf111bb5556a0ce269aa56e756d998f09a1179640933c44230f6a7d2
ea2331f9d904d84f39496721cf2f76ee85f06bb71ab2179c833292f0d227
bb0359010fa5010102030358a4a2028181410004589b8814a20150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450f8258348614a10500050514a2035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0583686
14a10501050514a2035824822f58200123456789abcdeffedcba98765432
1000112233445566778899aabbccddeeff0e1a00012c22010f020f074382
030f11585b860f8258288614a10500050514a115781c687474703a2f2f65
78616d706c652e636f6d2f66696c65312e62696e58288614a10501050514
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

</section>
<section anchor="example-4-load-from-external-storage"><name>Example 4: Load from External Storage</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>Install (<xref target="template-install"/>)</t>
  <t>Load (<xref target="template-load-ext"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'838eb848698c9d9dd29b5930102ea1f29743857d975f52ed4d19589b821e82cf'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'8ea1abc44569f3acea130558a1b1f6a23b
f509cc1f3ac7afe5a3d9bfbdf752b0fbdddb12a64fa0f83faa2d1580d35458cf17dbc4
0c21d6601436e4a39d261c02'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:4,
            / common / 3:<< {
                / components / 2:[
                    [h'00'] ,
                    [h'02'] ,
                    [h'01']
                ],
                / shared-sequence / 4:<< [
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15
            ] >>,
            / load / 8:<< [
                / directive-set-component-index / 12,2 ,
                / directive-override-parameters / 20,{
                    / image-digest / 3:<< [
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ] >>,
                    / image-size / 14:76834,
                    / source-component / 22:0 / [h'00'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-set-component-index / 12,2 ,
                / directive-run / 23,2
            ] >>,
            / payload-fetch / 16:<< [
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / image-digest / 3:<< [
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ] >>,
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / source-component / 22:1 / [h'02'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  327</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820838eb848698c9d9dd29b5930102ea1f297
43857d975f52ed4d19589b821e82cf03590116a801010204035867a20283
814100814102814101045858880c0014a40150fa6b4a53d5ad5fdfbe9de6
63e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820
00112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100e1987d0010f020f0745840c00030f085838880c0214a3035824822f
58200123456789abcdeffedcba987654321000112233445566778899aabb
ccddeeff0e1a00012c2216001602030f0945840c02170210584e880c0114
a2035824822f582000112233445566778899aabbccddeeff0123456789ab
cdeffedcba987654321015781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e1502030f114b880c0014a116011602030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  403</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820838eb848698c9d9dd29b5930102ea1f297
43857d975f52ed4d19589b821e82cf584ad28443a10126a0f658408ea1ab
c44569f3acea130558a1b1f6a23bf509cc1f3ac7afe5a3d9bfbdf752b0fb
dddb12a64fa0f83faa2d1580d35458cf17dbc40c21d6601436e4a39d261c
0203590116a801010204035867a20283814100814102814101045858880c
0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e
48bf429b2d51f2ab45035824822f582000112233445566778899aabbccdd
eeff0123456789abcdeffedcba98765432100e1987d0010f020f0745840c
00030f085838880c0214a3035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c2216001602
030f0945840c02170210584e880c0114a2035824822f5820001122334455
66778899aabbccddeeff0123456789abcdeffedcba987654321015781b68
7474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502030f
114b880c0014a116011602030f
]]></artwork></figure>

</section>
<section anchor="example-5-two-images"><name>Example 5: Two Images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Furthermore, it shows using these templates with two images.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'264dc89eb4a39ae7a8ed05e4d6232153bce4fb9a111a31310b90627d1edfc3bb'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'82a7c80c7544a744e7da857164b5a11b87
ab33e1ef29fa9e5c0e37870829bb3790a94f2536900185c3a361e619355a154f9220ba
00e8248cd18cd2ffcb0efc99'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:5,
            / common / 3:<< {
                / components / 2:[
                    [h'00'] ,
                    [h'01']
                ],
                / shared-sequence / 4:<< [
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15 ,
                    / directive-set-component-index / 12,1 ,
                    / directive-override-parameters / 20,{
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                        ] >>,
                        / image-size / 14:76834,
                    }
                ] >>,
            } >>,
            / validate / 7:<< [
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-set-component-index / 12,0 ,
                / directive-run / 23,2
            ] >>,
            / install / 17:<< [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file1.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file2.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  306</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820264dc89eb4a39ae7a8ed05e4d6232153bc
e4fb9a111a31310b90627d1edfc3bb03590101a601010205035895a20282
8141008141010458898c0c0014a40150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820001122
33445566778899aabbccddeeff0123456789abcdeffedcba98765432100e
1987d0010f020f0c0114a2035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c220749880c
00030f0c01030f0945840c00170211584f900c0014a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65312e62696e1502030f0c0114
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  382</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820264dc89eb4a39ae7a8ed05e4d6232153bc
e4fb9a111a31310b90627d1edfc3bb584ad28443a10126a0f6584082a7c8
0c7544a744e7da857164b5a11b87ab33e1ef29fa9e5c0e37870829bb3790
a94f2536900185c3a361e619355a154f9220ba00e8248cd18cd2ffcb0efc
9903590101a601010205035895a202828141008141010458898c0c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab45035824822f582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d0010f020f0c0114a2035824
822f58200123456789abcdeffedcba987654321000112233445566778899
aabbccddeeff0e1a00012c220749880c00030f0c01030f0945840c001702
11584f900c0014a115781c687474703a2f2f6578616d706c652e636f6d2f
66696c65312e62696e1502030f0c0114a115781c687474703a2f2f657861
6d706c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

</section>
</section>
<section anchor="design-rationale"><name>C. Design Rational</name>

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted invocation operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted invocation of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency's commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope"><name>C.1 Design Rationale: Envelope</name>

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of Severable Elements (<xref target="severable-fields"/>)</t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers"><name>C.2 Byte String Wrappers</name>

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the shared sequence. The shared sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>
<section anchor="implementation-matrix"><name>D. Implementation Conformance Matrix</name>

<t>This section summarizes the functionality a minimal manifest processor
implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Class Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Device Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>OPTIONAL</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>REQUIRED</c>
      <c>Check Content</c>
      <c><xref target="suit-condition-check-content"/></c>
      <c>OPTIONAL</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>Abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>OPTIONAL</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>REQUIRED if more than one component</c>
      <c>Write Content</c>
      <c><xref target="suit-directive-write"/></c>
      <c>OPTIONAL</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>OPTIONAL</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>REQUIRED</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>REQUIRED for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>OPTIONAL</c>
      <c>Invoke</c>
      <c><xref target="suit-directive-invoke"/></c>
      <c>REQUIRED for Bootloader</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>OPTIONAL</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>REQUIRED</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>REQUIRED</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>REQUIRED</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>REQUIRED</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>Content</c>
      <c><xref target="suit-parameter-content"/></c>
      <c>OPTIONAL</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>REQUIRED for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>OPTIONAL</c>
      <c>Invoke Args</c>
      <c><xref target="suit-parameter-invoke-args"/></c>
      <c>OPTIONAL</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>OPTIONAL</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>OPTIONAL</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>OPTIONAL</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c>OPTIONAL</c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
H4sIAOTpPmMAA+y96XYc2XUm+j+fIi7ZywVUZSYJkKwBcskCJ4sWpyZYUqtL
delAZiARYmZEKiISqCyS+tUP4bXuHz+Gf1ur3+vu+ewTQwKkqtt2t2stW0RG
xBn32WeP355MJqMmb5bZUXKcPCiLWV5nyf28SKtt8uL0j9msSV5l6yqrs6JJ
m7wskr0H91+82p+cpnU2T06yKk+X+U/86HFZrdImOSurpDnPkpPyrLlMqyz5
bj1Pm6ymB0+KJquKrEnKs+T1eV4s6mTv5Lsnr/eTZ2mRn2V1M0pPT6vs4ijB
jrQfeCO8MC9nRbqCIc+r9KyZ5FlzNqk3eTNZyRuTg29GM+hyUVbbo6Ru5qNR
vq6Okqba1M3h7dvf3D4cwcDSI5jAbFPlzXZ0WVZvF1W5WR9RZ6O32RZ+mh/Z
gCcPsbPRqG7SYv4mXZYFDGCb1aN1fjRKkupsls3rZruUX5OkKWfun3kxhyXU
H+qyaqrsrLa/t6voz6bKZ/byrFyt4Ft7mhfLvAjdZD82k2UOk4ZGTsslvDYp
P/8CnsAyrdL1GtbYjePNMrvI8KW7o1G6ac7LCkY/gWf4X17Ag/vT5FlZpYX8
xit9v8qKeVpET8pqAevNew/kU62Sp/kqb7K5PM9Wab48Sk750+kKP53iZv1q
gU+mMK9Rq+9fT5PX9ey8PMuKfBEN4NdpUQAJdZ5ecxDn9Pm0sc9hDD9OYVt7
RnA/r96el8uf4v6z4m37Sdz34yrdFNh6lZwAAcXdw9fTU/n6V3XeTM/s7ek8
aw/iN9PkvwOVnWZVvAi/KbOi/SQexJMCDmTc91v4aPqTfPSrHF+A3ttd/uWf
psmrv/xLUeCRbNJ51O9f/ml7AQTc90Lc/XM4MvkMTtUqn5XFfDNryioeTUkt
TavSGvLUUBAHyS8yPFKvHj+4e3B4KP/8+uCe/vPON19/qb9+c/cb+ec3tw/s
nweHd49GcOiLM9/gk8lDpkLhFk2uvxILmZV1NjlP6/NJulzU0aMmy9aTtJqd
A2XNmk2VxR+eltWkSRf1pMzn0RPq5yyvVsgHJ1kxq7ZrWqnOSxvikcjB0kWG
x737CnGvybyE5Srq7uMqWwNXkRX46vDwa/zn74+fPT2iHRAufwN/SY7z4rMG
GGr1drNOnqbFYgO93qD3jCnAfziko+Tw9uFtbiKtFhmwpfOmWddHt25t09Vy
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
K/muqANJBR7SZTT87M0DKnWuR1620xaxj5f09BDTqpSLzz6S4JgePpKySVS7
5kc4vU3hSFV3j2m2l2SHFuyK0+lZ4i1VwD7tyMZNfcIB3t1A+zgPLk89mdHM
PfvVVZLoFz1Df2ckrwhVLYLXjxQC03/FtStDqvbwMTmhN6OpOxrmMUWb+iEM
tzswuLmSL1oje+OiEOCq+UUv4uvRqOdOQ55Pv8AfOCWMtoQGevNnr9XA2+zg
8Otr9XTn67vXeu/eweH1OqahDy/Mt0nyPQsLehu3NsbEjS+SvRbKeXLrVrSX
Gg+V7I9ajdmTW7f0ztgZnzNOOJznuFrsX7+hqEhyr4jUmttHtG2FogM7Nqjo
N6+r7RuMFnqjADjS5Ee03xPFw129+0LPRAgb+YCww7I+uON4W0U/IGxE9MP3
X+A7sCujaw7dtv2wK0r2Ht2/K/KlbXsHkpXP515YvC4RBeRt/UVbYY/jaD9p
Ny+uSF1NiaiTGIAxjfsW3rC3YO63ELtz1Ok7fLujzhd99Spbv+H6r9dqplsM
7JOa6YRSfNpoovIv/N8nTSqKvBl/cjM+mm/8yaMhQNpx4v/rNDPq0Fb37FEM
3hXtXKOZa/Gx3U1czcHaJ+tazX4c87pWkx/Lr67RJMlff/02MADJX7+blyBW
/fXNsJA73tnMlTx5FzPukyFb3Dj0lfBdkUxPCbiRdRMtXo2/CTxO/CN89Td7
QRmqgUHCG7OyAkGPSwuAvn973P+GIgkdRboXvVFva7RyukYOh14JrdxBubVD
YW7tdwQ1ghxK7e9JFcU3VNzwFln/J+us2Iem9d+iex4c7rEOe80+O7XxQPT1
ve1fsx0fJTkaEKFZLfi4FslRKgrudb+MuX74+pqfo84rqu51e+zghn7kiF3A
YrBCXPPbbvXBzhZed91EPPklxgTcwvILLI18HEGJL8+mcc0VdNGu9C30fv3V
dwhg9u0oOjTfCjUSPR2oiqH6qCmT4dffZNtalbwd6sgvXSWz8HF4F5uR2mUf
fKfxG6LgR9q0sgNKbwv/RUYY/zo5XdpvD78urc85IPCarSNvu1br4Qj6UJdr
vO5tYNHrZC7o+eBttu0zEtge9i5tCAS8zujYkRa9u2ultO0/1ojJydGqV7+9
TVfL3rfjiXenu9OFkIjWvQqWxzvDpoW2DQHenhzssCR0TAb0wdejtoUAf757
Z9Q2CNDPd0cd/Z9+vwfdOuPfONQOmxjETjw3o51vk4PWk47FNDFrhNiS7qgg
4S2f3yZi3AhGxuSrkbMfJl+rrZhNg8k3o1+cXGPILRMeMqTYEpccfDXQ0qZo
tcWWt+TwjpXAM3uTTbNt5sKJhQUIOig8wKjZTjG9HslE13hHmV2/zH2FTYWH
6NoPqW380r3OS1EhTX7py87Iudhhz38wgbvtl7tXqb18eLeLxNhTFEubPmy/
bBUwesZxr/0yg0v3D/rr61Rx0EHf7se272358KAXN33g5c4E5Qj0vnynH8Wy
v+k7nXFEYJqtlw87eKA7aHWH2BtodaDKsHbYaamXVjsgpV680a3sdBgJMvpW
p0cnGAeyuNsdVzgYjnjar/3/7V1pc9zG0f4+vwKVfJATc0ncBytJFS/JtHVZ
lA/lLZdrAAzItfagFlhRlKX89vfpmcG5WCwvObJCskTtAnN09/SNxkzrAU+H
Ewb82wYL9HuxK2s/6LDW4rXqjTY10nrjXS/yepNdr/F6Q10v8Xrz3FCfQ45a
C6A13lkLoDUuWRugfj+sNFRDzlepQoc8LmjQ//znP1Qzsr9tHKn95WhPEr3V
XP6xu4FKecNIxVRtFSdLSNThAnJjimrvttZmC6tb8h29VdslS/+ib09bqt8o
d5iezqs94XLR2k/jpaxg1kBRGZSuAK4Pma+BPzo4PJFbTp3D61hYtGfVrqzu
oOqZ0Wj/6NHxU+P5i+Mf914eGd8dvZJX2ZPjR9/snR7tPdl/8mj/8s2jkydu
hO+PDg7054ujb/YfmRf84nh/7/vvT/fO//3qt38f/PDo8RPP/HH/gB389uqk
+PlrM/rt0XR2+e3zxfnh45fvd87GPz87e7H39GBv7+RoMj+iHZDfvIm+Pfvx
3VgET+fTt2/ePA5fFG/Z86/jcfHTT8lZ+nZv8TLPvntd5Aevjt5dfPe0WDz9
5udx9Gzfefr1xWzvhyJ/P31hO0/c4rvxTwqto6eHq0jJVX+5UspzTkWjidzM
q7m7ZWvr87wmeA/1fth/fHzQIN7D1xdHF6+++W7+7+P3v5kHe9+/OtafD/e+
Tw5BrqOzb/n+ozfu4zdv3p68+jF5NVu+598u/DfjnaOYxe93pu7ix8ns+Of4
4jsz+Oby/HG8N91/khz8FvP3Lyz37cvT9H2Wf3vx8HH8xHudFu+fPT6ZT07/
+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
OUQCAA==

-->

</rfc>

