<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC4122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4122.xml">
<!ENTITY RFC9052 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.9052.xml">
<!ENTITY RFC3986 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC8949 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8949.xml">
<!ENTITY RFC9019 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.9019.xml">
<!ENTITY RFC9124 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.9124.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY I-D.moran-suit-mti SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.moran-suit-mti.xml">
<!ENTITY RFC9054 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.9054.xml">
<!ENTITY I-D.ietf-teep-architecture SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-teep-architecture.xml">
<!ENTITY RFC9090 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.9090.xml">
<!ENTITY I-D.ietf-suit-firmware-encryption SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-suit-firmware-encryption.xml">
<!ENTITY I-D.ietf-suit-update-management SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-suit-update-management.xml">
<!ENTITY I-D.ietf-suit-trust-domains SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-suit-trust-domains.xml">
<!ENTITY I-D.ietf-suit-report SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-suit-report.xml">
<!ENTITY RFC7228 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7228.xml">
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-22" category="std">

  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>
    <author initials="Ø." surname="Rønningstad" fullname="Øyvind Rønningstad">
      <organization>Nordic Semiconductor</organization>
      <address>
        <email>oyvind.ronningstad@gmail.com</email>
      </address>
    </author>

    <date year="2023" month="February" day="27"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about code/data obtained by a recipient (chiefly
the firmware for an IoT device), where to find the that code/data, the
devices to which it applies, and cryptographic information protecting
the manifest. Software updates and Trusted Invocation both tend to use
sequences of common operations, so the manifest encodes those sequences
of operations, rather than declaring the metadata.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata describing one or more code or data payloads and how to:</t>

<t><list style="symbols">
  <t>Obtain any dependencies</t>
  <t>Obtain the payload(s)</t>
  <t>Install them</t>
  <t>Verify them</t>
  <t>Load them into memory</t>
  <t>Invoke them</t>
</list></t>

<t>This specification defines the SUIT manifest format and it is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="RFC9124"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>a Firmware Author to reason about releasing a firmware.</t>
  <t>a Network Operator to reason about compatibility of a firmware.</t>
  <t>a Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>a Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>a device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>a device to reason about the applicability of a firmware.</t>
  <t>a device to reason about the installation of a firmware.</t>
  <t>a device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="RFC9019"/> and the threats, requirements, and user stories in <xref target="RFC9124"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or Trusted Invocation are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In this document, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the language is tailored to software updates and Trusted Invocation.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and Trusted Invocation use cases, there is nothing in the SUIT Information Model <xref target="RFC9124"/> that restricts its use to only those use cases. Other use cases include the management of trusted applications (TAs) in a Trusted Execution Environment (TEE), as discussed in <xref target="I-D.ietf-teep-architecture"/>.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL</bcp14>
NOT", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient's storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document"><name>How to use this Document</name>

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rational is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> gives a summarize of the mandatory-to-implement features of this specification.</t>

<t>This specification covers the core features of SUIT. Additional specifications describe functionality of advanced use cases, such as:</t>

<t><list style="symbols">
  <t>Firmware Encryption is covered in <xref target="I-D.ietf-suit-firmware-encryption"/></t>
  <t>Update Management is covered in <xref target="I-D.ietf-suit-update-management"/></t>
  <t>Features, such as dependencies, key delegation, multiple processors, required by the use of multiple trust domains are covered in <xref target="I-D.ietf-suit-trust-domains"/></t>
  <t>Secure reporting of the update status is covered in <xref target="I-D.ietf-suit-report"/></t>
  <t>Compression of firmware images</t>
</list></t>

</section>
<section anchor="background"><name>Background</name>

<t>Distributing software updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="RFC9019"/>. The security aspects are described in <xref target="RFC9124"/>.</t>

<section anchor="iot-firmware-update-constraints"><name>IoT Firmware Update Constraints</name>

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivered to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model"><name>SUIT Workflow Model</name>

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Invocation Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
  <t>Verify image(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and invoking images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Invoke image(s).</t>
</list></t>

<t>If verification and invocation is implemented in a bootloader, then the bootloader <bcp14>MUST</bcp14> also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader may add its own authentication, e.g. a Message Authentication Code (MAC), to the manifest in order to prevent further verifications.</t>

</section>
</section>
<section anchor="metadata-structure-overview"><name>Metadata Structure Overview</name>

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest..</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, such as affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable elements.</t>
    </list></t>
  <t>Severable elements (see <xref target="ovr-severable"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| Integrated Payloads     |          | Structure Version            |
+-------------------------+          | Sequence Number              |
                                     | Reference to Full Manifest   |
                               +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Components IDs          |      +-> +-----------------------+
| Common Command Sequence ---------> | Command Sequence      |
+-------------------------+          +-----------------------+
                                     | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope"><name>Envelope</name>

<t>The SUIT Envelope is a container that encloses the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that would add substantial complexity with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-auth"><name>Authentication Block</name>

<t>The Authentication Block contains a bstr-wrapped SUIT Digest Container, see <xref target="SUIT_Digest"/>, and one or more <xref target="RFC9052"/> CBOR Object Signing and Encryption (COSE) authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>Each of these objects is used in detached payload mode. The payload is the bstr-wrapped SUIT_Digest.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest"><name>Manifest</name>

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical"><name>Critical Metadata</name>

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which manifest is newest and whether the structure version is supported. It also <bcp14>MAY</bcp14> provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, and <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common"><name>Common</name>

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of two parts: a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence <bcp14>MUST NOT</bcp14> have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/> for more detail.</t>

</section>
<section anchor="ovr-commands"><name>Command Sequences</name>

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Payload Fetch, Payload Installation and, System Validation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Invocation Command Sequences are: System Validation, Image Loading, and Image Invocation. An Invocation Procedure is the complete set of each Invocation Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command (dependencies are not defined in this specification).</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity"><name>Integrity Check Values</name>

<t>To enable <xref target="ovr-severable"/>, there needs to be a mechanism to verify integrity of any metadata outside the manifest. Integrity Check Values are used to verify the integrity of metadata that is not contained in the manifest. This <bcp14>MAY</bcp14> include Severable Command Sequences, or Text data. Integrated Payloads are integrity-checked using Command Sequences, so they do not have Integrity Check Values present in the Manifest.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text"><name>Human-Readable Text</name>

<t>Text is typically a Severable Element (<xref target="ovr-severable"/>). It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable"><name> Severable Elements</name>

<t>Severable Elements are elements of the Envelope (<xref target="ovr-envelope"/>) that have Integrity Check Values (<xref target="ovr-integrity"/>) in the Manifest (<xref target="ovr-manifest"/>).</t>

<t>Because of this organisation, these elements can be discarded or "Severed" from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system severs the Text sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated"><name>Integrated Payloads</name>

<t>In some cases, it is beneficial to include a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest's envelope.</t>
</list></t>

<t>See <xref target="template-integrated-payload"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior"><name>Manifest Processor Behavior</name>

<t>This section describes the behavior of the manifest processor and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the manifest processor: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup"><name>Manifest Processor Setup</name>

<t>Prior to executing any command sequence, the manifest processor or its host application <bcp14>MUST</bcp14> inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the manifest processor or its host application <bcp14>MUST</bcp14> extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the manifest processor can choose between several manifests, it <bcp14>MUST</bcp14> select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it <bcp14>MAY</bcp14> select the next latest valid, authentic manifest, according to application-specific policy.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported Component Identifier encountered.</t>
  <t>Payload not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Payload verification failed.</t>
  <t>Missing required component from a Component Set.</t>
  <t>Required parameter not supplied.</t>
</list></t>

<t>These failure reasons <bcp14>MAY</bcp14> be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Selecting an older manifest in the event of failure of the latest valid manifest is a robustness mechanism that is necessary for supporting the requirements in <xref section="3.5" sectionFormat="comma" target="RFC9019"/>. It may not be appropriate for all applications. In particular Trusted Execution Environments <bcp14>MAY</bcp14> require a failure to invoke a new installation, rather than a rollback approach. See <xref section="4.2.1" sectionFormat="comma" target="RFC9124"/> for more discussion on the security considerations that apply to rollback.</t>

<t>Following these initial tests, the manifest processor clears all parameter storage. This ensures that the manifest processor begins without any leaked data.</t>

</section>
<section anchor="required-checks"><name> Required Checks</name>

<t>The <bcp14>RECOMMENDED</bcp14> process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a Recipient receives an incompatible manifest.</t>

<t>When validating authenticity of manifests, the manifest processor <bcp14>MAY</bcp14> use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity.</t>

<t>Once a valid, authentic manifest has been selected, the manifest processor <bcp14>MUST</bcp14> examine the component list and verify that its maximum number of components is not exceeded and that each listed component is supported.</t>

<t>For each listed component, the manifest processor <bcp14>MUST</bcp14> provide storage for the supported parameters. If the manifest processor does not have sufficient temporary storage to process the parameters for all components, it <bcp14>MAY</bcp14> process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The manifest processor <bcp14>SHOULD</bcp14> check that the shared sequence contains at least Check Vendor Identifier command and at least one Check Class Identifier command.</t>

<t>Because the shared sequence contains Check Vendor Identifier and Check Class Identifier command(s), no custom commands are permitted in the shared sequence. This ensures that any custom commands are only executed by devices that understand them.</t>

<t>If the manifest contains more than one component, each command sequence <bcp14>MUST</bcp14> begin with a Set Component Index.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it <bcp14>SHOULD</bcp14> verify that all Components in the Component Set are specified by one update, that is the manifest:</t>

<t><list style="numbers">
  <t>has sufficient permissions imparted by its signatures</t>
  <t>specifies a digest and a payload for every Component in the Component Set.</t>
</list></t>

<section anchor="minimal-sigs"><name>Minimizing Signature Verifications</name>

<t>Signature verification can be energy and time expensive on a constrained device. MAC verification is typically unaffected by these concerns. A Recipient <bcp14>MAY</bcp14> choose to parse and execute only the SUIT_Common section of the manifest prior to signature verification, if all of the below apply:</t>

<t><list style="symbols">
  <t>The Authentication Block contains a COSE_Sign_Tagged or COSE_Sign1_Tagged</t>
  <t>The Recipient receives manifests over an unauthenticated channel, exposing it to more inauthentic or incompatible manifests, and</t>
  <t>The Recipient has a power budget that makes signature verification undesirable</t>
</list></t>

<t>When executing Common prior to authenticity validation, the Manifest Processor <bcp14>MUST</bcp14> first evaluate the integrity of the manifest using the SUIT_Digest present in the authentication block.</t>

<t>The guidelines in Creating Manifests (<xref target="creating-manifests"/>) require that the common section contains the applicability checks, so this section is sufficient for applicability verification. The parser <bcp14>MUST</bcp14> restrict acceptable commands to conditions and the following directives: Override Parameters, Set Parameters, Try Each, and Run Sequence ONLY. The manifest parser <bcp14>MUST NOT</bcp14> execute any command with side-effects outside the parser (for example, Run, Copy, Swap, or Fetch commands) prior to authentication and any such command <bcp14>MUST</bcp14> Abort. The Shared sequence <bcp14>MUST</bcp14> be executed again, in its entirety, after authenticity validation.</t>

<t>A Recipient <bcp14>MAY</bcp14> rely on network infrastructure to filter inapplicable manifests.</t>

</section>
</section>
<section anchor="interpreter-fundamental-properties"><name>Interpreter Fundamental Properties</name>

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update <bcp14>MUST</bcp14> either result in an error, or a verifiably correct system state.</t>
  <t>Executing a Trusted Invocation <bcp14>MUST</bcp14> either result in an error, or an invoked image.</t>
  <t>Executing the same manifest on multiple Recipients <bcp14>MUST</bcp14> result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

<section anchor="resilience-to-disruption"><name>Resilience to Disruption</name>

<t>As required in <xref section="3" sectionFormat="of" target="RFC9019"/> and as an extension of design goal 1, devices must remain operable after a disruption, such as a power failure or network interruption, interrupts the update process.</t>

<t>The manifest processor must be resilient to these faults. In order to enable this resilience, systems implementing the manifest processor <bcp14>MUST</bcp14> make the following guarantees:</t>

<t>Either:
1. A fallback/recovery image is provided so that a disrupted system can apply the SUIT Manifest again.
2. Manifests are constructed so that repeated partial invocations of any manifest sequence always results in a correct system configuration.
3. A journal of manifest operations is stored in nonvolatile memory so that a repeated invocation does not alter nonvolatile memory up until the point of the previous failure. The journal enables the parser to recreate the processor state just prior to the disruption. This journal can be, for example, a SUIT Report. This report can be used to resume processing of the manifest from the point of failure.</t>

<t>AND</t>

<t><list style="numbers">
  <t>Where a command is not repeatable because of the way in which it alters system state (e.g. swapping images or in-place delta) it <bcp14>MUST</bcp14> be resumable or revertible. This applies to commands that modify at least one source component as well as the destination component.</t>
</list></t>

</section>
</section>
<section anchor="command-behavior"><name>Abstract Machine Description</name>

<t>The heart of the manifest is the list of commands, which are processed by a Manifest Processor--a form of interpreter. This Manifest Processor can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>Conditions <bcp14>MUST NOT</bcp14> have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag (<xref target="suit-parameter-soft-failure"/>) is set when a Condition reports failure.</t>

<t>Directives <bcp14>MAY</bcp14> have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter <bcp14>MUST</bcp14> Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>To simplify the logic describing the command semantics, the object "current" is used. It represents the component identified by the Component Index:</t>

<figure><artwork><![CDATA[
current := components\[component-index\]
]]></artwork></figure>

<t>As a result, Set Component Index is described as current := components[arg].</t>

<t>The following table describes the behavior of each command. "params" represents the parameters for the current component. Most commands operate on a component.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Check Content</c>
      <c>assert(binary-match(current, current.params[content]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for-each k,v in arg</c>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in params for-each k,v in arg</c>
      <c>Invoke</c>
      <c>invoke(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Write</c>
      <c>store(current, current.params[content])</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Slot</c>
      <c>assert(current.slot-index == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>try-each-done if exec(seq) is not error for-each seq in arg</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Invoke with Arguments</c>
      <c>invoke(current, arg)</c>
</texttable>

</section>
<section anchor="index-true"><name>Special Cases of Component Index</name>

<t>Component Index can take on one of three types:</t>

<t><list style="numbers">
  <t>Integer</t>
  <t>Array of integers</t>
  <t>True</t>
</list></t>

<t>Integers <bcp14>MUST</bcp14> always be supported by Set Component Index. Arrays of integers <bcp14>MUST</bcp14> be supported by Set Component Index if the Recipient supports 3 or more components. True <bcp14>MUST</bcp14> be supported by Set Component Index if the Recipient supports 2 or more components. Each of these operates on the list of components declared in the manifest.</t>

<t>Integer indices are the default case as described in the previous section. An array of integers represents a list of the components (Set Component Index) to which each subsequent command applies. The value True replaces the list of component indices with the full list of components, as defined in the manifest.</t>

<t>When a command is executed, it either 1. operates on the component identified by the component index if that index is an integer, or 2. it operates on each component identified by an array of indicies, or 3. it operates on every component if the index is the boolean True. This is described by the following pseudocode:</t>

<figure><artwork><![CDATA[
if component-index is true:
    current-list = components
else if component-index is array:
    current-list = [ components[idx] for idx in component-index ]
else:
    current-list = [ components[component-index] ]
for current in current-list:
    cmd(current)
]]></artwork></figure>

<t>Try Each and Run Sequence are affected in the same way as other commands: they are invoked once for each possible Component. This means that the sequences that are arguments to Try Each and Run Sequence are NOT invoked with Component Index = True, nor are they invoked with array indices. They are only invoked with integer indices. The interpreter loops over the whole sequence, setting the Component Index to each index in turn.</t>

</section>
<section anchor="serial-processing"><name>Serialized Processing Interpreter</name>

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor <bcp14>MAY</bcp14> handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

<t>When a serialized Manifest Processor encounters a component index of True, it does not ignore any commands. It applies them to the current component on each iteration.</t>

</section>
<section anchor="parallel-processing"><name>Parallel Processing Interpreter</name>

<t>Advanced Recipients <bcp14>MAY</bcp14> make use of the Strict Order parameter and enable parallel processing of some Command Sequences, or it may reorder some Command Sequences. To perform parallel processing, once the Strict Order parameter is set to False, the Recipient may issue each or every command concurrently until the Strict Order parameter is returned to True or the Command Sequence ends. Then, it waits for all issued commands to complete before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the Recipient consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>When the manifest processor encounters any of these scenarios the parallel processing <bcp14>MUST</bcp14> halt until all issued commands have completed:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, a manifest author may collect sequences of commands in a Run Sequence command. Then, each of these sequences <bcp14>MAY</bcp14> be run in parallel. There are several invocation options for Run Sequence:</t>

<t><list style="symbols">
  <t>Component Index is a positive integer, Strict Order is False: Strict Order is set to True before the sequence argument is run. The sequence argument <bcp14>MUST</bcp14> begin with set-component-index.</t>
  <t>Component Index is true or an array of positive integers, Strict Order is False: The sequence argument is run once for each component (or each component in the array); the manifest processor presets the component index and Strict Order = True before each iteration of the sequence argument.</t>
  <t>Component Index is a positive integer, Strict Order is True: No special considerations</t>
  <t>Component Index is True or an array of positive integers, Strict Order is True: The sequence argument is run once for each component (or each component in the array); the manifest processor presets the component index before each iteration of the sequence argument.</t>
</list></t>

<t>These rules isolate each sequence from each other sequence, ensuring that they operate as expected. When Strict Order = False, any further Set Component Index directives in the Run Sequence command sequence argument <bcp14>MUST</bcp14> cause an Abort. This allows the interpreter that issues Run Sequence commands to check that the first element is correct, then issue the sequence to a parallel execution context to handle the remainder of the sequence.</t>

</section>
</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC9052"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>The author <bcp14>MUST</bcp14> ensure that all parameters consumed by a command are set prior to invoking that command. Where Component Index = True, this means that the parameters consumed by each command <bcp14>MUST</bcp14> have been set for each Component.</t>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<t>NOTE: On systems that support only a single component, Set Component Index has no effect and can be omitted.</t>

<t>NOTE: <strong>A digest <bcp14>MUST</bcp14> always be set using Override Parameters.</strong></t>

<section anchor="template-compatibility-check"><name>Compatibility Check Template</name>

<t>The goal of the compatibility check template ensure that Recipients only install compatible images.</t>

<t>In this template all information is contained in the shared sequence and the following sequence of commands is used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="uuid-identifiers"/>)</t>
  <t>Check Class Identifier condition (see <xref target="uuid-identifiers"/>)</t>
</list></t>

</section>
<section anchor="template-secure-boot"><name>Trusted Invocation Template</name>

<t>The goal of the Trusted Invocation template is to ensure that only authorized code is invoked; such as in Secure Boot or when a Trusted Application is loaded into a TEE.</t>

<t>The following commands are placed into the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>The system validation sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>Then, the run sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Invoke directive (see <xref target="suit-directive-invoke"/>)</t>
</list></t>

</section>
<section anchor="firmware-download-template"><name>Component Download Template</name>

<t>The goal of the Component Download template is to acquire and store an image.</t>

<t>The following commands are placed into the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI (see <xref target="suit-parameter-uri"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-install"><name>Install Template</name>

<t>The goal of the Install template is to use an image already stored in an identified component to copy into a second component.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: the Component Download operations are moved from the Payload Install sequence to the Payload Fetch sequence.</t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="suit-parameter-source-component"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-integrated-payload"><name>Integrated Payload Template</name>

<t>The goal of the Integrated Payload template is to install a payload that is included in the manifest envelope. It is identical to the Component Download template (<xref target="firmware-download-template"/>).</t>

<t>An implementer <bcp14>MAY</bcp14> choose to place a payload in the envelope of a manifest. The payload envelope key <bcp14>MUST</bcp14> be a string. The payload <bcp14>MUST</bcp14> be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way <bcp14>MAY</bcp14> be expressed as a fragment-only reference, as defined in <xref section="4.4" sectionFormat="comma" target="RFC3986"/>.</t>

<t>A distributor <bcp14>MAY</bcp14> choose to pre-fetch a payload and add it to the manifest envelope, using the URI as the key.</t>

</section>
<section anchor="template-load-ext"><name>Load from Nonvolatile Storage Template</name>

<t>The goal of the Load from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="a-b-template"><name>A/B Image Template</name>

<t>The goal of the A/B Image Template is to acquire, validate, and invoke one of two images, based on a test.</t>

<t>The following commands are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following commands are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

<t>If Trusted Invocation (<xref target="template-secure-boot"/>) is used, only the run sequence is added to this template, since the shared sequence is populated by this template:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
    </list></t>
  <t>Invoke</t>
</list></t>

<t>NOTE: Any test can be used to select between images, Check Slot Condition is used in this template because it is a typical test for execute-in-place devices.</t>

</section>
</section>
<section anchor="metadata-structure"><name>Metadata Structure</name>

<t>The metadata for SUIT updates is composed of several primary constituent parts: the Envelope, Authentication Information, Manifest, and Severable Elements.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding-considerations"><name>Encoding Considerations</name>

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialized variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific values, as described in <xref target="iana"/>.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

<t>All CBOR maps in the Manifest and manifest envelope <bcp14>MUST</bcp14> be encoded with the canonical CBOR ordering as defined in <xref target="RFC8949"/>.</t>

</section>
<section anchor="envelope"><name>Envelope</name>

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="authentication-info"><name>Authenticated Manifests</name>

<t>The suit-authentication-wrapper contains a SUIT Digest Container (see <xref target="SUIT_Digest"/>) and one or more SUIT Authentication Blocks. The SUIT_Digest carries the result of computing the indicated hash algorithm over the suit-manifest element. A signing application <bcp14>MUST</bcp14> verify the suit-manifest element against the SUIT_Digest prior to signing. A SUIT Authentication Block is implemented as COSE_Mac_Tagged, COSE_Mac0_Tagged, COSE_Sign_Tagged or COSE_Sign1_Tagged structures with detached payloads, as described in RFC 9052 <xref target="RFC9052"/>.</t>

<t>For COSE_Sign and COSE_Sign1 a special signature structure (called Sig_structure) has to be created onto which the selected digital signature algorithm is applied to, see <xref section="4.4" sectionFormat="of" target="RFC9052"/> for details. This specification requires Sig_structure to be populated as follows:
* The external_aad field <bcp14>MUST</bcp14> be set to a zero-length binary string (i.e. there is no external additional authenticated data).
* The payload field contains the SUIT_Digest wrapped in a bstr, as per the requirements in <xref section="4.4" sectionFormat="of" target="RFC9052"/>.
All other fields in the Sig_structure are populated as described in <xref section="4.4" sectionFormat="of" target="RFC9052"/>.</t>

<t>Likewise, <xref section="6.3" sectionFormat="of" target="RFC9052"/> describes the details for computing a MAC and the fields of the MAC_structure need to be populated. The rules for external_aad and the payload fields described in the paragraph above also apply to this structure.</t>

<t>The suit-authentication-wrapper <bcp14>MUST</bcp14> come before the suit-manifest element, regardless of canonical encoding of CBOR.</t>

<t>A SUIT_Envelope that has not had authentication information added <bcp14>MUST</bcp14> still contain the suit-authentication-wrapper element, but the content <bcp14>MUST</bcp14> be a list containing only the SUIT_Digest.</t>

<t>The algorithms used in SUIT_Authentication are defined by the profiles declared in <xref target="I-D.moran-suit-mti"/>.</t>

</section>
<section anchor="manifest-structure"><name>Manifest</name>

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
</list></t>

<t>The Text section, or any Command Sequence of the Update Procedure (Image Fetch, Image Installation and, System Validation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable element. Severable elements are <bcp14>RECOMMENDED</bcp14> to implement. In particular, the human-readable text <bcp14>SHOULD</bcp14> be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version"><name>suit-manifest-version</name>

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is <bcp14>REQUIRED</bcp14> to implement.</t>

</section>
<section anchor="manifest-seqnr"><name>suit-manifest-sequence-number</name>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. Each Recipient <bcp14>MUST</bcp14> reject any manifest that has a sequence number lower than its current sequence number. For convenience, an implementer <bcp14>MAY</bcp14> use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is <bcp14>REQUIRED</bcp14> to implement.</t>

</section>
<section anchor="manifest-reference-uri"><name>suit-reference-uri</name>

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.</t>

</section>
<section anchor="manifest-digest-text"><name>suit-text</name>

<t>suit-text <bcp14>SHOULD</bcp14> be a severable element. suit-text is a map containing two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text</t>
  <t>SUIT_Component_Identifier =&gt; map</t>
</list></t>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text <bcp14>MUST</bcp14> also be present in suit-common (<xref target="manifest-common"/>).</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section <bcp14>MAY</bcp14> be present. If present, each section <bcp14>MUST</bcp14> be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The YAML <xref target="YAML"/>-formatted document that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A free text representation of the component version</c>
</texttable>

<t>suit-text is <bcp14>OPTIONAL</bcp14> to implement.</t>

</section>
<section anchor="manifest-common"><name>suit-common</name>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-components, and suit-shared-sequence. suit-common is <bcp14>REQUIRED</bcp14> to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is <bcp14>REQUIRED</bcp14> to implement.</t>

<t>suit-shared-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-shared-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-shared-sequence is <bcp14>RECOMMENDED</bcp14> to implement. It is <bcp14>REQUIRED</bcp14> if the optimizations described in <xref target="minimal-sigs"/> will be used. Whenever a parameter or Try Each command is required by more than one Command Sequence, placing that parameter or command in suit-shared-sequence results in a smaller encoding.</t>

<section anchor="suit-component-identifier"><name>SUIT_Component_Identifier</name>

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>A Component Identifier can be trivial, such as the simple array [h'00']. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path "/usr/bin/env" would encode to ['usr','bin','env'].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands"><name>SUIT_Command_Sequence</name>

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient <bcp14>MUST</bcp14> take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is <bcp14>OPTIONAL</bcp14> to implement.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is <bcp14>OPTIONAL</bcp14> to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation. suit-validate is <bcp14>REQUIRED</bcp14> to implement.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is <bcp14>OPTIONAL</bcp14> to implement.</t>
  <t>Invoke or Boot: suit-invoke is a SUIT_Command_Sequence to execute in order to invoke an image. suit-invoke typically contains a single instruction: the "invoke" directive, but may also contain an image condition. suit-invoke is <bcp14>OPTIONAL</bcp14> to implement.</t>
</list></t>

<t>Goals 1,2,3 form the Update Procedure. Goals 3,4,5 form the Invocation Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that <bcp14>MUST</bcp14> be true and any failure is treated as a failure of the update/load/invocation</t>
  <t>Directives that <bcp14>MUST</bcp14> be executed.</t>
</list></t>

<t>Each condition is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>A <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided. This index is a numeric index into the Component Identifier table defined at the beginning of the manifest.</t>

<t>To facilitate optional conditions, a special directive, suit-directive-try-each (<xref target="suit-directive-try-each"/>), is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/invocation, but a parameter is provided to override this behavior. See suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>).</t>

</section>
<section anchor="reporting-policy"><name>Reporting Policy</name>

<t>To facilitate construction of Reports that describe the success or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>At the completion of each command, a Manifest Processor <bcp14>MAY</bcp14> forward information about the command to a Reporting Engine, which is responsible for reporting boot or update status to a third party. The Reporting Engine is entirely implementation-defined, the reporting policy simply facilitates the Reporting Engine's interface to the SUIT Manifest Processor.</t>

<t>The information elements provided to the Reporting Engine are:</t>

<t><list style="symbols">
  <t>The reporting policy</t>
  <t>The result of the command</t>
  <t>The values of parameters consumed by the command</t>
  <t>The system information consumed by the command</t>
</list></t>

<t>Together, these elements are called a Record. A group of Records is a Report.</t>

<t>If the component index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine <bcp14>MUST</bcp14> receive one Record for each Component, in the order expressed in the Components list or the component index array.</t>

<t>This specification does not define a particular format of Records or Reports. This specification only defines hints to the Reporting Engine for which Records it should aggregate into the Report. The Reporting Engine <bcp14>MAY</bcp14> choose to ignore these hints and apply its own policy instead.</t>

<t>When used in a Invocation Procedure, the report <bcp14>MAY</bcp14> form the basis of an attestation report. When used in an Update Process, the report <bcp14>MAY</bcp14> form the basis for one or more log entries.</t>

</section>
<section anchor="secparameters"><name>SUIT_Parameters</name>

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reuse of parameters between commands, thus reducing manifest size.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Content</c>
      <c>suit-parameter-content</c>
      <c><xref target="suit-parameter-content"/></c>
      <c>Component Slot</c>
      <c>suit-parameter-component-slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Invoke Args</c>
      <c>suit-parameter-invoke-args</c>
      <c><xref target="suit-parameter-invoke-args"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately.</t>

<section anchor="cbor-pen-uuid-namespace-identifier"><name>CBOR PEN UUID Namespace Identifier</name>

<t>The CBOR PEN UUID Namespace Identifier is constructed as follows:</t>

<t>It uses the OID Namespace as a starting point, then uses the CBOR absolute OID encoding for the IANA PEN OID (1.3.6.1.4.1):</t>

<figure><artwork><![CDATA[
D8 6F                # tag(111)
   45                # bytes(5)
# Absolute OID encoding of IANA Private Enterprise Number:
#    1.3. 6. 1. 4. 1
      2B 06 01 04 01 # X.690 Clause 8.19
]]></artwork></figure>

<t>Computing a type 5 UUID from these produces:</t>

<figure><artwork><![CDATA[
NAMESPACE_CBOR_PEN = UUID5(NAMESPACE_OID, h'D86F452B06010401')
NAMESPACE_CBOR_PEN = 47fbdabb-f2e4-55f0-bb39-3620c2f6df4e
]]></artwork></figure>

</section>
<section anchor="uuid-identifiers"><name>Constructing UUIDs</name>

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient <bcp14>MAY</bcp14> match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They <bcp14>MUST NOT</bcp14> be used as assertions of identity. They are evaluated by identifier conditions (<xref target="identifier-conditions"/>).</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module's firmware has a proprietary update mechanism and doesn't support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs <bcp14>MUST</bcp14> be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs <bcp14>SHOULD</bcp14> use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The <bcp14>RECOMMENDED</bcp14> method to create a vendor ID is:</t>

<figure><artwork><![CDATA[
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)
]]></artwork></figure>

<t>If the Vendor ID is a UUID, the <bcp14>RECOMMENDED</bcp14> method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(Vendor ID, Class-Specific-Information)
]]></artwork></figure>

<t>If the Vendor ID is a CBOR PEN (see <xref target="suit-parameter-vendor-identifier"/>), the <bcp14>RECOMMENDED</bcp14> method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(
    UUID5(NAMESPACE_CBOR_PEN, CBOR_PEN),
    Class-Specific-Information)
]]></artwork></figure>

<t>Class-specific-information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier"><name>suit-parameter-vendor-identifier</name>

<t>suit-parameter-vendor-identifier may be presented in one of two ways:</t>

<t><list style="symbols">
  <t>A Private Enterprise Number</t>
  <t>A byte string containing a UUID <xref target="RFC4122"/></t>
</list></t>

<t>Private Enterprise Numbers are encoded as a relative OID, according to the definition in <xref target="RFC9090"/>. All PENs are relative to the IANA PEN: 1.3.6.1.4.1.</t>

</section>
<section anchor="suit-parameter-class-identifier"><name>suit-parameter-class-identifier</name>

<t>A RFC 4122 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It <bcp14>MUST</bcp14> be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier"><name>suit-parameter-device-identifier</name>

<t>A RFC 4122 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It <bcp14>MUST</bcp14> be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest"><name>suit-parameter-image-digest</name>

<t>A fingerprint computed over the component itself, encoded in the SUIT_Digest <xref target="SUIT_Digest"/> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size"><name>suit-parameter-image-size</name>

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-component-slot"><name>suit-parameter-component-slot</name>

<t>This parameter sets the slot index of a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its index into the component's storage area. This slot <bcp14>MUST</bcp14> be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-content"><name>suit-parameter-content</name>

<t>A block of raw data for use with <xref target="suit-directive-write"/>. It contains a byte string of data to be written to a specified component ID in the same way as a fetch or a copy.</t>

<t>If data is encoded this way, it should be small. Large payloads written via this method will prevent the manifest from being held in memory during validation. Typical applications include small configuration parameters.</t>

<t>If suit-parameter-content is instantiated in a severable command sequence, then this becomes functionally very similar to an integrated payload, which may be a better choice.</t>

</section>
<section anchor="suit-parameter-uri"><name>suit-parameter-uri</name>

<t>A URI Reference <xref target="RFC3986"/> from which to fetch a resource, encoded as a text string. CBOR Tag 32 is not used because the meaning of the text string is unambiguous in this context.</t>

</section>
<section anchor="suit-parameter-source-component"><name>suit-parameter-source-component</name>

<t>This parameter sets the source component to be used with either suit-directive-copy (<xref target="suit-directive-copy"/>) or with suit-directive-swap (<xref target="suit-directive-swap"/>). The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-invoke-args"><name>suit-parameter-invoke-args</name>

<t>This parameter contains an encoded set of arguments for suit-directive-invoke (<xref target="suit-directive-invoke"/>). The arguments <bcp14>MUST</bcp14> be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-fetch-arguments"><name>suit-parameter-fetch-arguments</name>

<t>An implementation-defined set of arguments to suit-directive-fetch (<xref target="suit-directive-fetch"/>). Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order"><name>suit-parameter-strict-order</name>

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It <bcp14>MAY</bcp14> be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands <bcp14>MUST</bcp14> have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands <bcp14>MUST</bcp14> complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure"><name>suit-parameter-soft-failure</name>

<t>When executing a command sequence inside suit-directive-try-each (<xref target="suit-directive-try-each"/>) or suit-directive-run-sequence (<xref target="suit-directive-run-sequence"/>) and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates. It <bcp14>MUST NOT</bcp14> be set outside of suit-directive-try-each or suit-directive-run-sequence.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom"><name>suit-parameter-custom</name>

<t>This parameter is an extension point for any proprietary, application specific conditions and directives. It <bcp14>MUST NOT</bcp14> be used in the shared sequence. This effectively scopes each custom command to a particular Vendor Identifier/Class Identifier pair.</t>

</section>
</section>
<section anchor="suitcondition"><name>SUIT_Condition</name>

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Check Content</c>
      <c>suit-condition-check-content</c>
      <c><xref target="suit-condition-check-content"/></c>
      <c>Component Slot</c>
      <c>suit-condition-component-slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>Abort</c>
      <c>suit-condition-abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>Custom Condition</c>
      <c>suit-condition-custom</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition <bcp14>MUST</bcp14> report a result code on completion. If a condition reports failure, then the current sequence of commands <bcp14>MUST</bcp14> terminate. A subsequent command or command sequence <bcp14>MAY</bcp14> continue executing if suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is set. If a condition requires additional information, this <bcp14>MUST</bcp14> be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it <bcp14>MUST</bcp14> report a failure. If a Recipient encounters an unknown condition, it <bcp14>MUST</bcp14> report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary definition by the author of a manifest processor. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions"><name>suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier</name>

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that <bcp14>MUST</bcp14> have already been set as a parameter. The installing Recipient <bcp14>MUST</bcp14> match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. Each component <bcp14>MAY</bcp14> match more than one identifier. Care is needed to ensure that manifests correctly identify their targets using these conditions. Using only a generic class ID for a device-specific firmware could result in matching devices that are not compatible.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are <bcp14>REQUIRED</bcp14> to implement. suit-condition-device-identifier is <bcp14>OPTIONAL</bcp14> to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers <bcp14>MUST</bcp14> be known to the Manifest Processor in order to evaluate compatibility.</t>

</section>
<section anchor="suit-condition-image-match"><name>suit-condition-image-match</name>

<t>Verify that the current component matches the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>) for the current component. The digest is verified against the digest specified in the Component's parameters list. If no digest is specified, the condition fails. suit-condition-image-match is <bcp14>REQUIRED</bcp14> to implement.</t>

</section>
<section anchor="suit-condition-check-content"><name>suit-condition-check-content</name>

<t>This directive compares the specified component identifier to the data indicated by suit-parameter-content. This functions similarly to suit-condition-image-match, however it does a direct, byte-by-byte comparison rather than a digest-based comparison. Because it is possible that an early stop to check-content could reveal information through timing, suit-condition-check-content <bcp14>MUST</bcp14> be constant time: no early exits. This <bcp14>MAY</bcp14> be implemented as follows:</t>

<t><spanx style="verb">
// content &amp; component must be same length
// returns 0 for match
bool check_content(content, component, length) {
    int residual = 0
    for (i = 0; i &lt; length; i++) {
        residual |= content[i] ^ component[i];
    }
    return residual;
}
</spanx></t>

</section>
<section anchor="suit-condition-component-slot"><name>suit-condition-component-slot</name>

<t>Verify that the slot index of the current component matches the slot index set in suit-parameter-component-slot (<xref target="suit-parameter-component-slot"/>). This condition allows a manifest to select between several images to match a target slot.</t>

</section>
<section anchor="suit-condition-abort"><name>suit-condition-abort</name>

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each (<xref target="suit-directive-try-each"/>).</t>

</section>
<section anchor="SUIT_Condition_Custom"><name>suit-condition-custom</name>

<t>suit-condition-custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is <bcp14>OPTIONAL</bcp14> to implement.</t>

</section>
</section>
<section anchor="suitdirective"><name>SUIT_Directive</name>
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Write</c>
      <c>suit-directive-write</c>
      <c><xref target="suit-directive-write"/></c>
      <c>Invoke</c>
      <c>suit-directive-invoke</c>
      <c><xref target="suit-directive-invoke"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it <bcp14>MUST</bcp14> report a result code. If the Directive reports failure, then the current Command Sequence <bcp14>MUST</bcp14> be terminated.</t>

<section anchor="suit-directive-set-component-index"><name>suit-directive-set-component-index</name>

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument <bcp14>MUST</bcp14> be one of three types:</t>

<t><list style="numbers">
  <t>An unsigned integer (<bcp14>REQUIRED</bcp14> to implement in parser)</t>
  <t>A boolean (<bcp14>REQUIRED</bcp14> to implement in parser ONLY IF 2 or more components supported)</t>
  <t>An array of unsigned integers (<bcp14>REQUIRED</bcp14> to implement in parser ONLY IF 3 or more components supported)</t>
</list></t>

<t>If the following commands apply to ONE component, an unsigned integer index into the component list is used. If the following commands apply to ALL components, then the boolean value "True" is used instead of an index. If the following commands apply to more than one, but not all components, then an array of unsigned integer indices into the component list is used.
See <xref target="index-true"/> for more details.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-try-each"><name>suit-directive-try-each</name>

<t>This command runs several SUIT_Command_Sequence instances, one after another, in a strict order, until one succeeds or the list is exhausted. Use this command to implement a "try/catch-try/catch" sequence. Manifest processors <bcp14>MAY</bcp14> implement this command.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters"><name>suit-directive-override-parameters</name>

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch"><name>suit-directive-fetch</name>

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more payloads. suit-directive-fetch retrieves each component listed in component-index. If component-index is True, instead of an integer, then all current manifest components are fetched. If component-index is an array, then all listed components are fetched.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

</section>
<section anchor="suit-directive-copy"><name>suit-directive-copy</name>

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. As described in <xref target="index-true"/> component index may be a single integer, a list of integers, or True. suit-directive-copy retrieves each component specified by the current component-index, respectively.</t>

<t>suit-directive-copy reads its source from suit-parameter-source-component (<xref target="suit-parameter-source-component"/>).</t>

<t>If either the source component parameter or the source component itself is absent, this command fails.</t>

</section>
<section anchor="suit-directive-write"><name>suit-directive-write</name>

<t>This directive writes a small block of data, specified in <xref target="suit-parameter-content"/>, to a component.</t>

<t>Encoding Considerations: Careful consideration must be taken to determine whether it is more appropriate to use an integrated payload or to use <xref target="suit-parameter-content"/> for a particular application. While the encoding of suit-directive-write is smaller than an integrated payload, a large suit-parameter-content payload may prevent the manifest processor from holding the command sequence in memory while executing it.</t>

</section>
<section anchor="suit-directive-invoke"><name>suit-directive-invoke</name>

<t>suit-directive-invoke directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor <bcp14>MAY</bcp14> be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-invoke through suit-parameter-invoke-arguments (<xref target="suit-parameter-invoke-args"/>) and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-run-sequence"><name>suit-directive-run-sequence</name>

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr. This also allows a sequence of instructions to be iterated over, once for each current component index, when component-index = true or component-index = list. See <xref target="index-true"/>.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap"><name>suit-directive-swap</name>

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. As with suit-directive-copy, if the source component is missing, this command fails.</t>

<t>If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they <bcp14>MUST</bcp14> be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is <bcp14>OPTIONAL</bcp14> to implement.</t>

</section>
</section>
<section anchor="integrity-checks"><name>Integrity Check Values</name>

<t>When the Text section or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope. The keys for the envelope elements have the same values as the keys for the manifest elements.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="severable-fields"><name>Severable Elements</name>

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or "Severed" without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 <bcp14>SHOULD NOT</bcp14> be severable. Elements larger than (Digest Bits)/8 + 4 <bcp14>MAY</bcp14> be severable, while elements that are much larger than (Digest Bits)/8 + 4 <bcp14>SHOULD</bcp14> be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists"><name>Access Control Lists</name>

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or Component Identifier prefixes to the listed identities or identity groups. Any identity can verify an image digest, but fetching into or fetching from a Component Identifier requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the Component Identifier or Component Identifier prefix that an identity can use, and also lists the commands and parameters that the identity can use in combination with that Component Identifier.</t>

</section>
<section anchor="SUIT_Digest"><name>SUIT Digest Container</name>

<t>The SUIT digest is a CBOR List containing two elements: an algorithm identifier and a bstr containing the bytes of the digest. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The values of the algorithm identifier are defined by <xref target="RFC9054"/>. The following algorithms <bcp14>MUST</bcp14> be implemented by all Manifest Processors:</t>

<t><list style="symbols">
  <t>SHA-256 (-16)</t>
</list></t>

<t>The following algorithms <bcp14>MAY</bcp14> be implemented in a Manifest Processor:</t>

<t><list style="symbols">
  <t>SHAKE128 (-18)</t>
  <t>SHA-384 (-43)</t>
  <t>SHA-512 (-44)</t>
  <t>SHAKE256 (-45)</t>
</list></t>

</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate CBOR tag 107 (suggested) in the "CBOR Tags" registry for the SUIT Envelope.</t>
  <t>allocate CBOR tag 1070 (suggested) in the "CBOR Tags" registry for the SUIT Manifest.</t>
  <t>allocate media type application/suit-envelope in the "Media Types" registry, see below.</t>
  <t>setup several registries as described below.</t>
</list></t>

<t>IANA is requested to create a new category for Software Update for the Internet of Things (SUIT)
and a page within this category for SUIT manifests.</t>

<t>IANA is also requested to create several registries defined in the subsections below.</t>

<t>For each registry, values 0-255 are Standards Action and 256 or greater are Expert Review. Negative values -255 to 0 are Standards Action, and -256 and lower are Private Use.</t>

<t>New entries to those registries need to provide a label, a name and a reference to a specification that describes the functionality. More guidance on the expert review can be found below.</t>

<section anchor="suit-envelope-elements"><name>SUIT Envelope Elements</name>

<t>IANA is requested to create a new registry for SUIT envelope elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>2</c>
      <c>Authentication Wrapper</c>
      <c><xref target="authentication-info"/></c>
      <c>3</c>
      <c>Manifest</c>
      <c><xref target="manifest-structure"/></c>
      <c>16</c>
      <c>Payload Fetch</c>
      <c><xref target="manifest-commands"/></c>
      <c>17</c>
      <c>Payload Installation</c>
      <c><xref target="manifest-commands"/></c>
      <c>23</c>
      <c>Text Description</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-manifest-elements"><name>SUIT Manifest Elements</name>

<t>IANA is requested to create a new registry for SUIT manifest elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Encoding Version</c>
      <c><xref target="manifest-version"/></c>
      <c>2</c>
      <c>Sequence Number</c>
      <c><xref target="manifest-seqnr"/></c>
      <c>3</c>
      <c>Common Data</c>
      <c><xref target="manifest-common"/></c>
      <c>4</c>
      <c>Reference URI</c>
      <c><xref target="manifest-reference-uri"/></c>
      <c>7</c>
      <c>Image Validation</c>
      <c><xref target="manifest-commands"/></c>
      <c>8</c>
      <c>Image Loading</c>
      <c><xref target="manifest-commands"/></c>
      <c>9</c>
      <c>Image Invocation</c>
      <c><xref target="manifest-commands"/></c>
      <c>16</c>
      <c>Payload Fetch</c>
      <c><xref target="manifest-commands"/></c>
      <c>17</c>
      <c>Payload Installation</c>
      <c><xref target="manifest-commands"/></c>
      <c>23</c>
      <c>Text Description</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-common-elements"><name>SUIT Common Elements</name>

<t>IANA is requested to create a new registry for SUIT common elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>2</c>
      <c>Component Identifiers</c>
      <c><xref target="manifest-common"/></c>
      <c>4</c>
      <c>Common Command Sequence</c>
      <c><xref target="manifest-common"/></c>
</texttable>

</section>
<section anchor="suit-commands"><name>SUIT Commands</name>

<t>IANA is requested to create a new registry for SUIT commands.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>2</c>
      <c>Class Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>3</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>6</c>
      <c>Check Content</c>
      <c><xref target="suit-condition-check-content"/></c>
      <c>12</c>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>13</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>14</c>
      <c>Abort</c>
      <c>&#160;</c>
      <c>15</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>16</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>17</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>18</c>
      <c>Write Content</c>
      <c><xref target="suit-directive-write"/></c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>21</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>22</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>23</c>
      <c>Invoke</c>
      <c><xref target="suit-directive-invoke"/></c>
      <c>24</c>
      <c>Device Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>25</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>31</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>32</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>33</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

</section>
<section anchor="suit-parameters"><name>SUIT Parameters</name>

<t>IANA is requested to create a new registry for SUIT parameters.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>2</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>3</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>12</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>13</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>14</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>18</c>
      <c>Content</c>
      <c><xref target="suit-parameter-content"/></c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>21</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>22</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>23</c>
      <c>Invoke Args</c>
      <c><xref target="suit-parameter-invoke-args"/></c>
      <c>24</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

</section>
<section anchor="suit-text-values"><name>SUIT Text Values</name>

<t>IANA is requested to create a new registry for SUIT text values.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Manifest Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Update Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Manifest JSON Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Manifest YAML Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-component-text-values"><name> SUIT Component Text Values</name>

<t>IANA is requested to create a new registry for SUIT component text values.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Model Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Vendor Domain</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Model Info</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>5</c>
      <c>Component Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>6</c>
      <c>Component Version</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>7</c>
      <c>Component Version Required</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="expert-review-instructions"><name>Expert Review Instructions</name>

<t>The IANA registries established in this document allow values to be added
based on expert review. This section gives some general guidelines for
what the experts should be looking for, but they are being designated
as experts for a reason, so they should be given substantial
latitude.</t>

<t>Expert reviewers should take into consideration the following points:</t>

<t><list style="symbols">
  <t>Point squatting should be discouraged.  Reviewers are encouraged
   to get sufficient information for registration requests to ensure
   that the usage is not going to duplicate one that is already
   registered, and that the point is likely to be used in
   deployments.  The zones tagged as private use
   are intended for testing purposes and closed environments;
   code points in other ranges should not be assigned for testing.</t>
  <t>Specifications are required for the standards track range of point
   assignment.  Specifications should exist for  all other ranges,
   but early assignment before a specification is
   available is considered to be permissible.
   When specifications are not provided, the description provided
   needs to have sufficient information to identify what the point is
   being used for.</t>
  <t>Experts should take into account the expected usage of fields when
   approving point assignment.  The fact that there is a range for
   standards track documents does not mean that a standards track
   document cannot have points assigned outside of that range.  The
   length of the encoded value should be weighed against how many
   code points of that length are left, the size of device it will be
   used on, and the number of code points left that encode to that
   size.</t>
</list></t>

</section>
<section anchor="media-type-registration"><name>Media Type Registration</name>

<t>This section registers the 'application/suit-envelope' media type in the
"Media Types" registry.  This media type are used to indicate that
the content is a SUIT envelope.</t>

<t>```
      Type name: application</t>

<figure><artwork><![CDATA[
  Subtype name: suit-envelope

  Required parameters: N/A

  Optional parameters: N/A

  Encoding considerations: binary

  Security considerations: See the Security Considerations section
  of [[This RFC]].

  Interoperability considerations: N/A

  Published specification: [[This RFC]]

  Applications that use this media type: Primarily used for
    Firmware and software updates although the content may
    also contain configuration data and other information
    related to software and firmware.

  Fragment identifier considerations: N/A

  Additional information:

  *  Deprecated alias names for this type: N/A

  *  Magic number(s): N/A

  *  File extension(s): cbor

  *  Macintosh file type code(s): N/A

  Person & email address to contact for further information:
  iesg@ietf.org

  Intended usage: COMMON

  Restrictions on usage: N/A

  Author: Brendan Moran, <brendan.moran.ietf@gmail.com>

  Change Controller: IESG

  Provisional registration?  No ```
]]></artwork></figure>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>    <dl>
      <dt>
       </dt>
      <dd>
        <t><contact fullname="Milosch Meriac"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt>
       </dt>
      <dd>
        <t><contact fullname="Geraint Luff"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt>
       </dt>
      <dd>
        <t><contact fullname="Dan Ros"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt>
       </dt>
      <dd>
        <t><contact fullname="John-Paul Stanford"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt>
       </dt>
      <dd>
        <t><contact fullname="Hugo Vincent"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt>
       </dt>
      <dd>
        <t><contact fullname="Carsten Bormann"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt>
       </dt>
      <dd>
        <t><contact fullname="Øyvind Rønningstad"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt>
       </dt>
      <dd>
        <t><contact fullname="Frank Audun Kvamtrø"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt>
       </dt>
      <dd>
        <t><contact fullname="Krzysztof Chruściński"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt>
       </dt>
      <dd>
        <t><contact fullname="Andrzej Puzdrowski"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt>
       </dt>
      <dd>
        <t><contact fullname="Michael Richardson"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt>
       </dt>
      <dd>
        <t><contact fullname="David Brown"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt>
       </dt>
      <dd>
        <t><contact fullname="Emmanuel Baccelli"/></t>
      </dd>
    </dl>
  </t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC4122;
&RFC9052;
&RFC3986;
&RFC8949;
&RFC9019;
&RFC9124;
&RFC2119;
&RFC8174;


    </references>

    <references title='Informative References'>

&I-D.moran-suit-mti;
&RFC9054;
&I-D.ietf-teep-architecture;
&RFC9090;
&I-D.ietf-suit-firmware-encryption;
&I-D.ietf-suit-update-management;
&I-D.ietf-suit-trust-domains;
&I-D.ietf-suit-report;
&RFC7228;
<reference anchor="YAML" target="https://yaml.org/">
  <front>
    <title>YAML Ain't Markup Language</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message <bcp14>MUST</bcp14> adhere to the following CDDL data definition.</t>

<t>To be valid, the following CDDL <bcp14>MUST</bcp14> have the COSE CDDL appended to it. The COSE CDDL can be obtained by following the directions in <xref section="1.4" sectionFormat="comma" target="RFC9052"/>.</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Envelope_Tagged = #6.107(SUIT_Envelope)
SUIT_Envelope = {
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * SUIT_Integrated_Payload,
  * $$SUIT_Envelope_Extensions,
}

SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]

SUIT_Digest = [
  suit-digest-algorithm-id : suit-cose-hash-algs,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

SUIT_Severable_Manifest_Members = (
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  * $$SUIT_severable-members-extensions,
)

SUIT_Integrated_Payload = (suit-integrated-payload-key => bstr)
suit-integrated-payload-key = tstr

SUIT_Manifest_Tagged = #6.1070(SUIT_Manifest)

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Unseverable_Members,
    SUIT_Severable_Members_Choice,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-invoke => bstr .cbor SUIT_Command_Sequence,
  * $$unseverable-manifest-member-extensions,
)

SUIT_Severable_Members_Choice = (
  ? suit-payload-fetch => SUIT_Digest / 
      bstr .cbor SUIT_Command_Sequence,
  ? suit-install => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
  ? suit-text => SUIT_Digest / bstr .cbor SUIT_Text_Map,
  * $$severable-manifest-members-choice-extensions
)

SUIT_Common = {
    ? suit-components             => SUIT_Components,
    ? suit-shared-sequence        => bstr .cbor SUIT_Shared_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Components           = [ + SUIT_Component_Identifier ]

;REQUIRED to implement:
suit-cose-hash-algs /= cose-alg-sha-256

;OPTIONAL to implement:
suit-cose-hash-algs /= cose-alg-shake128
suit-cose-hash-algs /= cose-alg-sha-384
suit-cose-hash-algs /= cose-alg-sha-512
suit-cose-hash-algs /= cose-alg-shake256

SUIT_Component_Identifier =  [* bstr]

SUIT_Shared_Sequence = [
    + ( SUIT_Condition // SUIT_Shared_Commands )
]

SUIT_Shared_Commands //= (suit-directive-set-component-index,  IndexArg)
SUIT_Shared_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Shared_Sequence)
SUIT_Shared_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument_Shared)
SUIT_Shared_Commands //= (suit-directive-override-parameters,
    {+ $$SUIT_Parameters})

IndexArg /= uint
IndexArg /= true
IndexArg /= [+uint]


SUIT_Directive_Try_Each_Argument_Shared = [
    2* bstr .cbor SUIT_Shared_Sequence,
    ?nil
]

SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-component-slot,    SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-check-content,     SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-abort,             SUIT_Rep_Policy)

SUIT_Directive //= (suit-directive-write,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-component-index,  IndexArg)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-override-parameters,
    {+ $$SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-copy,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-swap,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-invoke,            SUIT_Rep_Policy)

SUIT_Directive_Try_Each_Argument = [
    2* bstr .cbor SUIT_Command_Sequence,
    ?nil
]

SUIT_Rep_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

$$SUIT_Parameters //= (suit-parameter-vendor-identifier =>
    (RFC4122_UUID / cbor-pen))

cbor-pen = #6.112(bstr)

$$SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
$$SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
$$SUIT_Parameters //= (suit-parameter-image-size => uint)
$$SUIT_Parameters //= (suit-parameter-component-slot => uint)

$$SUIT_Parameters //= (suit-parameter-uri => tstr)
$$SUIT_Parameters //= (suit-parameter-source-component => uint)
$$SUIT_Parameters //= (suit-parameter-invoke-args => bstr)

$$SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)

$$SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

$$SUIT_Parameters //= (suit-parameter-content => bstr)
$$SUIT_Parameters //= (suit-parameter-strict-order => bool)
$$SUIT_Parameters //= (suit-parameter-soft-failure => bool)

RFC4122_UUID = bstr .size 16

SUIT_Text_Map = {
    SUIT_Text_Keys,
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    }
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

suit-authentication-wrapper = 2
suit-manifest = 3

;REQUIRED to implement:
cose-alg-sha-256 = -16

;OPTIONAL to implement:
cose-alg-shake128 = -18
cose-alg-sha-384 = -43
cose-alg-sha-512 = -44
cose-alg-shake256 = -45

;Unseverable, recipient-necessary
suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-validate = 7
suit-load = 8
suit-invoke = 9
;Severable, recipient-necessary
suit-payload-fetch = 16
suit-install = 17
;Severable, recipient-unnecessary
suit-text = 23

suit-components = 2
suit-shared-sequence = 4

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-component-slot    = 5
suit-condition-check-content     = 6

suit-condition-abort                    = 14
suit-condition-device-identifier        = 24

suit-directive-set-component-index      = 12
suit-directive-try-each                 = 15
suit-directive-write                    = 18
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-invoke                   = 23

suit-directive-swap                     = 31
suit-directive-run-sequence             = 32

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-component-slot    = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14
suit-parameter-content           = 18

suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-invoke-args       = 23

suit-parameter-device-identifier = 24

suit-parameter-custom = nint

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
]]></sourcecode></figure>

</section>
<section anchor="examples"><name>B. Examples</name>

<t>The following examples demonstrate a small subset of the functionality of the manifest. Even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<t>Note that reporting policies are declared for each non-flow-control command in these examples. The reporting policies used in the examples are described in the following tables.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Label</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Rec-Pass</c>
      <c>suit-send-record-on-failure</c>
      <c>Rec-Fail</c>
      <c>suit-send-sysinfo-success</c>
      <c>Sys-Pass</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Sys-Fail</c>
</texttable>

<texttable>
      <ttcol align='left'>Command</ttcol>
      <ttcol align='left'>Sys-Fail</ttcol>
      <ttcol align='left'>Sys-Pass</ttcol>
      <ttcol align='left'>Rec-Fail</ttcol>
      <ttcol align='left'>Rec-Pass</ttcol>
      <c>suit-condition-vendor-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-class-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-image-match</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-component-slot</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>1</c>
      <c>suit-directive-fetch</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-copy</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-invoke</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
</texttable>

<section anchor="example-0-secure-boot"><name>Example 0: Secure Boot</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
</list></t>

<t>It also serves as the minimum example.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'6658ea560262696dd1f13b782239a064da7c6c5cbaf52fded428a6fc83c7e5af'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'e3505f7ab70bd3a0e04916f37b0d7251aa
6f52ca12c7edaa886a4129a298ca6a1ecc2a57955c6bf4ccb9f01d684d5d1c4774dffb
e508a034431feafa60848a2c'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:0,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-run / 23,2
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  161</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af035871a50101020003585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f0943821702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  237</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af584ad28443a10126a0f65840e3505f
7ab70bd3a0e04916f37b0d7251aa6f52ca12c7edaa886a4129a298ca6a1e
cc2a57955c6bf4ccb9f01d684d5d1c4774dffbe508a034431feafa60848a
2c035871a50101020003585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f0943821702
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload"><name>Example 1: Simultaneous Download and Installation of Payload</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Simultaneous download and installation of payload. No secure boot is present in this example to demonstrate a download-only manifest.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'ef14b7091e8adae8aa3bb6fca1d64fb37e19dcf8b35714cfdddc5968c80ff50e'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'e95d9bb4926c7c82138fc81b968fdc42d9
bc8cfadf9e35dde8cba7bd44b91af0427a13dff4e6bcf5f2d5577f8f3bcaed55983e43
e984d14d6bdb2c762d9378b5'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:1,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  196</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820ef14b7091e8adae8aa3bb6fca1d64fb37e
19dcf8b35714cfdddc5968c80ff50e035894a50101020103585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f1158258614a115781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  272</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820ef14b7091e8adae8aa3bb6fca1d64fb37e
19dcf8b35714cfdddc5968c80ff50e584ad28443a10126a0f65840e95d9b
b4926c7c82138fc81b968fdc42d9bc8cfadf9e35dde8cba7bd44b91af042
7a13dff4e6bcf5f2d5577f8f3bcaed55983e43e984d14d6bdb2c762d9378
b5035894a50101020103585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f1158258614a11578
1b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502
030f
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-secure-boot-severed-fields"><name>Example 2: Simultaneous Download, Installation, Secure Boot, Severed Fields</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>This example also demonstrates severable elements (<xref target="ovr-severable"/>), and text (<xref target="manifest-digest-text"/>).</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'86bbcc8823f3a4441956f02b001302f503487461fb77fab086efe31530881f97'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'3a2d25bdff0d7aaee88549c14f0f1ee881
e3c92d2e51231f3e7bce213adbddefecf8a0ea98859b6d1a69a01c961858e99aacd520
dd59bb0bd8016a66de777b34'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:2,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-run / 23,2
            ] >>,
            / install / 17:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'cfa90c5c58595e7f5119a72f803fd0370b3e6abbec6315cd38f63135281bc498'
            ],
            / text / 23:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'2bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918'
            ],
        } >>,
    })
]]></artwork></figure>

<t>Total size of the Envelope without COSE authentication object or Severable Elements:  235</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f582086bbcc8823f3a4441956f02b001302f503
487461fb77fab086efe31530881f970358bba70101020203585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f094382170211822f5820cfa90c5c58595e7f5119a72f803f
d0370b3e6abbec6315cd38f63135281bc49817822f58202bfc4d0cc6680b
e7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918
]]></artwork></figure>
<t>Total size of the Envelope with COSE authentication object but without Severable Elements:  311</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f582086bbcc8823f3a4441956f02b001302f503
487461fb77fab086efe31530881f97584ad28443a10126a0f658403a2d25
bdff0d7aaee88549c14f0f1ee881e3c92d2e51231f3e7bce213adbddefec
f8a0ea98859b6d1a69a01c961858e99aacd520dd59bb0bd8016a66de777b
340358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f094382170211822f
5820cfa90c5c58595e7f5119a72f803fd0370b3e6abbec6315cd38f63135
281bc49817822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf918
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object and Severable Elements:  894</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba4025873825824822f582086bbcc8823f3a4441956f02b001302f503
487461fb77fab086efe31530881f97584ad28443a10126a0f658403a2d25
bdff0d7aaee88549c14f0f1ee881e3c92d2e51231f3e7bce213adbddefec
f8a0ea98859b6d1a69a01c961858e99aacd520dd59bb0bd8016a66de777b
340358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f094382170211822f
5820cfa90c5c58595e7f5119a72f803fd0370b3e6abbec6315cd38f63135
281bc49817822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf91811583c8614a1157832687474703a2f2f657861
6d706c652e636f6d2f766572792f6c6f6e672f706174682f746f2f66696c
652f66696c652e62696e1502030f17590204a20179019d2323204578616d
706c6520323a2053696d756c74616e656f757320446f776e6c6f61642c20
496e7374616c6c6174696f6e2c2053656375726520426f6f742c20536576
65726564204669656c64730a0a2020202054686973206578616d706c6520
636f766572732074686520666f6c6c6f77696e672074656d706c61746573
3a0a202020200a202020202a20436f6d7061746962696c69747920436865
636b20287b7b74656d706c6174652d636f6d7061746962696c6974792d63
6865636b7d7d290a202020202a2053656375726520426f6f7420287b7b74
656d706c6174652d7365637572652d626f6f747d7d290a202020202a2046
69726d7761726520446f776e6c6f616420287b7b6669726d776172652d64
6f776e6c6f61642d74656d706c6174657d7d290a202020200a2020202054
686973206578616d706c6520616c736f2064656d6f6e7374726174657320
736576657261626c6520656c656d656e747320287b7b6f76722d73657665
7261626c657d7d292c20616e64207465787420287b7b6d616e6966657374
2d6469676573742d746578747d7d292e814100a2036761726d2e636f6d05
78525468697320636f6d706f6e656e7420697320612064656d6f6e737472
6174696f6e2e205468652064696765737420697320612073616d706c6520
7061747465726e2c206e6f742061207265616c206f6e652e
]]></artwork></figure>

</section>
<section anchor="example-3-ab-images"><name>Example 3: A/B images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>A/B Image Template (<xref target="a-b-template"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'b3e6a52776bf3ed218feba031c609c98260e1a52fc1f019683edb6d1c5c4a379'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'3a4c404585cf111bb5556a0ce269aa56e7
56d998f09a1179640933c44230f6a7d2ea2331f9d904d84f39496721cf2f76ee85f06b
b71ab2179c833292f0d227bb'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:3,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    } ,
                    / directive-try-each / 15,[
                        << [
                            / directive-override-parameters / 20,{
                                / slot / 5:0,
                            } ,
                            / condition-component-slot / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<< [
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                                ] >>,
                                / image-size / 14:34768,
                            }
                        ] >> ,
                        << [
                            / directive-override-parameters / 20,{
                                / slot / 5:1,
                            } ,
                            / condition-component-slot / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<< [
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                                ] >>,
                                / image-size / 14:76834,
                            }
                        ] >>
                    ] ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-try-each / 15,[
                    << [
                        / directive-override-parameters / 20,{
                            / slot / 5:0,
                        } ,
                        / condition-component-slot / 5,5 ,
                        / directive-override-parameters / 20,{
                            / uri / 21:'http://example.com/file1.bin',
                        }
                    ] >> ,
                    << [
                        / directive-override-parameters / 20,{
                            / slot / 5:1,
                        } ,
                        / condition-component-slot / 5,5 ,
                        / directive-override-parameters / 20,{
                            / uri / 21:'http://example.com/file2.bin',
                        }
                    ] >>
                ] ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  320</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820b3e6a52776bf3ed218feba031c609c9826
0e1a52fc1f019683edb6d1c5c4a3790359010fa5010102030358a4a20281
81410004589b8814a20150fa6b4a53d5ad5fdfbe9de663e4d41ffe025014
92af1425695e48bf429b2d51f2ab450f8258348614a10500050514a20358
24822f582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d058368614a10501050514a2035824822f582001
23456789abcdeffedcba987654321000112233445566778899aabbccddee
ff0e1a00012c22010f020f074382030f11585b860f8258288614a1050005
0514a115781c687474703a2f2f6578616d706c652e636f6d2f66696c6531
2e62696e58288614a10501050514a115781c687474703a2f2f6578616d70
6c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  396</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820b3e6a52776bf3ed218feba031c609c9826
0e1a52fc1f019683edb6d1c5c4a379584ad28443a10126a0f658403a4c40
4585cf111bb5556a0ce269aa56e756d998f09a1179640933c44230f6a7d2
ea2331f9d904d84f39496721cf2f76ee85f06bb71ab2179c833292f0d227
bb0359010fa5010102030358a4a2028181410004589b8814a20150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450f8258348614a10500050514a2035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0583686
14a10501050514a2035824822f58200123456789abcdeffedcba98765432
1000112233445566778899aabbccddeeff0e1a00012c22010f020f074382
030f11585b860f8258288614a10500050514a115781c687474703a2f2f65
78616d706c652e636f6d2f66696c65312e62696e58288614a10501050514
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

</section>
<section anchor="example-4-load-from-external-storage"><name>Example 4: Load from External Storage</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>Install (<xref target="template-install"/>)</t>
  <t>Load (<xref target="template-load-ext"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'838eb848698c9d9dd29b5930102ea1f29743857d975f52ed4d19589b821e82cf'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'8ea1abc44569f3acea130558a1b1f6a23b
f509cc1f3ac7afe5a3d9bfbdf752b0fbdddb12a64fa0f83faa2d1580d35458cf17dbc4
0c21d6601436e4a39d261c02'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:4,
            / common / 3:<< {
                / components / 2:[
                    [h'00'] ,
                    [h'02'] ,
                    [h'01']
                ],
                / shared-sequence / 4:<< [
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15
            ] >>,
            / load / 8:<< [
                / directive-set-component-index / 12,2 ,
                / directive-override-parameters / 20,{
                    / image-digest / 3:<< [
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ] >>,
                    / image-size / 14:76834,
                    / source-component / 22:0 / [h'00'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-set-component-index / 12,2 ,
                / directive-run / 23,2
            ] >>,
            / payload-fetch / 16:<< [
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / image-digest / 3:<< [
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ] >>,
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / source-component / 22:1 / [h'02'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  327</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820838eb848698c9d9dd29b5930102ea1f297
43857d975f52ed4d19589b821e82cf03590116a801010204035867a20283
814100814102814101045858880c0014a40150fa6b4a53d5ad5fdfbe9de6
63e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820
00112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100e1987d0010f020f0745840c00030f085838880c0214a3035824822f
58200123456789abcdeffedcba987654321000112233445566778899aabb
ccddeeff0e1a00012c2216001602030f0945840c02170210584e880c0114
a2035824822f582000112233445566778899aabbccddeeff0123456789ab
cdeffedcba987654321015781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e1502030f114b880c0014a116011602030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  403</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820838eb848698c9d9dd29b5930102ea1f297
43857d975f52ed4d19589b821e82cf584ad28443a10126a0f658408ea1ab
c44569f3acea130558a1b1f6a23bf509cc1f3ac7afe5a3d9bfbdf752b0fb
dddb12a64fa0f83faa2d1580d35458cf17dbc40c21d6601436e4a39d261c
0203590116a801010204035867a20283814100814102814101045858880c
0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e
48bf429b2d51f2ab45035824822f582000112233445566778899aabbccdd
eeff0123456789abcdeffedcba98765432100e1987d0010f020f0745840c
00030f085838880c0214a3035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c2216001602
030f0945840c02170210584e880c0114a2035824822f5820001122334455
66778899aabbccddeeff0123456789abcdeffedcba987654321015781b68
7474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502030f
114b880c0014a116011602030f
]]></artwork></figure>

</section>
<section anchor="example-5-two-images"><name>Example 5: Two Images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Furthermore, it shows using these templates with two images.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'264dc89eb4a39ae7a8ed05e4d6232153bce4fb9a111a31310b90627d1edfc3bb'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'82a7c80c7544a744e7da857164b5a11b87
ab33e1ef29fa9e5c0e37870829bb3790a94f2536900185c3a361e619355a154f9220ba
00e8248cd18cd2ffcb0efc99'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:5,
            / common / 3:<< {
                / components / 2:[
                    [h'00'] ,
                    [h'01']
                ],
                / shared-sequence / 4:<< [
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15 ,
                    / directive-set-component-index / 12,1 ,
                    / directive-override-parameters / 20,{
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                        ] >>,
                        / image-size / 14:76834,
                    }
                ] >>,
            } >>,
            / validate / 7:<< [
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-set-component-index / 12,0 ,
                / directive-run / 23,2
            ] >>,
            / install / 17:<< [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file1.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file2.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  306</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820264dc89eb4a39ae7a8ed05e4d6232153bc
e4fb9a111a31310b90627d1edfc3bb03590101a601010205035895a20282
8141008141010458898c0c0014a40150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820001122
33445566778899aabbccddeeff0123456789abcdeffedcba98765432100e
1987d0010f020f0c0114a2035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c220749880c
00030f0c01030f0945840c00170211584f900c0014a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65312e62696e1502030f0c0114
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  382</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820264dc89eb4a39ae7a8ed05e4d6232153bc
e4fb9a111a31310b90627d1edfc3bb584ad28443a10126a0f6584082a7c8
0c7544a744e7da857164b5a11b87ab33e1ef29fa9e5c0e37870829bb3790
a94f2536900185c3a361e619355a154f9220ba00e8248cd18cd2ffcb0efc
9903590101a601010205035895a202828141008141010458898c0c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab45035824822f582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d0010f020f0c0114a2035824
822f58200123456789abcdeffedcba987654321000112233445566778899
aabbccddeeff0e1a00012c220749880c00030f0c01030f0945840c001702
11584f900c0014a115781c687474703a2f2f6578616d706c652e636f6d2f
66696c65312e62696e1502030f0c0114a115781c687474703a2f2f657861
6d706c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

</section>
</section>
<section anchor="design-rationale"><name>C. Design Rational</name>

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted invocation operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted invocation of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency's commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope"><name>C.1 Design Rationale: Envelope</name>

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of Severable Elements (<xref target="severable-fields"/>)</t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers"><name>C.2 Byte String Wrappers</name>

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the shared sequence. The shared sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>
<section anchor="implementation-matrix"><name>D. Implementation Conformance Matrix</name>

<t>This section summarizes the functionality a minimal manifest processor
implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Class Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Device Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Check Content</c>
      <c><xref target="suit-condition-check-content"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c><bcp14>REQUIRED</bcp14> if more than one component</c>
      <c>Write Content</c>
      <c><xref target="suit-directive-write"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c><bcp14>REQUIRED</bcp14> for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Invoke</c>
      <c><xref target="suit-directive-invoke"/></c>
      <c><bcp14>REQUIRED</bcp14> for Bootloader</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Content</c>
      <c><xref target="suit-parameter-content"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c><bcp14>REQUIRED</bcp14> for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Invoke Args</c>
      <c><xref target="suit-parameter-invoke-args"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
H4sIAPuC/GMAA+y96XYbWXYm+h9PEVfq5SQzAUikpBxYzrKpySmXphaVVV03
K68cBIJglIAIVESATKSk+tUP4bXuHz+Gf7tWv9fd89knBpBSZd+2u51r2SUi
Is64zz57/PZkMhldHCV3RqMmb5bZUXKcPCiLWV5nyf28SKtt8uL0j9msSV5l
6yqrs6JJm7wskr0H91+82p+cpnU2T06yKk+X+c/86HFZrdImOSurpDnPkpPy
rLlMqyz5fj1Pm6ymB0+KJquKrEnKs+T1eV4s6mTv5Psnr/eTZ2mRn2V1M0pP
T6sMhoYdaT/wRnhhXs6KdAVDnlfpWTPJs+ZsUm/yZrKSNyaHh6N8XR0lTbWp
m8Pbt7+5fTiawRgWZbU9SupmPqqbKktXR8mTR68fj0YwyvQIZjPbVHmzHV2W
1dtFVW7WR9Tz6G22hZ/mRzb6yUPseTRa50ejJKnOZtm8bra4itushl+acub+
mRdzWD79oS4r6Pustr+3q+jPpspn9vKsXK3gW3uaF8u8CN1kPzWTZQ4ThkZO
yyW8Nik//wKewBKt0vUa1teN480yu8jwpbsw401zXlYw+gk8w//yAh7cnybP
yiot5Dde5ftVVszTInpSVgtYa953IJ1qlTzNV3mTzeV5tkrz5VFyyp9OV/jp
FDfq7xf4ZArzGrX6/m6avK5n5+VZVuSLaADfpUUB5NN5es1BnNPn08Y+hzH8
NIVd7BnB/bx6e14uf477z4q37Sdx34+rdFNg61VyAvQSdw9fT0/l67+v82Z6
Zm9P51l7EL+ZJv93WsxPsypehN+UWdF+Eg/iSQGHMe77LXw0/Vk++vscX4De
213+5Z+nyau//GtR4HFs0nnU71/+eXsBBNz3Qtz9czgh+QwO0SqflcV8M2vK
Kh5NSS1Nq9Ia8tRQEPfILzI8Uq8eP7h7cHgo//zm9r3DIzgLdTa6qT/c4R8m
6XJR81t3vvn6S/ng62/ufmPfHtg/Dw7vHo1Go7w48309mTxkAhUm0uSh27tI
PvW59oKvErtpsmw9SavZOZDbrNlUmX3yzW2YaD73L1OzZ3m1Qm44yYpZtV3T
mnVe2hCnRD6WLjI8+N1XiKVN5iUsHOxd53GVrYG/yGi+Ojz8Gv/5++NnT49o
L4TX38BfkuO8+KwBtlq93ayTp2mx2ECvN+g9Yw/wHw7pKDm8fXibm0irRQYM
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
3RDfEZPT6VYOcaoaCmi/cN/LCrCcIi2QCRD4i2zyfEx9Zz+lLEmjiTUj1RpH
v0w3xeycJVMdwnGQVnBkx7fuiy31CKZ2kc/5bZvIZzWpqCREo/2vuSzt9GE3
RDDcwBgVdifenp3VWaNyvcnaKS2eyOUoul7CYc3Uh5EX/vlevS/njsITXpOe
XsP284GWjWdLTLFt89m84Y/JYwjLjZEE+CE3R5tJx22O/k1q3GyASJUX5du2
/bXjkyI1L/Ae15zs7tws/aYrOSI5RcdQwzvkbbVsG9VFxX+zPUa4LZGUE5QH
uoUTr2QVuiTtB7sY7A8ZKonYUf9o7K2jxWDzPkoDwg+OyJBcsZ+M26TdYJUM
hY1oJOGEwM/Aic82y+QM6FUpUxmOEzT0Tg4clxQnkhbPKtqcBsUbcQDAAhQg
Kpdox1pmYrqWa4gsFcEUi3fnFv9BqgM6lkG6fIAae3J7cuitg09w2keR0iE6
Z5gaa1thfshFdGr+vtB7/Va9g6VWIqnwYqqSjLExxKBol6bJMQhYqCWK3ARf
opovdINrQZ7JJ7Zny7KR6/bMzO0gJLElW0/8slS1hlnlAk5mEfihn8pG9Bfj
J8LK0HJ9fMonsEgy1FsCYfoLKVx98L3Yz6Hd83TZKLcTYyRda5uKmIyR/jR5
Ahci2tr0jMEZZ+9NklVV6awtpER9Rw4TVgVR9nwo8m2vL2NWogcOtgsYU4qP
mrrH3kui8bt3p+mMoquKOZBQHBKgtjZVp5E7Oi2XTgyb/NYV6J05sHS5A0yh
JnMFHTI84i1j6JQGoGxwYu9NcPwXeXYJI1qwMJIssoI2XR9ZW8pEQy9keSZC
jvWGmp14NfUaFLlqcpqdpxd5WUULcEmnRJlD2Pe17TsoZpslTDF9m/FMaD+h
J4t8qztL6li2vu0aH1oQaEZtPiomoQ/KBC2Vn03eDg2OXpcJma1YkfVyk8p9
dZYNLwi22D+kaatpWPdyydvPm4WkbVIqd9K7Qru6IPvAk+PnpBegsZA5je6l
DT4t0g8fxupxr4mTGGsHgqAmUC2iI2cspMoW5GRBlsQHSR29qABaa7ikGP8I
EspptqxNfrKhRr69SAGVKaBsvIS1TR48fPhUaGKtdnHpRwwqcLEsJ7P5fIkT
EkmJTbLMz+gl/V2WL9WDyMsDM0PTGYk20io/n+hzXFy4skS/hgXUfaTnsD2w
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
3qUNIYnXGR179aJ3d62Utv3HGvFAOW726re36WrZ+3Y88e50d7oQEtG6V8Hy
eGfYtNC2IcDbk4MdloSOyYA++HrUthDgz3fvjNoGAfr57qij/9Pv96BbZ/wb
h7JlE4P3iedmtPNtctB60rGYJmaNEFvSHRUkvOXz20SMG8HImHw1cvbD5Gu1
FbNpMPlm9KuTawy5ZcJDhhRb4pKDrwZa2hStttjylhzesep7Zm+yabbNXDix
sABBB4UHGL/bqePXI5noGu+o8OuXua+mqvAQXfshtY1futd5KarhyS992Rk5
11ns+Q8mcLf9cvcqtZcP73ZRIHvqcWnTh+2XrfhGzzjutV9mYOv+QX99nQIS
Oujb/197V9oct3G0v8+vQCUf5MRcEvfBSlLFSzJtXRblQ3nL5RoAA3KtPagF
VhRlKb/9fXpmcC4Wy0uOrJAsUbvAHN09faMx07+tfu/IttW7ZfuaxisIahHo
bez076DZP7SzAkdrI89OY3tlL9IBXh1we2teXXPAcTnhyki9vLqyQWrTvSmX
cmXCliNTtlqZseEY12zhrsJVC0aDebrNWg94Opww4N82WKDfi11Z+0GHtRav
VW+0qZHWG+96kdeb7HqN1xvqeonXm+eG+hxy1FoArfHOWgCtccnaAPX7YaWh
GnK+ShU65HFBg/7nP/+hipH9beNI7W1Hm6Pobe7yj92dXMobRiqmaps6WUCi
zjWQW2RU+8a1tn1Y3Q7w6K3aqln6F3376VL1Rrm79XRe7UeXi9bOHi9lNbUG
imqydDVyfb59DfzRweGJ3O7qHF7HwqL9snZldQfVzoxG+0ePjp8az18c/7j3
8sj47uiVvMqeHD/6Zu/0aO/J/pNH+5dvHp08cSN8f3RwoD9fHH2z/8i84BfH
+3vff3+6d/7vV7/9++CHR4+feOaP+wfs4LdXJ8XPX5vRb4+ms8tvny/ODx+/
fL9zNv752dmLvacHe3snR5P5Ee2+/OZN9O3Zj+/GIng6n7598+Zx+KJ4y55/
HY+Ln35KztK3e4uXefbd6yI/eHX07uK7p8Xi6Tc/j6Nn+87Try9mez8U+fvp
C9t54hbfjX9SaB09PVxFSq76y5VCnnMqYE3kRmLNnTVb267nNcF7qPfD/uPj
gwbxHr6+OLp49c13838fv//NPNj7/tWx/ny4931yCHIdnX3L9x+9cR+/efP2
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

-->

</rfc>

