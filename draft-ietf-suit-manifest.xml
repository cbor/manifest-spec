<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-17" category="std">

  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>

    <date year="2022" month="July" day="11"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about code/data obtained by a recipient (chiefly
the firmware for an IoT device), where to find the that code/data, the
devices to which it applies, and cryptographic information protecting
the manifest. Software updates and Trusted Invocation both tend to use
sequences of common operations, so the manifest encodes those sequences
of operations, rather than declaring the metadata.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata describing one or more code or data payloads and how to:</t>

<t><list style="symbols">
  <t>Obtain any dependencies</t>
  <t>Obtain the payload(s)</t>
  <t>Install them</t>
  <t>Verify them</t>
  <t>Load them into memory</t>
  <t>Invoke them</t>
</list></t>

<t>This specification defines the SUIT manifest format and it is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="RFC9124"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>a Firmware Author to reason about releasing a firmware.</t>
  <t>a Network Operator to reason about compatibility of a firmware.</t>
  <t>a Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>a Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>a device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>a device to reason about the applicability of a firmware.</t>
  <t>a device to reason about the installation of a firmware.</t>
  <t>a device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="RFC9019"/> and the threats, requirements, and user stories in <xref target="RFC9124"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or Trusted Invocation are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In this document, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the language is tailored to software updates and Trusted Invocation.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and Trusted Invocation use cases, there is nothing in the SUIT Information Model (<xref target="RFC9124"/>) that restricts its use to only those use cases. Other use cases include the management of trusted applications (TAs) in a Trusted Execution Environment (TEE), as discussed in <xref target="I-D.ietf-teep-architecture"/>.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient's storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document"><name>How to use this Document</name>

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rational is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> gives a summarize of the mandatory-to-implement features of this specification.</t>

<t>This specification covers the core features of SUIT. Additional specifications describe functionality of advanced use cases, such as:</t>

<t><list style="symbols">
  <t>Firmware Encryption is covered in <xref target="I-D.ietf-suit-firmware-encryption"/></t>
  <t>Update Management is covered in <xref target="I-D.ietf-suit-update-management"/></t>
  <t>Features, such as dependencies, key delegation, multiple processors, required by the use of multiple trust domains are covered in <xref target="I-D.ietf-suit-trust-domains"/></t>
  <t>Secure reporting of the update status is covered in <xref target="I-D.ietf-suit-report"/></t>
  <t>Compression of firmware images</t>
</list></t>

</section>
<section anchor="background"><name>Background</name>

<t>Distributing software updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="RFC9019"/>. The security aspects are described in <xref target="RFC9124"/>.</t>

<section anchor="iot-firmware-update-constraints"><name>IoT Firmware Update Constraints</name>

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivered to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model"><name>SUIT Workflow Model</name>

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Invocation Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Run image(s).</t>
</list></t>

<t>If verification and running is implemented in a bootloader, then the bootloader MUST also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader may add its own authentication, e.g. a Message Authentication Code (MAC), to the manifest in order to prevent further verifications.</t>

</section>
</section>
<section anchor="metadata-structure-overview"><name>Metadata Structure Overview</name>

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest..</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, such as affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable elements.</t>
    </list></t>
  <t>Severable elements (see <xref target="ovr-severable"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| Integrated Payloads     |          | Structure Version            |
+-------------------------+          | Sequence Number              |
                                     | Reference to Full Manifest   |
                               +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Components IDs          |      +-> +-----------------------+
| Common Command Sequence ---------> | Command Sequence      |
+-------------------------+          +-----------------------+
                                     | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope"><name>Envelope</name>

<t>The SUIT Envelope is a container that encloses the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that would add substantial complexity with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-auth"><name>Authentication Block</name>

<t>The Authentication Block contains a bstr-wrapped SUIT Digest Container, see <xref target="SUIT_Digest"/>, and one or more <xref target="RFC8152"/> CBOR Object Signing and Encryption (COSE) authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>Each of these objects is used in detached payload mode. The payload is the bstr-wrapped SUIT_Digest.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest"><name>Manifest</name>

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical"><name>Critical Metadata</name>

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which manifest is newest and whether the structure version is supported. It also MAY provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, and <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common"><name>Common</name>

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of two parts: a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence MUST NOT have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/> for more detail.</t>

</section>
<section anchor="ovr-commands"><name>Command Sequences</name>

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Payload Fetch, and Payload Installation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Invocation Command Sequences are: System Validation, Image Loading, and Image Invocation. An Invocation Procedure is the complete set of each Invocation Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command (dependencies are not defined in this specification).</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity"><name>Integrity Check Values</name>

<t>To enable <xref target="ovr-severable"/>, there needs to be a mechanism to verify integrity of any metadata outside the manifest. Integrity Check Values are used to verify the integrity of metadata that is not contained in the manifest. This MAY include Severable Command Sequences, or Text data. Integrated Payloads are integrity-checked using Command Sequences, so they do not have Integrity Check Values present in the Manifest.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text"><name>Human-Readable Text</name>

<t>Text is typically a Severable Element (<xref target="ovr-severable"/>). It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable"><name>Â Severable Elements</name>

<t>Severable Elements are elements of the Envelope (<xref target="ovr-envelope"/>) that have Integrity Check Values (<xref target="ovr-integrity"/>) in the Manifest (<xref target="ovr-manifest"/>).</t>

<t>Because of this organisation, these elements can be discarded or "Severed" from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system severs the Text sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated"><name>Integrated Payloads</name>

<t>In some cases, it is beneficial to include a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest's envelope.</t>
</list></t>

<t>See <xref target="template-integrated-payload"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior"><name>Manifest Processor Behavior</name>

<t>This section describes the behavior of the manifest processor and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the manifest processor: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup"><name>Manifest Processor Setup</name>

<t>Prior to executing any command sequence, the manifest processor or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the manifest processor or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the manifest processor can choose between several manifests, it MUST select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest, according to application-specific policy.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported Component Identifier encountered.</t>
  <t>Payload not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Payload verification failed.</t>
  <t>Missing required component from a Component Set.</t>
  <t>Required parameter not supplied.</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Selecting an older manifest in the event of failure of the latest valid manifest is a robustness mechanism that is necessary for supporting the requirements in <xref target="RFC9019"/>, section 3.5. It may not be appropriate for all applications. In particular Trusted Execution Environments MAY require a failure to invoke a new installation, rather than a rollback approach. See <xref target="RFC9124"/>, Section 4.2.1 for more discussion on the security considerations that apply to rollback.</t>

<t>Following these initial tests, the manifest processor clears all parameter storage. This ensures that the manifest processor begins without any leaked data.</t>

</section>
<section anchor="required-checks"><name>Â Required Checks</name>

<t>The RECOMMENDED process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a Recipient receives an incompatible manifest.</t>

<t>When validating authenticity of manifests, the manifest processor MAY use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity.</t>

<t>Once a valid, authentic manifest has been selected, the manifest processor MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component is supported.</t>

<t>For each listed component, the manifest processor MUST provide storage for the supported parameters. If the manifest processor does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The manifest processor SHOULD check that the common sequence contains at least Check Vendor Identifier command and at least one Check Class Identifier command.</t>

<t>Because the common sequence contains Check Vendor Identifier and Check Class Identifier command(s), no custom commands are permitted in the common sequence. This ensures that any custom commands are only executed by devices that understand them.</t>

<t>If the manifest contains more than one component, each command sequence MUST begin with a Set Component Index.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by one update, that is the manifest:</t>

<t><list style="numbers">
  <t>has sufficient permissions imparted by its signatures</t>
  <t>specifies a digest and a payload for every Component in the Component Set.</t>
</list></t>

<section anchor="minimal-sigs"><name>Minimizing Signature Verifications</name>

<t>Signature verification can be energy and time expensive on a constrained device. MAC verification is typically unaffected by these concerns. A Recipient MAY choose to parse and execute only the SUIT_Common section of the manifest prior to signature verification, if all of the below apply:</t>

<t><list style="symbols">
  <t>The Authentication Block contains a COSE_Sign_Tagged or COSE_Sign1_Tagged</t>
  <t>The Recipient receives manifests over an unauthenticated channel, exposing it to more inauthentic or incompatible manifests, and</t>
  <t>The Recipient has a power budget that makes signature verification undesirable</t>
</list></t>

<t>When executing Common prior to authenticity validation, the Manifest Processor MUST first evaluate the integrity of the manifest using the SUIT_Digest present in the authentication block.</t>

<t>The guidelines in Creating Manifests (<xref target="creating-manifests"/>) require that the common section contains the applicability checks, so this section is sufficient for applicability verification. The parser MUST restrict acceptable commands to conditions and the following directives: Override Parameters, Set Parameters, Try Each, and Run Sequence ONLY. The manifest parser MUST NOT execute any command with side-effects outside the parser (for example, Run, Copy, Swap, or Fetch commands) prior to authentication and any such command MUST Abort. The Common Sequence MUST be executed again, in its entirety, after authenticity validation.</t>

<t>A Recipient MAY rely on network infrastructure to filter inapplicable manifests.</t>

</section>
</section>
<section anchor="interpreter-fundamental-properties"><name>Interpreter Fundamental Properties</name>

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a Trusted Invocation MUST either result in an error, or an invoked image.</t>
  <t>Executing the same manifest on multiple Recipients MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

</section>
<section anchor="command-behavior"><name>Abstract Machine Description</name>

<t>The heart of the manifest is the list of commands, which are processed by a Manifest Processor--a form of interpreter. This Manifest Processor can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>Conditions MUST NOT have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag (<xref target="suit-parameter-soft-failure"/>) is set when a Condition reports failure.</t>

<t>Directives MAY have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter MUST Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>To simplify the logic describing the command semantics, the object "current" is used. It represents the component identified by the Component Index:</t>

<figure><artwork><![CDATA[
current := components\[component-index\]
]]></artwork></figure>

<t>As a result, Set Component Index is described as current := components[arg].</t>

<t>The following table describes the behavior of each command. "params" represents the parameters for the current component. Most commands operate on a component.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for-each k,v in arg</c>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in params for-each k,v in arg</c>
      <c>Run</c>
      <c>run(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Slot</c>
      <c>assert(current.slot-index == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>try-each-done if exec(seq) is not error for-each seq in arg</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Run with Arguments</c>
      <c>run(current, arg)</c>
</texttable>

</section>
<section anchor="index-true"><name>Special Cases of Component Index</name>

<t>Component Index can take on one of three types:</t>

<t><list style="numbers">
  <t>Integer</t>
  <t>Array of integers</t>
  <t>True</t>
</list></t>

<t>Integers MUST always be supported by Set Component Index. Arrays of integers MUST be supported by Set Component Index if the Recipient supports 3 or more components. True MUST be supported by Set Component Index if the Recipient supports 2 or more components. Each of these operates on the list of components declared in the manifest.</t>

<t>Integer indices are the default case as described in the previous section. An array of integers represents a list of the components (Set Component Index) to which each subsequent command applies. The value True replaces the list of component indices with the full list of components, as defined in the manifest.</t>

<t>When a command is executed, it either 1. operates on the component identified by the component index if that index is an integer, or 2. it operates on each component identified by an array of indicies, or 3. it operates on every component if the index is the boolean True. This is described by the following pseudocode:</t>

<figure><artwork><![CDATA[
if component-index is true:
    current-list = components
else if component-index is array:
    current-list = [ components[idx] for idx in component-index ]
else:
    current-list = [ components[component-index] ]
for current in current-list:
    cmd(current)
]]></artwork></figure>

<t>Try Each and Run Sequence are affected in the same way as other commands: they are invoked once for each possible Component. This means that the sequences that are arguments to Try Each and Run Sequence are NOT invoked with Component Index = True, nor are they invoked with array indices. They are only invoked with integer indices. The interpreter loops over the whole sequence, setting the Component Index to each index in turn.</t>

</section>
<section anchor="serial-processing"><name>Serialized Processing Interpreter</name>

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor MAY handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

<t>When a serialized Manifest Processor encounters a component index of True, it does not ignore any commands. It applies them to the current component on each iteration.</t>

</section>
<section anchor="parallel-processing"><name>Parallel Processing Interpreter</name>

<t>Advanced Recipients MAY make use of the Strict Order parameter and enable parallel processing of some Command Sequences, or it may reorder some Command Sequences. To perform parallel processing, once the Strict Order parameter is set to False, the Recipient may issue each or every command concurrently until the Strict Order parameter is returned to True or the Command Sequence ends. Then, it waits for all issued commands to complete before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the Recipient consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>When the manifest processor encounters any of these scenarios the parallel processing MUST halt until all issued commands have completed:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, a manifest author may collect sequences of commands in a Run Sequence command. Then, each of these sequences MAY be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence MUST begin with a Set Component Index directive with the following exception: when the index is either True or an array of indices, the Set Component Index is implied. Any further Set Component Index directives MUST cause an Abort. This allows the interpreter that issues Run Sequence commands to check that the first element is correct, then issue the sequence to a parallel execution context to handle the remainder of the sequence.</t>

</section>
</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC8152"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>The author MUST ensure that all parameters consumed by a command are set prior to invoking that command. Where Component Index = True, this means that the parameters consumed by each command MUST have been set for each Component.</t>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<t>NOTE: On systems that support only a single component, Set Component Index has no effect and can be omitted.</t>

<t>NOTE: <strong>A digest MUST always be set using Override Parameters.</strong></t>

<section anchor="template-compatibility-check"><name>Compatibility Check Template</name>

<t>The goal of the compatibility check template ensure that Recipients only install compatible images.</t>

<t>In this template all information is contained in the common sequence and the following sequence of commands is used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="uuid-identifiers"/>)</t>
  <t>Check Class Identifier condition (see <xref target="uuid-identifiers"/>)</t>
</list></t>

</section>
<section anchor="template-secure-boot"><name>Trusted Invocation Template</name>

<t>The goal of the Trusted Invocation template is to ensure that only authorized code is invoked; such as in Secure Boot or when a Trusted Application is loaded into a TEE.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>The system validation sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>Then, the run sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Run directive (see <xref target="suit-directive-run-sequence"/>)</t>
</list></t>

</section>
<section anchor="firmware-download-template"><name>Component Download Template</name>

<t>The goal of the Component Download template is to acquire and store an image.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI (see <xref target="suit-parameter-uri"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-install"><name>Install Template</name>

<t>The goal of the Install template is to use an image already stored in an identified component to copy into a second component.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: the Component Download operations are moved from the Payload Install sequence to the Payload Fetch sequence.</t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="suit-parameter-source-component"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-integrated-payload"><name>Integrated Payload Template</name>

<t>The goal of the Integrated Payload template is to install a payload that is included in the manifest envelope. It is identical to the Component Download template (<xref target="firmware-download-template"/>).</t>

<t>An implementer MAY choose to place a payload in the envelope of a manifest. The payload envelope key MUST be a string. The payload MUST be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way MAY be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4.</t>

<t>A distributor MAY choose to pre-fetch a payload and add it to the manifest envelope, using the URI as the key.</t>

</section>
<section anchor="template-load-ext"><name>Load from Nonvolatile Storage Template</name>

<t>The goal of the Load from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="a-b-template"><name>A/B Image Template</name>

<t>The goal of the A/B Image Template is to acquire, validate, and invoke one of two images, based on a test.</t>

<t>The following commands are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following commands are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

<t>If Trusted Invocation (<xref target="template-secure-boot"/>) is used, only the run sequence is added to this template, since the common sequence is populated by this template:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
    </list></t>
  <t>Run</t>
</list></t>

<t>NOTE: Any test can be used to select between images, Check Slot Condition is used in this template because it is a typical test for execute-in-place devices.</t>

</section>
</section>
<section anchor="metadata-structure"><name>Metadata Structure</name>

<t>The metadata for SUIT updates is composed of several primary constituent parts: the Envelope, Authentication Information, Manifest, and Severable Elements.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding-considerations"><name>Encoding Considerations</name>

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialized variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific values, as described in <xref target="iana"/>.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

<t>All CBOR maps in the Manifest and manifest envelope MUST be encoded with the canonical CBOR ordering as defined in <xref target="RFC8949"/>.</t>

</section>
<section anchor="envelope"><name>Envelope</name>

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="authentication-info"><name>Authenticated Manifests</name>

<t>The suit-authentication-wrapper contains a SUIT Digest Container (see <xref target="SUIT_Digest"/>) and one or more SUIT Authentication Blocks. The SUIT_Digest carries the result of computing the indicated hash algorithm over the suit-manifest element. A signing application MUST verify the suit-manifest element against the SUIT_Digest prior to signing. A SUIT Authentication Block is implemented as COSE_Mac_Tagged, COSE_Mac0_Tagged, COSE_Sign_Tagged or COSE_Sign1_Tagged structures with detached payloads, as described in RFC 8152 <xref target="RFC8152"/>.</t>

<t>For COSE_Sign and COSE_Sign1 a special signature structure (called Sig_structure) has to be created onto which the selected digital signature algorithm is applied to, see Section 4.4 of <xref target="RFC8152"/> for details. This specification requires Sig_structure to be populated as follows:
* The external_aad field MUST be set to a zero-length binary string (i.e. there is no external additional authenticated data).
* The payload field contains the SUIT_Digest wrapped in a bstr, as per the requirements in Section 4.4 of RFC 8152.
All other fields in the Sig_structure are populated as described in Section 4.4 of <xref target="RFC8152"/>.</t>

<t>Likewise, Section 6.3 of <xref target="RFC8152"/> describes the details for computing a MAC and the fields of the MAC_structure need to be populated. The rules for external_aad and the payload fields described in the paragraph above also apply to this structure.</t>

<t>The suit-authentication-wrapper MUST come before the suit-manifest element, regardless of canonical encoding of CBOR.</t>

<t>A SUIT_Envelope that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be a list containing only the SUIT_Digest.</t>

<t>The algorithms used in SUIT_Authentication are defined by the profiles declared in <xref target="I-D.moran-suit-mti"/>.</t>

</section>
<section anchor="manifest-structure"><name>Manifest</name>

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
</list></t>

<t>The Text section, or any Command Sequence of the Update Procedure (Image Fetch, Image Installation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable element. Severable elements are RECOMMENDED to implement. In particular, the human-readable text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version"><name>suit-manifest-version</name>

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED to implement.</t>

</section>
<section anchor="manifest-seqnr"><name>suit-manifest-sequence-number</name>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. Each Recipient MUST reject any manifest that has a sequence number lower than its current sequence number. For convenience, an implementer MAY use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED to implement.</t>

</section>
<section anchor="manifest-reference-uri"><name>suit-reference-uri</name>

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.</t>

</section>
<section anchor="manifest-digest-text"><name>suit-text</name>

<t>suit-text SHOULD be a severable element. suit-text is a map containing two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text</t>
  <t>SUIT_Component_Identifier =&gt; map</t>
</list></t>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text MUST also be present in suit-common (<xref target="manifest-common"/>).</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The YAML (<xref target="YAML"/>)-formatted document that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A free text representation of the component version</c>
</texttable>

<t>suit-text is OPTIONAL to implement.</t>

</section>
<section anchor="manifest-common"><name>suit-common</name>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is REQUIRED to implement.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED to implement. It is REQUIRED if the optimizations described in <xref target="minimal-sigs"/> will be used. Whenever a parameter or Try Each command is required by more than one Command Sequence, placing that parameter or command in suit-common-sequence results in a smaller encoding.</t>

<section anchor="suit-component-identifier"><name>SUIT_Component_Identifier</name>

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>A Component Identifier can be trivial, such as the simple array [h'00']. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path "/usr/bin/env" would encode to ['usr','bin','env'].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands"><name>SUIT_Command_Sequence</name>

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL to implement.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation. suit-validate is REQUIRED to implement.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL to implement.</t>
  <t>Run or Boot: suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: the "run" directive. suit-run is OPTIONAL to implement.</t>
</list></t>

<t>Goals 1,2 form the Update Procedure. Goals 4,5,6 form the Invocation Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true and any failure is treated as a failure of the update/load/invocation</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>Each condition is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>A <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided. This index is a numeric index into the Component Identifier table defined at the beginning of the manifest.</t>

<t>To facilitate optional conditions, a special directive, suit-directive-try-each (<xref target="suit-directive-try-each"/>), is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/invocation, but a parameter is provided to override this behavior. See suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>).</t>

</section>
<section anchor="reporting-policy"><name>Reporting Policy</name>

<t>To facilitate construction of Reports that describe the success or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>At the completion of each command, a Manifest Processor MAY forward information about the command to a Reporting Engine, which is responsible for reporting boot or update status to a third party. The Reporting Engine is entirely implementation-defined, the reporting policy simply facilitates the Reporting Engine's interface to the SUIT Manifest Processor.</t>

<t>The information elements provided to the Reporting Engine are:</t>

<t><list style="symbols">
  <t>The reporting policy</t>
  <t>The result of the command</t>
  <t>The values of parameters consumed by the command</t>
  <t>The system information consumed by the command</t>
</list></t>

<t>Together, these elements are called a Record. A group of Records is a Report.</t>

<t>If the component index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine MUST receive one Record for each Component, in the order expressed in the Components list or the component index array.</t>

<t>This specification does not define a particular format of Records or Reports. This specification only defines hints to the Reporting Engine for which Records it should aggregate into the Report. The Reporting Engine MAY choose to ignore these hints and apply its own policy instead.</t>

<t>When used in a Invocation Procedure, the report MAY form the basis of an attestation report. When used in an Update Process, the report MAY form the basis for one or more log entries.</t>

</section>
<section anchor="secparameters"><name>SUIT_Parameters</name>

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reuse of parameters between commands, thus reducing manifest size.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Component Slot</c>
      <c>suit-parameter-component-slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Run Args</c>
      <c>suit-parameter-run-args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately.</t>

<section anchor="cbor-pen-uuid-namespace-identifier"><name>CBOR PEN UUID Namespace Identifier</name>

<t>The CBOR PEN UUID Namespace Identifier is constructed as follows:</t>

<t>It uses the OID Namespace as a starting point, then uses the CBOR absolute OID encoding for the IANA PEN OID (1.3.6.1.4.1):</t>

<figure><artwork><![CDATA[
D8 6F                # tag(111)
   45                # bytes(5)
# Absolute OID encoding of IANA Private Enterprise Number:
#    1.3. 6. 1. 4. 1
      2B 06 01 04 01 # X.690 Clause 8.19
]]></artwork></figure>

<t>Computing a type 5 UUID from these produces:</t>

<figure><artwork><![CDATA[
NAMESPACE_CBOR_PEN = UUID5(NAMESPACE_OID, h'D86F452B06010401')
NAMESPACE_CBOR_PEN = 47fbdabb-f2e4-55f0-bb39-3620c2f6df4e
]]></artwork></figure>

</section>
<section anchor="uuid-identifiers"><name>Constructing UUIDs</name>

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient MAY match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They MUST NOT be used as assertions of identity. They are evaluated by identifier conditions (<xref target="identifier-conditions"/>).</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module's firmware has a proprietary update mechanism and doesn't support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:</t>

<figure><artwork><![CDATA[
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)
]]></artwork></figure>

<t>If the Vendor ID is a UUID, the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(Vendor ID, Class-Specific-Information)
]]></artwork></figure>

<t>If the Vendor ID is a CBOR PEN (see <xref target="suit-parameter-vendor-identifier"/>), the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(
    UUID5(NAMESPACE_CBOR_PEN, CBOR_PEN),
    Class-Specific-Information)
]]></artwork></figure>

<t>Class-specific-information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier"><name>suit-parameter-vendor-identifier</name>

<t>suit-parameter-vendor-identifier may be presented in one of two ways:</t>

<t><list style="symbols">
  <t>A Private Enterprise Number</t>
  <t>A byte string containing a UUID (<xref target="RFC4122"/>)</t>
</list></t>

<t>Private Enterprise Numbers are encoded as a relative OID, according to the definition in <xref target="I-D.ietf-cbor-tags-oid"/>. All PENs are relative to the IANA PEN: 1.3.6.1.4.1.</t>

</section>
<section anchor="suit-parameter-class-identifier"><name>suit-parameter-class-identifier</name>

<t>A RFC 4122 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier"><name>suit-parameter-device-identifier</name>

<t>A RFC 4122 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest"><name>suit-parameter-image-digest</name>

<t>A fingerprint computed over the component itself, encoded in the SUIT_Digest <xref target="SUIT_Digest"/> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size"><name>suit-parameter-image-size</name>

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-component-slot"><name>suit-parameter-component-slot</name>

<t>This parameter sets the slot index of a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its index into the component's storage area. This slot MUST be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-uri"><name>suit-parameter-uri</name>

<t>A URI Reference (<xref target="RFC3986"/>) from which to fetch a resource, encoded as a text string. CBOR Tag 32 is not used because the meaning of the text string is unambiguous in this context.</t>

</section>
<section anchor="suit-parameter-source-component"><name>suit-parameter-source-component</name>

<t>This parameter sets the source component to be used with either suit-directive-copy (<xref target="suit-directive-copy"/>) or with suit-directive-swap (<xref target="suit-directive-swap"/>). The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-run-args"><name>suit-parameter-run-args</name>

<t>This parameter contains an encoded set of arguments for suit-directive-run (<xref target="suit-directive-run"/>). The arguments MUST be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-fetch-arguments"><name>suit-parameter-fetch-arguments</name>

<t>An implementation-defined set of arguments to suit-directive-fetch (<xref target="suit-directive-fetch"/>). Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order"><name>suit-parameter-strict-order</name>

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure"><name>suit-parameter-soft-failure</name>

<t>When executing a command sequence inside suit-directive-try-each (<xref target="suit-directive-try-each"/>) or suit-directive-run-sequence (<xref target="suit-directive-run-sequence"/>) and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates. It MUST NOT be set outside of suit-directive-try-each or suit-directive-run-sequence.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom"><name>suit-parameter-custom</name>

<t>This parameter is an extension point for any proprietary, application specific conditions and directives. It MUST NOT be used in the common sequence. This effectively scopes each custom command to a particular Vendor Identifier/Class Identifier pair.</t>

</section>
</section>
<section anchor="suitcondition"><name>SUIT_Condition</name>

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Component Slot</c>
      <c>suit-condition-component-slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>Abort</c>
      <c>suit-condition-abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>Custom Condition</c>
      <c>suit-condition-custom</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition MUST report a result code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. A subsequent command or command sequence MAY continue executing if suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is set. If a condition requires additional information, this MUST be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it MUST report a failure. If a Recipient encounters an unknown condition, it MUST report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary definition by the author of a manifest processor. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions"><name>suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier</name>

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing Recipient MUST match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. Each component MAY match more than one identifier. Care is needed to ensure that manifests correctly identify their targets using these conditions. Using only a generic class ID for a device-specific firmware could result in matching devices that are not compatible.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers MUST be known to the Manifest Processor in order to evaluate compatibility.</t>

</section>
<section anchor="suit-condition-image-match"><name>suit-condition-image-match</name>

<t>Verify that the current component matches the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>) for the current component. The digest is verified against the digest specified in the Component's parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-component-slot"><name>suit-condition-component-slot</name>

<t>Verify that the slot index of the current component matches the slot index set in suit-parameter-component-slot (<xref target="suit-parameter-component-slot"/>). This condition allows a manifest to select between several images to match a target slot.</t>

</section>
<section anchor="suit-condition-abort"><name>suit-condition-abort</name>

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each (<xref target="suit-directive-try-each"/>).</t>

</section>
<section anchor="SUIT_Condition_Custom"><name>suit-condition-custom</name>

<t>suit-condition-custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="suitdirective"><name>SUIT_Directive</name>
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Run</c>
      <c>suit-directive-run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it MUST report a result code. If the Directive reports failure, then the current Command Sequence MUST be terminated.</t>

<section anchor="suit-directive-set-component-index"><name>suit-directive-set-component-index</name>

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be one of three types:</t>

<t><list style="numbers">
  <t>An unsigned integer (REQUIRED to implement in parser)</t>
  <t>A boolean (REQUIRED to implement in parser ONLY IF 2 or more components supported)</t>
  <t>An array of unsigned integers (REQUIRED to implement in parser ONLY IF 3 or more components supported)</t>
</list></t>

<t>If the following commands apply to ONE component, an unsigned integer index into the component list is used. If the following commands apply to ALL components, then the boolean value "True" is used instead of an index. If the following commands apply to more than one, but not all components, then an array of unsigned integer indices into the component list is used.
See <xref target="index-true"/> for more details.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-try-each"><name>suit-directive-try-each</name>

<t>This command runs several SUIT_Command_Sequence instances, one after another, in a strict order. Use this command to implement a "try/catch-try/catch" sequence. Manifest processors MAY implement this command.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters"><name>suit-directive-override-parameters</name>

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch"><name>suit-directive-fetch</name>

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more payloads. suit-directive-fetch retrieves each component listed in component-index. If component-index is True, instead of an integer, then all current manifest components are fetched. If component-index is an array, then all listed components are fetched.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

</section>
<section anchor="suit-directive-copy"><name>suit-directive-copy</name>

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. As described in <xref target="index-true"/> component index may be a single integer, a list of integers, or True. suit-directive-copy retrieves each component specified by the current component-index, respectively.</t>

<t>suit-directive-copy reads its source from suit-parameter-source-component (<xref target="suit-parameter-source-component"/>).</t>

<t>If either the source component parameter or the source component itself is absent, this command fails.</t>

</section>
<section anchor="suit-directive-run"><name>suit-directive-run</name>

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-run through suit-parameter-run-arguments (<xref target="suit-parameter-run-args"/>) and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-run-sequence"><name>suit-directive-run-sequence</name>

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap"><name>suit-directive-swap</name>

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. As with suit-directive-copy, if the source component is missing, this command fails.</t>

<t>If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they MUST be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="integrity-checks"><name>Integrity Check Values</name>

<t>When the Text section or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope. The keys for the envelope elements have the same values as the keys for the manifest elements.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="severable-fields"><name>Severable Elements</name>

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or "Severed" without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD NOT be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists"><name>Access Control Lists</name>

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or Component Identifier prefixes to the listed identities or identity groups. Any identity can verify an image digest, but fetching into or fetching from a Component Identifier requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the Component Identifier or Component Identifier prefix that an identity can use, and also lists the commands and parameters that the identity can use in combination with that Component Identifier.</t>

</section>
<section anchor="SUIT_Digest"><name>SUIT Digest Container</name>

<t>The SUIT digest is a CBOR List containing two elements: an algorithm identifier and a bstr containing the bytes of the digest. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The values of the algorithm identifier are defined by <xref target="I-D.ietf-cose-hash-algs"/>. The following algorithms MUST be implemented by all Manifest Processors:</t>

<t><list style="symbols">
  <t>SHA-256 (-16)</t>
</list></t>

<t>The following algorithms MAY be implemented in a Manifest Processor:</t>

<t><list style="symbols">
  <t>SHAKE128 (-18)</t>
  <t>SHA-384 (-43)</t>
  <t>SHA-512 (-44)</t>
  <t>SHAKE256 (-45)</t>
</list></t>

</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate CBOR tag 107 in the CBOR Tags registry for the SUIT Envelope.</t>
  <t>allocate CBOR tag 1070 in the CBOR Tags registry for the SUIT Manifest.</t>
  <t>allocate media type application/suit-envelope in the Media Types registry.</t>
  <t>setup several registries as described below.</t>
</list></t>

<t>IANA is requested to setup a registry for SUIT manifests.
Several registries defined in the subsections below need to be created.</t>

<t>For each registry, values 0-23 are Standards Action, 24-255 are IETF Review, 256-65535 are Expert Review, and 65536 or greater are First Come First Served.</t>

<t>Negative values -23 to 0 are Experimental Use, -24 and lower are Private Use.</t>

<section anchor="suit-commands"><name>SUIT Commands</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>2</c>
      <c>Class Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>3</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>12</c>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>13</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>14</c>
      <c>Abort</c>
      <c>&#160;</c>
      <c>15</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>16</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>17</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>18</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>21</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>22</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>23</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>24</c>
      <c>Device Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>25</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>31</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>32</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>33</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

</section>
<section anchor="suit-parameters"><name>SUIT Parameters</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>2</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>3</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>12</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>13</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>14</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>18</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>21</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>22</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>23</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>24</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

</section>
<section anchor="suit-text-values"><name>SUIT Text Values</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Manifest Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Update Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Manifest JSON Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Manifest YAML Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-component-text-values"><name>Â SUIT Component Text Values</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Model Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Vendor Domain</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Model Info</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>5</c>
      <c>Component Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>6</c>
      <c>Component Version</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>7</c>
      <c>Component Version Required</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Ãyvind RÃ¸nningstad</t>
  <t>Frank Audun KvamtrÃ¸</t>
  <t>Krzysztof ChruÅciÅski</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC4122' target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author fullname='P. Leach' initials='P.' surname='Leach'><organization/></author>
<author fullname='M. Mealling' initials='M.' surname='Mealling'><organization/></author>
<author fullname='R. Salz' initials='R.' surname='Salz'><organization/></author>
<date month='July' year='2005'/>
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC3986' target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'><organization/></author>
<author fullname='R. Fielding' initials='R.' surname='Fielding'><organization/></author>
<author fullname='L. Masinter' initials='L.' surname='Masinter'><organization/></author>
<date month='January' year='2005'/>
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference anchor='RFC8949' target='https://www.rfc-editor.org/info/rfc8949'>
<front>
<title>Concise Binary Object Representation (CBOR)</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='P. Hoffman' initials='P.' surname='Hoffman'><organization/></author>
<date month='December' year='2020'/>
<abstract><t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t><t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t></abstract>
</front>
<seriesInfo name='STD' value='94'/>
<seriesInfo name='RFC' value='8949'/>
<seriesInfo name='DOI' value='10.17487/RFC8949'/>
</reference>



<reference anchor='RFC9019' target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>



<reference anchor='RFC9124' target='https://www.rfc-editor.org/info/rfc9124'>
<front>
<title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<date month='January' year='2022'/>
<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t><t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9124'/>
<seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>


<reference anchor='I-D.moran-suit-mti'>
   <front>
      <title>Mandatory-to-Implement Algorithms for Creators and Consumers of Software Update for the Internet of Things manifests</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   This document specifies algorithm profiles for SUIT manifest parsers
   and authors to ensure better interoperability.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-moran-suit-mti-00'/>
   <format target='https://www.ietf.org/archive/id/draft-moran-suit-mti-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-cose-hash-algs'>
   <front>
      <title>CBOR Object Signing and Encryption (COSE): Hash Algorithms</title>
      <author fullname='Jim Schaad'>
	 <organization>August Cellars</organization>
      </author>
      <date day='14' month='September' year='2020'/>
      <abstract>
	 <t>   The CBOR Object Signing and Encryption (COSE) syntax
   [I-D.ietf-cose-rfc8152bis-struct] does not define any direct methods
   for using hash algorithms.  There are, however, circumstances where
   hash algorithms are used, such as indirect signatures where the hash
   of one or more contents are signed, and X.509 certificate or other
   object identification by the use of a fingerprint.  This document
   defines a set of hash algorithms that are identified by COSE
   Algorithm Identifiers.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cose-hash-algs-09'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cose-hash-algs-09.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-teep-architecture'>
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname='Mingliang Pei'>
	 <organization>Broadcom</organization>
      </author>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Dave Thaler'>
	 <organization>Microsoft</organization>
      </author>
      <author fullname='David Wheeler'>
	 <organization>Amazon</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-18'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-teep-architecture-18.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-cbor-tags-oid'>
   <front>
      <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
      <author fullname='Carsten Bormann'>
	 <organization>UniversitÃ¤t Bremen TZI</organization>
      </author>
      <date day='21' month='May' year='2021'/>
      <abstract>
	 <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.

 This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cbor-tags-oid-08'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Firmware Encryption with SUIT Manifests</title>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   This document specifies a firmware update mechanism where the
   firmware image is encrypted.  Firmware encryption uses the IETF SUIT
   manifest with key establishment provided by hybrid public-key
   encryption (HPKE) and AES Key Wrap (AES-KW).  HPKE uses public key
   cryptography while AES-KW uses a pre-shared key-encryption key.
   Encryption of the firmware image is accomplished with convential
   symmetric key cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-06'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-firmware-encryption-06.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-update-management'>
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to IoT
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-update-management-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-update-management-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-trust-domains'>
   <front>
      <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   (as defined in [I-D.ietf-suit-manifest]) for use in deployments with
   multiple trust domains.  A device has more than one trust domain when
   it uses different trust anchors for different purposes or components
   in the context of firmware update.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-trust-domains-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-trust-domains-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-report'>
   <front>
      <title>Secure Reporting of Update Status</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz'>
	 <organization>Fraunhofer SIT</organization>
      </author>
      <date day='12' month='January' year='2022'/>
      <abstract>
	 <t>   The Software Update for the Internet of Things (SUIT) manifest
   provides a way for many different update and boot workflows to be
   described by a common format.  However, this does not provide a
   feedback mechanism for developers in the event that an update or boot
   fails.

   This specification describes a lightweight feedback mechanism that
   allows a developer in possession of a manifest to reconstruct the
   decisions made and actions performed by a manifest processor.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-report-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-report-01.txt' type='TXT'/>
</reference>



<reference anchor='RFC7228' target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='M. Ersue' initials='M.' surname='Ersue'><organization/></author>
<author fullname='A. Keranen' initials='A.' surname='Keranen'><organization/></author>
<date month='May' year='2014'/>
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>


<reference anchor="YAML" target="https://yaml.org/">
  <front>
    <title>YAML Ain't Markup Language</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<t>To be valid, the following CDDL MUST have the COSE CDDL appended to it. The COSE CDDL can be obtained by following the directions in <xref target="RFC8152"/>, Section 1.3.</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Envelope_Tagged = #6.107(SUIT_Envelope)
SUIT_Envelope = {
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * SUIT_Integrated_Payload,
  * $$SUIT_Envelope_Extensions,
}

SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]

SUIT_Digest = [
  suit-digest-algorithm-id : suit-cose-hash-algs,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

SUIT_Severable_Manifest_Members = (
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  * $$SUIT_severable-members-extensions,
)

SUIT_Integrated_Payload = (suit-integrated-payload-key => bstr)
suit-integrated-payload-key = tstr

SUIT_Manifest_Tagged = #6.1070(SUIT_Manifest)

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Unseverable_Members,
    SUIT_Severable_Members_Choice,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-run => bstr .cbor SUIT_Command_Sequence,
  * $$unseverable-manifest-member-extensions,
)

SUIT_Severable_Members_Choice = (
  ? suit-payload-fetch => SUIT_Digest / 
      bstr .cbor SUIT_Command_Sequence,
  ? suit-install => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
  ? suit-text => SUIT_Digest / bstr .cbor SUIT_Text_Map,
  * $$severable-manifest-members-choice-extensions
)

SUIT_Common = {
    ? suit-components             => SUIT_Components,
    ? suit-common-sequence        => bstr .cbor SUIT_Common_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Components           = [ + SUIT_Component_Identifier ]

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
    * $$SUIT_Dependency-extensions,
}

;REQUIRED to implement:
suit-cose-hash-algs /= cose-alg-sha-256

;OPTIONAL to implement:
suit-cose-hash-algs /= cose-alg-shake128
suit-cose-hash-algs /= cose-alg-sha-384
suit-cose-hash-algs /= cose-alg-sha-512
suit-cose-hash-algs /= cose-alg-shake256

SUIT_Component_Identifier =  [* bstr]

SUIT_Common_Sequence = [
    + ( SUIT_Condition // SUIT_Common_Commands )
]

SUIT_Common_Commands //= (suit-directive-set-component-index,  IndexArg)
SUIT_Common_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Common_Sequence)
SUIT_Common_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument_Common)
SUIT_Common_Commands //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})

IndexArg /= uint
IndexArg /= bool
IndexArg /= [+uint]


SUIT_Directive_Try_Each_Argument_Common = [
    2* bstr .cbor SUIT_Common_Sequence,
    ?nil
]

SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-component-slot,    SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-abort,             SUIT_Rep_Policy)

SUIT_Directive //= (suit-directive-set-component-index,  IndexArg)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-copy,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-swap,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-run,               SUIT_Rep_Policy)

SUIT_Directive_Try_Each_Argument = [
    2* bstr .cbor SUIT_Command_Sequence,
    ?nil
]

SUIT_Rep_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

SUIT_Parameters //= (suit-parameter-vendor-identifier =>
    (RFC4122_UUID / cbor-pen))
cbor-pen = #6.112(bstr)

SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-component-slot => uint)

SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-run-args => bstr)

SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)

SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)

RFC4122_UUID = bstr .size 16

SUIT_Text_Map = {
    SUIT_Text_Keys,
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    }
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

suit-authentication-wrapper = 2
suit-manifest = 3

;REQUIRED to implement:
cose-alg-sha-256 = -16

;OPTIONAL to implement:
cose-alg-shake128 = -18
cose-alg-sha-384 = -43
cose-alg-sha-512 = -44
cose-alg-shake256 = -45

;Unseverable, recipient-necessary
suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-validate = 7
suit-load = 8
suit-run = 9
;Severable, recipient-necessary
suit-payload-fetch = 16
suit-install = 17
;Severable, recipient-unnecessary
suit-text = 23

suit-components = 2
suit-common-sequence = 4

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-component-slot    = 5

suit-condition-abort                    = 14
suit-condition-device-identifier        = 24

suit-directive-set-component-index      = 12
suit-directive-try-each                 = 15
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-swap                     = 31
suit-directive-run-sequence             = 32

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-component-slot    = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14

suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-run-args          = 23

suit-parameter-device-identifier = 24

suit-parameter-custom = nint

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
]]></sourcecode></figure>

</section>
<section anchor="examples"><name>B. Examples</name>

<t>The following examples demonstrate a small subset of the functionality of the manifest. Even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<t>Note that reporting policies are declared for each non-flow-control command in these examples. The reporting policies used in the examples are described in the following tables.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Label</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Rec-Pass</c>
      <c>suit-send-record-on-failure</c>
      <c>Rec-Fail</c>
      <c>suit-send-sysinfo-success</c>
      <c>Sys-Pass</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Sys-Fail</c>
</texttable>

<texttable>
      <ttcol align='left'>Command</ttcol>
      <ttcol align='left'>Sys-Fail</ttcol>
      <ttcol align='left'>Sys-Pass</ttcol>
      <ttcol align='left'>Rec-Fail</ttcol>
      <ttcol align='left'>Rec-Pass</ttcol>
      <c>suit-condition-vendor-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-class-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-image-match</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-component-slot</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>1</c>
      <c>suit-directive-fetch</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-copy</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-run</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
</texttable>

<section anchor="example-0-secure-boot"><name>Example 0: Secure Boot</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
</list></t>

<t>It also serves as the minimum example.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'6658ea560262696dd1f13b782239a064da7c6c5cbaf52fded428a6fc83c7e5af'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'01d9cbf51b1ccadf839ec867da85735118
ba4c1b513f5df60583e8dd7f8ce4274cd2e2a0f70f8832bfea63983172e77a951e9a36
e74cada19321b903a097e4e7'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:0,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / validate / 7:<<[
                / condition-image-match / 3,15
            ]>>,
            / run / 9:<<[
                / directive-run / 23,2
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  161</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af035871a50101020003585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f0943821702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  237</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af584ad28443a10126a0f6584001d9cb
f51b1ccadf839ec867da85735118ba4c1b513f5df60583e8dd7f8ce4274c
d2e2a0f70f8832bfea63983172e77a951e9a36e74cada19321b903a097e4
e7035871a50101020003585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f0943821702
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload"><name>Example 1: Simultaneous Download and Installation of Payload</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Simultaneous download and installation of payload. No secure boot is present in this example to demonstrate a download-only manifest.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'176653ec03837a8d32b1eb0b91ea5e8a2256bc2e7c02e5bb7f45f431fa926f3e'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'a78dbd584dbdea66ab024179dac2f4b244
940e9dfe1337bb833e3e3df2562a0fceb77e64980e0ddcc24b8abb63b78aad9ad42fd2
44b684dd39859f84740239e8'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:1,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / validate / 7:<<[
                / condition-image-match / 3,15
            ]>>,
            / install / 17:<<[
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  196</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820176653ec03837a8d32b1eb0b91ea5e8a22
56bc2e7c02e5bb7f45f431fa926f3e035894a50101020103585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f1158258613a115781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  272</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820176653ec03837a8d32b1eb0b91ea5e8a22
56bc2e7c02e5bb7f45f431fa926f3e584ad28443a10126a0f65840a78dbd
584dbdea66ab024179dac2f4b244940e9dfe1337bb833e3e3df2562a0fce
b77e64980e0ddcc24b8abb63b78aad9ad42fd244b684dd39859f84740239
e8035894a50101020103585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f1158258613a11578
1b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502
030f
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-secure-boot-severed-fields"><name>Example 2: Simultaneous Download, Installation, Secure Boot, Severed Fields</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>This example also demonstrates severable elements (<xref target="ovr-severable"/>), and text (<xref target="manifest-digest-text"/>).</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'a85153c05f709e681877ee23c0de3e2f92bcc66c1ad6f41b39157ac7cb6a5a62'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'4ba6e9c4bdd65212e2e4775b7f5bb32faf
14209f88d9f8b198e21c338770aa542dde07e31fa17ca9dadee4d94c43dfba81819d35
88d7fde5eff010b8c7c89277'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:2,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / validate / 7:<<[
                / condition-image-match / 3,15
            ]>>,
            / run / 9:<<[
                / directive-run / 23,2
            ]>>,
            / install / 17:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'3ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d2'
            ],
            / text / 23:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'2bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918'
            ],
        }>>,
        / install / 17:<<[
            / directive-set-parameters / 19,{
                / uri /
21:'http://example.com/very/long/path/to/file/file.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ]>>,
        / text / 13:<<{
            [h'00']:{
                    / vendor-domain / 3:'arm.com',
                    / component-description / 5:'This component is a
demonstration. The digest is a sample pattern, not a real one.',
                }
        }>>,
    })
]]></artwork></figure>

<t>Total size of the Envelope without COSE authentication object or Severable Elements:  235</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820a85153c05f709e681877ee23c0de3e2f92
bcc66c1ad6f41b39157ac7cb6a5a620358bba70101020203585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f094382170211822f58203ee96dc79641970ae46b929ccf0b
72ba9536dd846020dbdc9f949d84ea0e18d217822f58202bfc4d0cc6680b
e7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918
]]></artwork></figure>
<t>Total size of the Envelope with COSE authentication object but without Severable Elements:  311</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820a85153c05f709e681877ee23c0de3e2f92
bcc66c1ad6f41b39157ac7cb6a5a62584ad28443a10126a0f658404ba6e9
c4bdd65212e2e4775b7f5bb32faf14209f88d9f8b198e21c338770aa542d
de07e31fa17ca9dadee4d94c43dfba81819d3588d7fde5eff010b8c7c892
770358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f094382170211822f
58203ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc9f949d84
ea0e18d217822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf918
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object and Severable Elements:  894</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba4025873825824822f5820a85153c05f709e681877ee23c0de3e2f92
bcc66c1ad6f41b39157ac7cb6a5a62584ad28443a10126a0f658404ba6e9
c4bdd65212e2e4775b7f5bb32faf14209f88d9f8b198e21c338770aa542d
de07e31fa17ca9dadee4d94c43dfba81819d3588d7fde5eff010b8c7c892
770358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f094382170211822f
58203ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc9f949d84
ea0e18d217822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf9180d590204a20179019d2323204578616d706c65
20323a2053696d756c74616e656f757320446f776e6c6f61642c20496e73
74616c6c6174696f6e2c2053656375726520426f6f742c20536576657265
64204669656c64730a0a2020202054686973206578616d706c6520636f76
6572732074686520666f6c6c6f77696e672074656d706c617465733a0a20
2020200a202020202a20436f6d7061746962696c69747920436865636b20
287b7b74656d706c6174652d636f6d7061746962696c6974792d63686563
6b7d7d290a202020202a2053656375726520426f6f7420287b7b74656d70
6c6174652d7365637572652d626f6f747d7d290a202020202a204669726d
7761726520446f776e6c6f616420287b7b6669726d776172652d646f776e
6c6f61642d74656d706c6174657d7d290a202020200a2020202054686973
206578616d706c6520616c736f2064656d6f6e7374726174657320736576
657261626c6520656c656d656e747320287b7b6f76722d73657665726162
6c657d7d292c20616e64207465787420287b7b6d616e69666573742d6469
676573742d746578747d7d292e814100a2036761726d2e636f6d05785254
68697320636f6d706f6e656e7420697320612064656d6f6e737472617469
6f6e2e205468652064696765737420697320612073616d706c6520706174
7465726e2c206e6f742061207265616c206f6e652e11583c8613a1157832
687474703a2f2f6578616d706c652e636f6d2f766572792f6c6f6e672f70
6174682f746f2f66696c652f66696c652e62696e1502030f
]]></artwork></figure>

</section>
<section anchor="example-3-ab-images"><name>Example 3: A/B images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>A/B Image Template (<xref target="a-b-template"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'c98d9240343ee1ac12ba833c04fb9006e70f62c7e4c36edb0b2a356d59c2f86c'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'451b3099c7914ef4c54b633688471b8d0f
940d09eeca41c159927a9f044bddec536f83da5f1b1047bc415be013d71524ad82e4ac
792a61f93dbdc875a7a6adeb'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:3,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    } ,
                    / directive-try-each / 15,[
                        <<[
                            / directive-override-parameters / 20,{
                                / slot / 5:0,
                            } ,
                            / condition-component-slot / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<<[
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                                ]>>,
                                / image-size / 14:34768,
                            }
                        ]>> ,
                        <<[
                            / directive-override-parameters / 20,{
                                / slot / 5:1,
                            } ,
                            / condition-component-slot / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<<[
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                                ]>>,
                                / image-size / 14:76834,
                            }
                        ]>>
                    ] ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / validate / 7:<<[
                / condition-image-match / 3,15
            ]>>,
            / install / 17:<<[
                / directive-try-each / 15,[
                    <<[
                        / directive-set-parameters / 19,{
                            / slot / 5:0,
                        } ,
                        / condition-component-slot / 5,5 ,
                        / directive-set-parameters / 19,{
                            / uri / 21:'http://example.com/file1.bin',
                        }
                    ]>> ,
                    <<[
                        / directive-set-parameters / 19,{
                            / slot / 5:1,
                        } ,
                        / condition-component-slot / 5,5 ,
                        / directive-set-parameters / 19,{
                            / uri / 21:'http://example.com/file2.bin',
                        }
                    ]>>
                ] ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  320</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820c98d9240343ee1ac12ba833c04fb9006e7
0f62c7e4c36edb0b2a356d59c2f86c0359010fa5010102030358a4a20281
81410004589b8814a20150fa6b4a53d5ad5fdfbe9de663e4d41ffe025014
92af1425695e48bf429b2d51f2ab450f8258348614a10500050514a20358
24822f582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d058368614a10501050514a2035824822f582001
23456789abcdeffedcba987654321000112233445566778899aabbccddee
ff0e1a00012c22010f020f074382030f11585b860f8258288613a1050005
0513a115781c687474703a2f2f6578616d706c652e636f6d2f66696c6531
2e62696e58288613a10501050513a115781c687474703a2f2f6578616d70
6c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  396</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820c98d9240343ee1ac12ba833c04fb9006e7
0f62c7e4c36edb0b2a356d59c2f86c584ad28443a10126a0f65840451b30
99c7914ef4c54b633688471b8d0f940d09eeca41c159927a9f044bddec53
6f83da5f1b1047bc415be013d71524ad82e4ac792a61f93dbdc875a7a6ad
eb0359010fa5010102030358a4a2028181410004589b8814a20150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450f8258348614a10500050514a2035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0583686
14a10501050514a2035824822f58200123456789abcdeffedcba98765432
1000112233445566778899aabbccddeeff0e1a00012c22010f020f074382
030f11585b860f8258288613a10500050513a115781c687474703a2f2f65
78616d706c652e636f6d2f66696c65312e62696e58288613a10501050513
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

</section>
<section anchor="example-4-load-from-external-storage"><name>Example 4: Load from External Storage</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>Install (<xref target="template-install"/>)</t>
  <t>Load (<xref target="template-load-ext"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'601ebc1bb2e12cbaf408b1bca72fae0d9987498acfa16130ce4cf5cc9ea74c7c'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'2e263599b0f3613fd3feb0cec1ff55c6b3
7c521339ef2680dc63de3a5cdfb0e3f44237313e1c17c35f7fa84af82234f50cea551c
fdd8179a40dac5136167cd5e'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:4,
            / common / 3:<<{
                / components / 2:[
                    [h'00'] ,
                    [h'02'] ,
                    [h'01']
                ],
                / common-sequence / 4:<<[
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / validate / 7:<<[
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15
            ]>>,
            / load / 8:<<[
                / directive-set-component-index / 12,2 ,
                / directive-set-parameters / 19,{
                    / image-digest / 3:<<[
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ]>>,
                    / image-size / 14:76834,
                    / source-component / 22:0 / [h'00'] /,
                    / compression-info / 19:<<{
                        / compression-algorithm / 1:1 / "zlib" /,
                    }>>,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ]>>,
            / run / 9:<<[
                / directive-set-component-index / 12,2 ,
                / directive-run / 23,2
            ]>>,
            / payload-fetch / 16:<<[
                / directive-set-component-index / 12,1 ,
                / directive-set-parameters / 19,{
                    / image-digest / 3:<<[
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ]>>,
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
            / install / 17:<<[
                / directive-set-component-index / 12,0 ,
                / directive-set-parameters / 19,{
                    / source-component / 22:1 / [h'02'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  332</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820601ebc1bb2e12cbaf408b1bca72fae0d99
87498acfa16130ce4cf5cc9ea74c7c0359011ba801010204035867a20283
814100814102814101045858880c0014a40150fa6b4a53d5ad5fdfbe9de6
63e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820
00112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100e1987d0010f020f0745840c00030f08583d880c0213a4035824822f
58200123456789abcdeffedcba987654321000112233445566778899aabb
ccddeeff0e1a00012c221343a1010116001602030f0945840c0217021058
4e880c0113a2035824822f582000112233445566778899aabbccddeeff01
23456789abcdeffedcba987654321015781b687474703a2f2f6578616d70
6c652e636f6d2f66696c652e62696e1502030f114b880c0013a116011602
030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  408</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820601ebc1bb2e12cbaf408b1bca72fae0d99
87498acfa16130ce4cf5cc9ea74c7c584ad28443a10126a0f658402e2635
99b0f3613fd3feb0cec1ff55c6b37c521339ef2680dc63de3a5cdfb0e3f4
4237313e1c17c35f7fa84af82234f50cea551cfdd8179a40dac5136167cd
5e0359011ba801010204035867a20283814100814102814101045858880c
0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e
48bf429b2d51f2ab45035824822f582000112233445566778899aabbccdd
eeff0123456789abcdeffedcba98765432100e1987d0010f020f0745840c
00030f08583d880c0213a4035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c221343a101
0116001602030f0945840c02170210584e880c0113a2035824822f582000
112233445566778899aabbccddeeff0123456789abcdeffedcba98765432
1015781b687474703a2f2f6578616d706c652e636f6d2f66696c652e6269
6e1502030f114b880c0013a116011602030f
]]></artwork></figure>

</section>
<section anchor="example-5-two-images"><name>Example 5: Two Images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Furthermore, it shows using these templates with two images.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'a4c6d5f5c3800c19c4af55aacc1c2dc6e37e2bf10b2aab335f70226961e310d3'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'91d95d3bb2eaae7b31ff11f4761056e491
bcb07470119f9c69388982c3238eabfcb477ec7887f36c31e7d957fe8830b3ae8b9d7d
71372de2e71a9a3b67444c4a'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:5,
            / common / 3:<<{
                / components / 2:[
                    [h'00'] ,
                    [h'01']
                ],
                / common-sequence / 4:<<[
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15 ,
                    / directive-set-component-index / 12,1 ,
                    / directive-override-parameters / 20,{
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                        ]>>,
                        / image-size / 14:76834,
                    }
                ]>>,
            }>>,
            / validate / 7:<<[
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / condition-image-match / 3,15
            ]>>,
            / run / 9:<<[
                / directive-set-component-index / 12,0 ,
                / directive-run / 23,2
            ]>>,
            / install / 17:<<[
                / directive-set-component-index / 12,0 ,
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file1.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file2.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  306</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820a4c6d5f5c3800c19c4af55aacc1c2dc6e3
7e2bf10b2aab335f70226961e310d303590101a601010205035895a20282
8141008141010458898c0c0014a40150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820001122
33445566778899aabbccddeeff0123456789abcdeffedcba98765432100e
1987d0010f020f0c0114a2035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c220749880c
00030f0c01030f0945840c00170211584f900c0013a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65312e62696e1502030f0c0113
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  382</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820a4c6d5f5c3800c19c4af55aacc1c2dc6e3
7e2bf10b2aab335f70226961e310d3584ad28443a10126a0f6584091d95d
3bb2eaae7b31ff11f4761056e491bcb07470119f9c69388982c3238eabfc
b477ec7887f36c31e7d957fe8830b3ae8b9d7d71372de2e71a9a3b67444c
4a03590101a601010205035895a202828141008141010458898c0c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab45035824822f582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d0010f020f0c0114a2035824
822f58200123456789abcdeffedcba987654321000112233445566778899
aabbccddeeff0e1a00012c220749880c00030f0c01030f0945840c001702
11584f900c0013a115781c687474703a2f2f6578616d706c652e636f6d2f
66696c65312e62696e1502030f0c0113a115781c687474703a2f2f657861
6d706c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

</section>
</section>
<section anchor="design-rationale"><name>C. Design Rational</name>

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted invocation operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted invocation of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency's commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope"><name>C.1 Design Rationale: Envelope</name>

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of Severable Elements (<xref target="severable-fields"/>)</t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers"><name>C.2 Byte String Wrappers</name>

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the common sequence. The common sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>
<section anchor="implementation-matrix"><name>D. Implementation Conformance Matrix</name>

<t>This section summarizes the functionality a minimal manifest processor
implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Class Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Device Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>OPTIONAL</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>REQUIRED</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>Abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>OPTIONAL</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>REQUIRED if more than one component</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>OPTIONAL</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>REQUIRED</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>REQUIRED for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>OPTIONAL</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>REQUIRED for Bootloader</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>OPTIONAL</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>REQUIRED</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>REQUIRED</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>REQUIRED</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>REQUIRED</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>REQUIRED for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>OPTIONAL</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>OPTIONAL</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>OPTIONAL</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>OPTIONAL</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>OPTIONAL</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c>OPTIONAL</c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

