<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-21" category="std">

  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>
    <author initials="Ø." surname="Rønningstad" fullname="Øyvind Rønningstad">
      <organization>Nordic Semiconductor</organization>
      <address>
        <email>oyvind.ronningstad@gmail.com</email>
      </address>
    </author>

    <date year="2022" month="November" day="09"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about code/data obtained by a recipient (chiefly
the firmware for an IoT device), where to find the that code/data, the
devices to which it applies, and cryptographic information protecting
the manifest. Software updates and Trusted Invocation both tend to use
sequences of common operations, so the manifest encodes those sequences
of operations, rather than declaring the metadata.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata describing one or more code or data payloads and how to:</t>

<t><list style="symbols">
  <t>Obtain any dependencies</t>
  <t>Obtain the payload(s)</t>
  <t>Install them</t>
  <t>Verify them</t>
  <t>Load them into memory</t>
  <t>Invoke them</t>
</list></t>

<t>This specification defines the SUIT manifest format and it is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="RFC9124"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>a Firmware Author to reason about releasing a firmware.</t>
  <t>a Network Operator to reason about compatibility of a firmware.</t>
  <t>a Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>a Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>a device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>a device to reason about the applicability of a firmware.</t>
  <t>a device to reason about the installation of a firmware.</t>
  <t>a device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="RFC9019"/> and the threats, requirements, and user stories in <xref target="RFC9124"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or Trusted Invocation are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In this document, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the language is tailored to software updates and Trusted Invocation.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and Trusted Invocation use cases, there is nothing in the SUIT Information Model (<xref target="RFC9124"/>) that restricts its use to only those use cases. Other use cases include the management of trusted applications (TAs) in a Trusted Execution Environment (TEE), as discussed in <xref target="I-D.ietf-teep-architecture"/>.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient's storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document"><name>How to use this Document</name>

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rational is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> gives a summarize of the mandatory-to-implement features of this specification.</t>

<t>This specification covers the core features of SUIT. Additional specifications describe functionality of advanced use cases, such as:</t>

<t><list style="symbols">
  <t>Firmware Encryption is covered in <xref target="I-D.ietf-suit-firmware-encryption"/></t>
  <t>Update Management is covered in <xref target="I-D.ietf-suit-update-management"/></t>
  <t>Features, such as dependencies, key delegation, multiple processors, required by the use of multiple trust domains are covered in <xref target="I-D.ietf-suit-trust-domains"/></t>
  <t>Secure reporting of the update status is covered in <xref target="I-D.ietf-suit-report"/></t>
  <t>Compression of firmware images</t>
</list></t>

</section>
<section anchor="background"><name>Background</name>

<t>Distributing software updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="RFC9019"/>. The security aspects are described in <xref target="RFC9124"/>.</t>

<section anchor="iot-firmware-update-constraints"><name>IoT Firmware Update Constraints</name>

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivered to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model"><name>SUIT Workflow Model</name>

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Invocation Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
  <t>Verify image(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and invoking images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Invoke image(s).</t>
</list></t>

<t>If verification and invocation is implemented in a bootloader, then the bootloader MUST also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader may add its own authentication, e.g. a Message Authentication Code (MAC), to the manifest in order to prevent further verifications.</t>

</section>
</section>
<section anchor="metadata-structure-overview"><name>Metadata Structure Overview</name>

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest..</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, such as affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable elements.</t>
    </list></t>
  <t>Severable elements (see <xref target="ovr-severable"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| Integrated Payloads     |          | Structure Version            |
+-------------------------+          | Sequence Number              |
                                     | Reference to Full Manifest   |
                               +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Components IDs          |      +-> +-----------------------+
| Common Command Sequence ---------> | Command Sequence      |
+-------------------------+          +-----------------------+
                                     | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope"><name>Envelope</name>

<t>The SUIT Envelope is a container that encloses the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that would add substantial complexity with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-auth"><name>Authentication Block</name>

<t>The Authentication Block contains a bstr-wrapped SUIT Digest Container, see <xref target="SUIT_Digest"/>, and one or more <xref target="RFC8152"/> CBOR Object Signing and Encryption (COSE) authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>Each of these objects is used in detached payload mode. The payload is the bstr-wrapped SUIT_Digest.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest"><name>Manifest</name>

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical"><name>Critical Metadata</name>

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which manifest is newest and whether the structure version is supported. It also MAY provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, and <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common"><name>Common</name>

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of two parts: a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence MUST NOT have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/> for more detail.</t>

</section>
<section anchor="ovr-commands"><name>Command Sequences</name>

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Payload Fetch, Payload Installation and, System Validation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Invocation Command Sequences are: System Validation, Image Loading, and Image Invocation. An Invocation Procedure is the complete set of each Invocation Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command (dependencies are not defined in this specification).</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity"><name>Integrity Check Values</name>

<t>To enable <xref target="ovr-severable"/>, there needs to be a mechanism to verify integrity of any metadata outside the manifest. Integrity Check Values are used to verify the integrity of metadata that is not contained in the manifest. This MAY include Severable Command Sequences, or Text data. Integrated Payloads are integrity-checked using Command Sequences, so they do not have Integrity Check Values present in the Manifest.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text"><name>Human-Readable Text</name>

<t>Text is typically a Severable Element (<xref target="ovr-severable"/>). It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable"><name> Severable Elements</name>

<t>Severable Elements are elements of the Envelope (<xref target="ovr-envelope"/>) that have Integrity Check Values (<xref target="ovr-integrity"/>) in the Manifest (<xref target="ovr-manifest"/>).</t>

<t>Because of this organisation, these elements can be discarded or "Severed" from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system severs the Text sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated"><name>Integrated Payloads</name>

<t>In some cases, it is beneficial to include a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest's envelope.</t>
</list></t>

<t>See <xref target="template-integrated-payload"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior"><name>Manifest Processor Behavior</name>

<t>This section describes the behavior of the manifest processor and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the manifest processor: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup"><name>Manifest Processor Setup</name>

<t>Prior to executing any command sequence, the manifest processor or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the manifest processor or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the manifest processor can choose between several manifests, it MUST select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest, according to application-specific policy.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported Component Identifier encountered.</t>
  <t>Payload not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Payload verification failed.</t>
  <t>Missing required component from a Component Set.</t>
  <t>Required parameter not supplied.</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Selecting an older manifest in the event of failure of the latest valid manifest is a robustness mechanism that is necessary for supporting the requirements in <xref target="RFC9019"/>, section 3.5. It may not be appropriate for all applications. In particular Trusted Execution Environments MAY require a failure to invoke a new installation, rather than a rollback approach. See <xref target="RFC9124"/>, Section 4.2.1 for more discussion on the security considerations that apply to rollback.</t>

<t>Following these initial tests, the manifest processor clears all parameter storage. This ensures that the manifest processor begins without any leaked data.</t>

</section>
<section anchor="required-checks"><name> Required Checks</name>

<t>The RECOMMENDED process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a Recipient receives an incompatible manifest.</t>

<t>When validating authenticity of manifests, the manifest processor MAY use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity.</t>

<t>Once a valid, authentic manifest has been selected, the manifest processor MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component is supported.</t>

<t>For each listed component, the manifest processor MUST provide storage for the supported parameters. If the manifest processor does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The manifest processor SHOULD check that the shared sequence contains at least Check Vendor Identifier command and at least one Check Class Identifier command.</t>

<t>Because the shared sequence contains Check Vendor Identifier and Check Class Identifier command(s), no custom commands are permitted in the shared sequence. This ensures that any custom commands are only executed by devices that understand them.</t>

<t>If the manifest contains more than one component, each command sequence MUST begin with a Set Component Index.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by one update, that is the manifest:</t>

<t><list style="numbers">
  <t>has sufficient permissions imparted by its signatures</t>
  <t>specifies a digest and a payload for every Component in the Component Set.</t>
</list></t>

<section anchor="minimal-sigs"><name>Minimizing Signature Verifications</name>

<t>Signature verification can be energy and time expensive on a constrained device. MAC verification is typically unaffected by these concerns. A Recipient MAY choose to parse and execute only the SUIT_Common section of the manifest prior to signature verification, if all of the below apply:</t>

<t><list style="symbols">
  <t>The Authentication Block contains a COSE_Sign_Tagged or COSE_Sign1_Tagged</t>
  <t>The Recipient receives manifests over an unauthenticated channel, exposing it to more inauthentic or incompatible manifests, and</t>
  <t>The Recipient has a power budget that makes signature verification undesirable</t>
</list></t>

<t>When executing Common prior to authenticity validation, the Manifest Processor MUST first evaluate the integrity of the manifest using the SUIT_Digest present in the authentication block.</t>

<t>The guidelines in Creating Manifests (<xref target="creating-manifests"/>) require that the common section contains the applicability checks, so this section is sufficient for applicability verification. The parser MUST restrict acceptable commands to conditions and the following directives: Override Parameters, Set Parameters, Try Each, and Run Sequence ONLY. The manifest parser MUST NOT execute any command with side-effects outside the parser (for example, Run, Copy, Swap, or Fetch commands) prior to authentication and any such command MUST Abort. The Shared sequence MUST be executed again, in its entirety, after authenticity validation.</t>

<t>A Recipient MAY rely on network infrastructure to filter inapplicable manifests.</t>

</section>
</section>
<section anchor="interpreter-fundamental-properties"><name>Interpreter Fundamental Properties</name>

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a Trusted Invocation MUST either result in an error, or an invoked image.</t>
  <t>Executing the same manifest on multiple Recipients MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

<section anchor="resilience-to-disruption"><name>Resilience to Disruption</name>

<t>As required in Section 3 of RFC9019 and as an extension of design goal 1, devices must remain operable after a disruption, such as a power failure or network interruption, interrupts the update process.</t>

<t>The manifest processor must be resilient to these faults. In order to enable this resilience, systems implementing the manifest processor MUST make the following guarantees:</t>

<t>Either:
1. A fallback/recovery image is provided so that a disrupted system can apply the SUIT Manifest again.
2. Manifests are constructed so that repeated partial invocations of any manifest sequence always results in a correct system configuration.
3. A journal of manifest operations is stored in nonvolatile memory so that a repeated invocation does not alter nonvolatile memory up until the point of the previous failure. The journal enables the parser to recreate the processor state just prior to the disruption. This journal can be, for example, a SUIT Report. This report can be used to resume processing of the manifest from the point of failure.</t>

<t>AND</t>

<t><list style="numbers">
  <t>Where a command is not repeatable because of the way in which it alters system state (e.g. swapping images or in-place delta) it MUST be resumable or revertible. This applies to commands that modify at least one source component as well as the destination component.</t>
</list></t>

</section>
</section>
<section anchor="command-behavior"><name>Abstract Machine Description</name>

<t>The heart of the manifest is the list of commands, which are processed by a Manifest Processor--a form of interpreter. This Manifest Processor can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>Conditions MUST NOT have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag (<xref target="suit-parameter-soft-failure"/>) is set when a Condition reports failure.</t>

<t>Directives MAY have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter MUST Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>To simplify the logic describing the command semantics, the object "current" is used. It represents the component identified by the Component Index:</t>

<figure><artwork><![CDATA[
current := components\[component-index\]
]]></artwork></figure>

<t>As a result, Set Component Index is described as current := components[arg].</t>

<t>The following table describes the behavior of each command. "params" represents the parameters for the current component. Most commands operate on a component.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Check Content</c>
      <c>assert(binary-match(current, current.params[content]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for-each k,v in arg</c>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in params for-each k,v in arg</c>
      <c>Invoke</c>
      <c>invoke(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Write</c>
      <c>store(current, current.params[content])</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Slot</c>
      <c>assert(current.slot-index == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>try-each-done if exec(seq) is not error for-each seq in arg</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Invoke with Arguments</c>
      <c>invoke(current, arg)</c>
</texttable>

</section>
<section anchor="index-true"><name>Special Cases of Component Index</name>

<t>Component Index can take on one of three types:</t>

<t><list style="numbers">
  <t>Integer</t>
  <t>Array of integers</t>
  <t>True</t>
</list></t>

<t>Integers MUST always be supported by Set Component Index. Arrays of integers MUST be supported by Set Component Index if the Recipient supports 3 or more components. True MUST be supported by Set Component Index if the Recipient supports 2 or more components. Each of these operates on the list of components declared in the manifest.</t>

<t>Integer indices are the default case as described in the previous section. An array of integers represents a list of the components (Set Component Index) to which each subsequent command applies. The value True replaces the list of component indices with the full list of components, as defined in the manifest.</t>

<t>When a command is executed, it either 1. operates on the component identified by the component index if that index is an integer, or 2. it operates on each component identified by an array of indicies, or 3. it operates on every component if the index is the boolean True. This is described by the following pseudocode:</t>

<figure><artwork><![CDATA[
if component-index is true:
    current-list = components
else if component-index is array:
    current-list = [ components[idx] for idx in component-index ]
else:
    current-list = [ components[component-index] ]
for current in current-list:
    cmd(current)
]]></artwork></figure>

<t>Try Each and Run Sequence are affected in the same way as other commands: they are invoked once for each possible Component. This means that the sequences that are arguments to Try Each and Run Sequence are NOT invoked with Component Index = True, nor are they invoked with array indices. They are only invoked with integer indices. The interpreter loops over the whole sequence, setting the Component Index to each index in turn.</t>

</section>
<section anchor="serial-processing"><name>Serialized Processing Interpreter</name>

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor MAY handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

<t>When a serialized Manifest Processor encounters a component index of True, it does not ignore any commands. It applies them to the current component on each iteration.</t>

</section>
<section anchor="parallel-processing"><name>Parallel Processing Interpreter</name>

<t>Advanced Recipients MAY make use of the Strict Order parameter and enable parallel processing of some Command Sequences, or it may reorder some Command Sequences. To perform parallel processing, once the Strict Order parameter is set to False, the Recipient may issue each or every command concurrently until the Strict Order parameter is returned to True or the Command Sequence ends. Then, it waits for all issued commands to complete before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the Recipient consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>When the manifest processor encounters any of these scenarios the parallel processing MUST halt until all issued commands have completed:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, a manifest author may collect sequences of commands in a Run Sequence command. Then, each of these sequences MAY be run in parallel. There are several invocation options for Run Sequence:</t>

<t><list style="symbols">
  <t>Component Index is a positive integer, Strict Order is False: Strict Order is set to True before the sequence argument is run. The sequence argument MUST begin with set-component-index.</t>
  <t>Component Index is true or an array of positive integers, Strict Order is False: The sequence argument is run once for each component (or each component in the array); the manifest processor presets the component index and Strict Order = True before each iteration of the sequence argument.</t>
  <t>Component Index is a positive integer, Strict Order is True: No special considerations</t>
  <t>Component Index is True or an array of positive integers, Strict Order is True: The sequence argument is run once for each component (or each component in the array); the manifest processor presets the component index before each iteration of the sequence argument.</t>
</list></t>

<t>These rules isolate each sequence from each other sequence, ensuring that they operate as expected. When Strict Order = False, any further Set Component Index directives in the Run Sequence command sequence argument MUST cause an Abort. This allows the interpreter that issues Run Sequence commands to check that the first element is correct, then issue the sequence to a parallel execution context to handle the remainder of the sequence.</t>

</section>
</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC8152"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>The author MUST ensure that all parameters consumed by a command are set prior to invoking that command. Where Component Index = True, this means that the parameters consumed by each command MUST have been set for each Component.</t>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<t>NOTE: On systems that support only a single component, Set Component Index has no effect and can be omitted.</t>

<t>NOTE: <strong>A digest MUST always be set using Override Parameters.</strong></t>

<section anchor="template-compatibility-check"><name>Compatibility Check Template</name>

<t>The goal of the compatibility check template ensure that Recipients only install compatible images.</t>

<t>In this template all information is contained in the shared sequence and the following sequence of commands is used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="uuid-identifiers"/>)</t>
  <t>Check Class Identifier condition (see <xref target="uuid-identifiers"/>)</t>
</list></t>

</section>
<section anchor="template-secure-boot"><name>Trusted Invocation Template</name>

<t>The goal of the Trusted Invocation template is to ensure that only authorized code is invoked; such as in Secure Boot or when a Trusted Application is loaded into a TEE.</t>

<t>The following commands are placed into the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>The system validation sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>Then, the run sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Invoke directive (see <xref target="suit-directive-invoke"/>)</t>
</list></t>

</section>
<section anchor="firmware-download-template"><name>Component Download Template</name>

<t>The goal of the Component Download template is to acquire and store an image.</t>

<t>The following commands are placed into the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI (see <xref target="suit-parameter-uri"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-install"><name>Install Template</name>

<t>The goal of the Install template is to use an image already stored in an identified component to copy into a second component.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: the Component Download operations are moved from the Payload Install sequence to the Payload Fetch sequence.</t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="suit-parameter-source-component"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-integrated-payload"><name>Integrated Payload Template</name>

<t>The goal of the Integrated Payload template is to install a payload that is included in the manifest envelope. It is identical to the Component Download template (<xref target="firmware-download-template"/>).</t>

<t>An implementer MAY choose to place a payload in the envelope of a manifest. The payload envelope key MUST be a string. The payload MUST be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way MAY be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4.</t>

<t>A distributor MAY choose to pre-fetch a payload and add it to the manifest envelope, using the URI as the key.</t>

</section>
<section anchor="template-load-ext"><name>Load from Nonvolatile Storage Template</name>

<t>The goal of the Load from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="a-b-template"><name>A/B Image Template</name>

<t>The goal of the A/B Image Template is to acquire, validate, and invoke one of two images, based on a test.</t>

<t>The following commands are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following commands are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

<t>If Trusted Invocation (<xref target="template-secure-boot"/>) is used, only the run sequence is added to this template, since the shared sequence is populated by this template:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
    </list></t>
  <t>Invoke</t>
</list></t>

<t>NOTE: Any test can be used to select between images, Check Slot Condition is used in this template because it is a typical test for execute-in-place devices.</t>

</section>
</section>
<section anchor="metadata-structure"><name>Metadata Structure</name>

<t>The metadata for SUIT updates is composed of several primary constituent parts: the Envelope, Authentication Information, Manifest, and Severable Elements.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding-considerations"><name>Encoding Considerations</name>

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialized variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific values, as described in <xref target="iana"/>.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

<t>All CBOR maps in the Manifest and manifest envelope MUST be encoded with the canonical CBOR ordering as defined in <xref target="RFC8949"/>.</t>

</section>
<section anchor="envelope"><name>Envelope</name>

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="authentication-info"><name>Authenticated Manifests</name>

<t>The suit-authentication-wrapper contains a SUIT Digest Container (see <xref target="SUIT_Digest"/>) and one or more SUIT Authentication Blocks. The SUIT_Digest carries the result of computing the indicated hash algorithm over the suit-manifest element. A signing application MUST verify the suit-manifest element against the SUIT_Digest prior to signing. A SUIT Authentication Block is implemented as COSE_Mac_Tagged, COSE_Mac0_Tagged, COSE_Sign_Tagged or COSE_Sign1_Tagged structures with detached payloads, as described in RFC 8152 <xref target="RFC8152"/>.</t>

<t>For COSE_Sign and COSE_Sign1 a special signature structure (called Sig_structure) has to be created onto which the selected digital signature algorithm is applied to, see Section 4.4 of <xref target="RFC8152"/> for details. This specification requires Sig_structure to be populated as follows:
* The external_aad field MUST be set to a zero-length binary string (i.e. there is no external additional authenticated data).
* The payload field contains the SUIT_Digest wrapped in a bstr, as per the requirements in Section 4.4 of RFC 8152.
All other fields in the Sig_structure are populated as described in Section 4.4 of <xref target="RFC8152"/>.</t>

<t>Likewise, Section 6.3 of <xref target="RFC8152"/> describes the details for computing a MAC and the fields of the MAC_structure need to be populated. The rules for external_aad and the payload fields described in the paragraph above also apply to this structure.</t>

<t>The suit-authentication-wrapper MUST come before the suit-manifest element, regardless of canonical encoding of CBOR.</t>

<t>A SUIT_Envelope that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be a list containing only the SUIT_Digest.</t>

<t>The algorithms used in SUIT_Authentication are defined by the profiles declared in <xref target="I-D.moran-suit-mti"/>.</t>

</section>
<section anchor="manifest-structure"><name>Manifest</name>

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
</list></t>

<t>The Text section, or any Command Sequence of the Update Procedure (Image Fetch, Image Installation and, System Validation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable element. Severable elements are RECOMMENDED to implement. In particular, the human-readable text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version"><name>suit-manifest-version</name>

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED to implement.</t>

</section>
<section anchor="manifest-seqnr"><name>suit-manifest-sequence-number</name>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. Each Recipient MUST reject any manifest that has a sequence number lower than its current sequence number. For convenience, an implementer MAY use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED to implement.</t>

</section>
<section anchor="manifest-reference-uri"><name>suit-reference-uri</name>

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.</t>

</section>
<section anchor="manifest-digest-text"><name>suit-text</name>

<t>suit-text SHOULD be a severable element. suit-text is a map containing two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text</t>
  <t>SUIT_Component_Identifier =&gt; map</t>
</list></t>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text MUST also be present in suit-common (<xref target="manifest-common"/>).</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The YAML (<xref target="YAML"/>)-formatted document that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A free text representation of the component version</c>
</texttable>

<t>suit-text is OPTIONAL to implement.</t>

</section>
<section anchor="manifest-common"><name>suit-common</name>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-components, and suit-shared-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is REQUIRED to implement.</t>

<t>suit-shared-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-shared-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-shared-sequence is RECOMMENDED to implement. It is REQUIRED if the optimizations described in <xref target="minimal-sigs"/> will be used. Whenever a parameter or Try Each command is required by more than one Command Sequence, placing that parameter or command in suit-shared-sequence results in a smaller encoding.</t>

<section anchor="suit-component-identifier"><name>SUIT_Component_Identifier</name>

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>A Component Identifier can be trivial, such as the simple array [h'00']. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path "/usr/bin/env" would encode to ['usr','bin','env'].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands"><name>SUIT_Command_Sequence</name>

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL to implement.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation. suit-validate is REQUIRED to implement.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL to implement.</t>
  <t>Invoke or Boot: suit-invoke is a SUIT_Command_Sequence to execute in order to invoke an image. suit-invoke typically contains a single instruction: the "invoke" directive, but may also contain an image condition. suit-invoke is OPTIONAL to implement.</t>
</list></t>

<t>Goals 1,2,3 form the Update Procedure. Goals 3,4,5 form the Invocation Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true and any failure is treated as a failure of the update/load/invocation</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>Each condition is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>A <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided. This index is a numeric index into the Component Identifier table defined at the beginning of the manifest.</t>

<t>To facilitate optional conditions, a special directive, suit-directive-try-each (<xref target="suit-directive-try-each"/>), is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/invocation, but a parameter is provided to override this behavior. See suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>).</t>

</section>
<section anchor="reporting-policy"><name>Reporting Policy</name>

<t>To facilitate construction of Reports that describe the success or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>At the completion of each command, a Manifest Processor MAY forward information about the command to a Reporting Engine, which is responsible for reporting boot or update status to a third party. The Reporting Engine is entirely implementation-defined, the reporting policy simply facilitates the Reporting Engine's interface to the SUIT Manifest Processor.</t>

<t>The information elements provided to the Reporting Engine are:</t>

<t><list style="symbols">
  <t>The reporting policy</t>
  <t>The result of the command</t>
  <t>The values of parameters consumed by the command</t>
  <t>The system information consumed by the command</t>
</list></t>

<t>Together, these elements are called a Record. A group of Records is a Report.</t>

<t>If the component index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine MUST receive one Record for each Component, in the order expressed in the Components list or the component index array.</t>

<t>This specification does not define a particular format of Records or Reports. This specification only defines hints to the Reporting Engine for which Records it should aggregate into the Report. The Reporting Engine MAY choose to ignore these hints and apply its own policy instead.</t>

<t>When used in a Invocation Procedure, the report MAY form the basis of an attestation report. When used in an Update Process, the report MAY form the basis for one or more log entries.</t>

</section>
<section anchor="secparameters"><name>SUIT_Parameters</name>

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reuse of parameters between commands, thus reducing manifest size.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Content</c>
      <c>suit-parameter-content</c>
      <c><xref target="suit-parameter-content"/></c>
      <c>Component Slot</c>
      <c>suit-parameter-component-slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Invoke Args</c>
      <c>suit-parameter-invoke-args</c>
      <c><xref target="suit-parameter-invoke-args"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately.</t>

<section anchor="cbor-pen-uuid-namespace-identifier"><name>CBOR PEN UUID Namespace Identifier</name>

<t>The CBOR PEN UUID Namespace Identifier is constructed as follows:</t>

<t>It uses the OID Namespace as a starting point, then uses the CBOR absolute OID encoding for the IANA PEN OID (1.3.6.1.4.1):</t>

<figure><artwork><![CDATA[
D8 6F                # tag(111)
   45                # bytes(5)
# Absolute OID encoding of IANA Private Enterprise Number:
#    1.3. 6. 1. 4. 1
      2B 06 01 04 01 # X.690 Clause 8.19
]]></artwork></figure>

<t>Computing a type 5 UUID from these produces:</t>

<figure><artwork><![CDATA[
NAMESPACE_CBOR_PEN = UUID5(NAMESPACE_OID, h'D86F452B06010401')
NAMESPACE_CBOR_PEN = 47fbdabb-f2e4-55f0-bb39-3620c2f6df4e
]]></artwork></figure>

</section>
<section anchor="uuid-identifiers"><name>Constructing UUIDs</name>

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient MAY match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They MUST NOT be used as assertions of identity. They are evaluated by identifier conditions (<xref target="identifier-conditions"/>).</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module's firmware has a proprietary update mechanism and doesn't support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:</t>

<figure><artwork><![CDATA[
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)
]]></artwork></figure>

<t>If the Vendor ID is a UUID, the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(Vendor ID, Class-Specific-Information)
]]></artwork></figure>

<t>If the Vendor ID is a CBOR PEN (see <xref target="suit-parameter-vendor-identifier"/>), the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(
    UUID5(NAMESPACE_CBOR_PEN, CBOR_PEN),
    Class-Specific-Information)
]]></artwork></figure>

<t>Class-specific-information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier"><name>suit-parameter-vendor-identifier</name>

<t>suit-parameter-vendor-identifier may be presented in one of two ways:</t>

<t><list style="symbols">
  <t>A Private Enterprise Number</t>
  <t>A byte string containing a UUID (<xref target="RFC4122"/>)</t>
</list></t>

<t>Private Enterprise Numbers are encoded as a relative OID, according to the definition in <xref target="I-D.ietf-cbor-tags-oid"/>. All PENs are relative to the IANA PEN: 1.3.6.1.4.1.</t>

</section>
<section anchor="suit-parameter-class-identifier"><name>suit-parameter-class-identifier</name>

<t>A RFC 4122 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier"><name>suit-parameter-device-identifier</name>

<t>A RFC 4122 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest"><name>suit-parameter-image-digest</name>

<t>A fingerprint computed over the component itself, encoded in the SUIT_Digest <xref target="SUIT_Digest"/> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size"><name>suit-parameter-image-size</name>

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-component-slot"><name>suit-parameter-component-slot</name>

<t>This parameter sets the slot index of a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its index into the component's storage area. This slot MUST be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-content"><name>suit-parameter-content</name>

<t>A block of raw data for use with <xref target="suit-directive-write"/>. It contains a byte string of data to be written to a specified component ID in the same way as a fetch or a copy.</t>

<t>If data is encoded this way, it should be small. Large payloads written via this method will prevent the manifest from being held in memory during validation. Typical applications include small configuration parameters.</t>

<t>If suit-parameter-content is instantiated in a severable command sequence, then this becomes functionally very similar to an integrated payload, which may be a better choice.</t>

</section>
<section anchor="suit-parameter-uri"><name>suit-parameter-uri</name>

<t>A URI Reference (<xref target="RFC3986"/>) from which to fetch a resource, encoded as a text string. CBOR Tag 32 is not used because the meaning of the text string is unambiguous in this context.</t>

</section>
<section anchor="suit-parameter-source-component"><name>suit-parameter-source-component</name>

<t>This parameter sets the source component to be used with either suit-directive-copy (<xref target="suit-directive-copy"/>) or with suit-directive-swap (<xref target="suit-directive-swap"/>). The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-invoke-args"><name>suit-parameter-invoke-args</name>

<t>This parameter contains an encoded set of arguments for suit-directive-invoke (<xref target="suit-directive-invoke"/>). The arguments MUST be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-fetch-arguments"><name>suit-parameter-fetch-arguments</name>

<t>An implementation-defined set of arguments to suit-directive-fetch (<xref target="suit-directive-fetch"/>). Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order"><name>suit-parameter-strict-order</name>

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure"><name>suit-parameter-soft-failure</name>

<t>When executing a command sequence inside suit-directive-try-each (<xref target="suit-directive-try-each"/>) or suit-directive-run-sequence (<xref target="suit-directive-run-sequence"/>) and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates. It MUST NOT be set outside of suit-directive-try-each or suit-directive-run-sequence.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom"><name>suit-parameter-custom</name>

<t>This parameter is an extension point for any proprietary, application specific conditions and directives. It MUST NOT be used in the shared sequence. This effectively scopes each custom command to a particular Vendor Identifier/Class Identifier pair.</t>

</section>
</section>
<section anchor="suitcondition"><name>SUIT_Condition</name>

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Check Content</c>
      <c>suit-condition-check-content</c>
      <c><xref target="suit-condition-check-content"/></c>
      <c>Component Slot</c>
      <c>suit-condition-component-slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>Abort</c>
      <c>suit-condition-abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>Custom Condition</c>
      <c>suit-condition-custom</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition MUST report a result code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. A subsequent command or command sequence MAY continue executing if suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is set. If a condition requires additional information, this MUST be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it MUST report a failure. If a Recipient encounters an unknown condition, it MUST report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary definition by the author of a manifest processor. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions"><name>suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier</name>

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing Recipient MUST match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. Each component MAY match more than one identifier. Care is needed to ensure that manifests correctly identify their targets using these conditions. Using only a generic class ID for a device-specific firmware could result in matching devices that are not compatible.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers MUST be known to the Manifest Processor in order to evaluate compatibility.</t>

</section>
<section anchor="suit-condition-image-match"><name>suit-condition-image-match</name>

<t>Verify that the current component matches the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>) for the current component. The digest is verified against the digest specified in the Component's parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-check-content"><name>suit-condition-check-content</name>

<t>This directive compares the specified component identifier to the data indicated by suit-parameter-content. This functions similarly to suit-condition-image-match, however it does a direct, byte-by-byte comparison rather than a digest-based comparison. Because it is possible that an early stop to check-content could reveal information through timing, suit-condition-check-content MUST be constant time: no early exits. This MAY be implemented as follows:</t>

<t><spanx style="verb">
// content &amp; component must be same length
// returns 0 for match
bool check_content(content, component, length) {
    int residual = 0
    for (i = 0; i &lt; length; i++) {
        residual |= content[i] ^ component[i];
    }
    return residual;
}
</spanx></t>

</section>
<section anchor="suit-condition-component-slot"><name>suit-condition-component-slot</name>

<t>Verify that the slot index of the current component matches the slot index set in suit-parameter-component-slot (<xref target="suit-parameter-component-slot"/>). This condition allows a manifest to select between several images to match a target slot.</t>

</section>
<section anchor="suit-condition-abort"><name>suit-condition-abort</name>

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each (<xref target="suit-directive-try-each"/>).</t>

</section>
<section anchor="SUIT_Condition_Custom"><name>suit-condition-custom</name>

<t>suit-condition-custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="suitdirective"><name>SUIT_Directive</name>
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Write</c>
      <c>suit-directive-write</c>
      <c><xref target="suit-directive-write"/></c>
      <c>Invoke</c>
      <c>suit-directive-invoke</c>
      <c><xref target="suit-directive-invoke"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it MUST report a result code. If the Directive reports failure, then the current Command Sequence MUST be terminated.</t>

<section anchor="suit-directive-set-component-index"><name>suit-directive-set-component-index</name>

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be one of three types:</t>

<t><list style="numbers">
  <t>An unsigned integer (REQUIRED to implement in parser)</t>
  <t>A boolean (REQUIRED to implement in parser ONLY IF 2 or more components supported)</t>
  <t>An array of unsigned integers (REQUIRED to implement in parser ONLY IF 3 or more components supported)</t>
</list></t>

<t>If the following commands apply to ONE component, an unsigned integer index into the component list is used. If the following commands apply to ALL components, then the boolean value "True" is used instead of an index. If the following commands apply to more than one, but not all components, then an array of unsigned integer indices into the component list is used.
See <xref target="index-true"/> for more details.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-try-each"><name>suit-directive-try-each</name>

<t>This command runs several SUIT_Command_Sequence instances, one after another, in a strict order, until one succeeds or the list is exhausted. Use this command to implement a "try/catch-try/catch" sequence. Manifest processors MAY implement this command.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters"><name>suit-directive-override-parameters</name>

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch"><name>suit-directive-fetch</name>

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more payloads. suit-directive-fetch retrieves each component listed in component-index. If component-index is True, instead of an integer, then all current manifest components are fetched. If component-index is an array, then all listed components are fetched.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

</section>
<section anchor="suit-directive-copy"><name>suit-directive-copy</name>

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. As described in <xref target="index-true"/> component index may be a single integer, a list of integers, or True. suit-directive-copy retrieves each component specified by the current component-index, respectively.</t>

<t>suit-directive-copy reads its source from suit-parameter-source-component (<xref target="suit-parameter-source-component"/>).</t>

<t>If either the source component parameter or the source component itself is absent, this command fails.</t>

</section>
<section anchor="suit-directive-write"><name>suit-directive-write</name>

<t>This directive writes a small block of data, specified in <xref target="suit-parameter-content"/>, to a component.</t>

<t>Encoding Considerations: Careful consideration must be taken to determine whether it is more appropriate to use an integrated payload or to use <xref target="suit-parameter-content"/> for a particular application. While the encoding of suit-directive-write is smaller than an integrated payload, a large suit-parameter-content payload may prevent the manifest processor from holding the command sequence in memory while executing it.</t>

</section>
<section anchor="suit-directive-invoke"><name>suit-directive-invoke</name>

<t>suit-directive-invoke directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-invoke through suit-parameter-invoke-arguments (<xref target="suit-parameter-invoke-args"/>) and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-run-sequence"><name>suit-directive-run-sequence</name>

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr. This also allows a sequence of instructions to be iterated over, once for each current component index, when component-index = true or component-index = list. See <xref target="index-true"/>.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap"><name>suit-directive-swap</name>

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. As with suit-directive-copy, if the source component is missing, this command fails.</t>

<t>If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they MUST be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="integrity-checks"><name>Integrity Check Values</name>

<t>When the Text section or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope. The keys for the envelope elements have the same values as the keys for the manifest elements.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="severable-fields"><name>Severable Elements</name>

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or "Severed" without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD NOT be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists"><name>Access Control Lists</name>

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or Component Identifier prefixes to the listed identities or identity groups. Any identity can verify an image digest, but fetching into or fetching from a Component Identifier requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the Component Identifier or Component Identifier prefix that an identity can use, and also lists the commands and parameters that the identity can use in combination with that Component Identifier.</t>

</section>
<section anchor="SUIT_Digest"><name>SUIT Digest Container</name>

<t>The SUIT digest is a CBOR List containing two elements: an algorithm identifier and a bstr containing the bytes of the digest. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The values of the algorithm identifier are defined by <xref target="I-D.ietf-cose-hash-algs"/>. The following algorithms MUST be implemented by all Manifest Processors:</t>

<t><list style="symbols">
  <t>SHA-256 (-16)</t>
</list></t>

<t>The following algorithms MAY be implemented in a Manifest Processor:</t>

<t><list style="symbols">
  <t>SHAKE128 (-18)</t>
  <t>SHA-384 (-43)</t>
  <t>SHA-512 (-44)</t>
  <t>SHAKE256 (-45)</t>
</list></t>

</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate CBOR tag 107 (suggested) in the "CBOR Tags" registry for the SUIT Envelope.</t>
  <t>allocate CBOR tag 1070 (suggested) in the "CBOR Tags" registry for the SUIT Manifest.</t>
  <t>allocate media type application/suit-envelope in the "Media Types" registry, see below.</t>
  <t>setup several registries as described below.</t>
</list></t>

<t>IANA is requested to create a new category for Software Update for the Internet of Things (SUIT) 
and a page within this category for SUIT manifests.</t>

<t>IANA is also requested to create several registries defined in the subsections below.</t>

<t>For each registry, values 0-255 are Standards Action and 256 or greater are Expert Review. Negative values -255 to 0 are Standards Action, and -256 and lower are Private Use.</t>

<t>New entries to those registries need to provide a label, a name and a reference to a specification that describes the functionality. More guidance on the expert review can be found below.</t>

<section anchor="suit-envelope-elements"><name>SUIT Envelope Elements</name>

<t>IANA is requested to create a new registry for SUIT envelope elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>2</c>
      <c>Authentication Wrapper</c>
      <c><xref target="authentication-info"/></c>
      <c>3</c>
      <c>Manifest</c>
      <c><xref target="manifest-structure"/></c>
      <c>16</c>
      <c>Payload Fetch</c>
      <c><xref target="manifest-commands"/></c>
      <c>17</c>
      <c>Payload Installation</c>
      <c><xref target="manifest-commands"/></c>
      <c>23</c>
      <c>Text Description</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-manifest-elements"><name>SUIT Manifest Elements</name>

<t>IANA is requested to create a new registry for SUIT manifest elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Encoding Version</c>
      <c><xref target="manifest-version"/></c>
      <c>2</c>
      <c>Sequence Number</c>
      <c><xref target="manifest-seqnr"/></c>
      <c>3</c>
      <c>Common Data</c>
      <c><xref target="manifest-common"/></c>
      <c>4</c>
      <c>Reference URI</c>
      <c><xref target="manifest-reference-uri"/></c>
      <c>7</c>
      <c>Image Validation</c>
      <c><xref target="manifest-commands"/></c>
      <c>8</c>
      <c>Image Loading</c>
      <c><xref target="manifest-commands"/></c>
      <c>9</c>
      <c>Image Invocation</c>
      <c><xref target="manifest-commands"/></c>
      <c>16</c>
      <c>Payload Fetch</c>
      <c><xref target="manifest-commands"/></c>
      <c>17</c>
      <c>Payload Installation</c>
      <c><xref target="manifest-commands"/></c>
      <c>23</c>
      <c>Text Description</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-common-elements"><name>SUIT Common Elements</name>

<t>IANA is requested to create a new registry for SUIT common elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>2</c>
      <c>Component Identifiers</c>
      <c><xref target="manifest-common"/></c>
      <c>4</c>
      <c>Common Command Sequence</c>
      <c><xref target="manifest-common"/></c>
</texttable>

</section>
<section anchor="suit-commands"><name>SUIT Commands</name>

<t>IANA is requested to create a new registry for SUIT commands.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>2</c>
      <c>Class Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>3</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>6</c>
      <c>Check Content</c>
      <c><xref target="suit-condition-check-content"/></c>
      <c>12</c>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>13</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>14</c>
      <c>Abort</c>
      <c>&#160;</c>
      <c>15</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>16</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>17</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>18</c>
      <c>Write Content</c>
      <c><xref target="suit-directive-write"/></c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>21</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>22</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>23</c>
      <c>Invoke</c>
      <c><xref target="suit-directive-invoke"/></c>
      <c>24</c>
      <c>Device Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>25</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>31</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>32</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>33</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

</section>
<section anchor="suit-parameters"><name>SUIT Parameters</name>

<t>IANA is requested to create a new registry for SUIT parameters.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>2</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>3</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>12</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>13</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>14</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>18</c>
      <c>Content</c>
      <c><xref target="suit-parameter-content"/></c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>21</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>22</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>23</c>
      <c>Invoke Args</c>
      <c><xref target="suit-parameter-invoke-args"/></c>
      <c>24</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

</section>
<section anchor="suit-text-values"><name>SUIT Text Values</name>

<t>IANA is requested to create a new registry for SUIT text values.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Manifest Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Update Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Manifest JSON Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Manifest YAML Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-component-text-values"><name> SUIT Component Text Values</name>

<t>IANA is requested to create a new registry for SUIT component text values.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Model Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Vendor Domain</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Model Info</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>5</c>
      <c>Component Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>6</c>
      <c>Component Version</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>7</c>
      <c>Component Version Required</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="expert-review-instructions"><name>Expert Review Instructions</name>

<t>The IANA registries established in this document allow values to be added
based on expert review. This section gives some general guidelines for
what the experts should be looking for, but they are being designated
as experts for a reason, so they should be given substantial
latitude.</t>

<t>Expert reviewers should take into consideration the following points:</t>

<t><list style="symbols">
  <t>Point squatting should be discouraged.  Reviewers are encouraged
   to get sufficient information for registration requests to ensure
   that the usage is not going to duplicate one that is already
   registered, and that the point is likely to be used in
   deployments.  The zones tagged as private use 
   are intended for testing purposes and closed environments; 
   code points in other ranges should not be assigned for testing.</t>
  <t>Specifications are required for the standards track range of point
   assignment.  Specifications should exist for  all other ranges,
   but early assignment before a specification is
   available is considered to be permissible.
   When specifications are not provided, the description provided
   needs to have sufficient information to identify what the point is
   being used for.</t>
  <t>Experts should take into account the expected usage of fields when
   approving point assignment.  The fact that there is a range for
   standards track documents does not mean that a standards track
   document cannot have points assigned outside of that range.  The
   length of the encoded value should be weighed against how many
   code points of that length are left, the size of device it will be
   used on, and the number of code points left that encode to that
   size.</t>
</list></t>

</section>
<section anchor="media-type-registration"><name>Media Type Registration</name>

<t>This section registers the 'application/suit-envelope' media type in the
"Media Types" registry.  This media type are used to indicate that
the content is a SUIT envelope.</t>

<t>```
      Type name: application</t>

<figure><artwork><![CDATA[
  Subtype name: suit-envelope

  Required parameters: N/A

  Optional parameters: N/A

  Encoding considerations: binary

  Security considerations: See the Security Considerations section
  of [[This RFC]].

  Interoperability considerations: N/A

  Published specification: [[This RFC]]

  Applications that use this media type: Primarily used for 
    Firmware and software updates although the content may
    also contain configuration data and other information
    related to software and firmware.

  Fragment identifier considerations: N/A

  Additional information:

  *  Deprecated alias names for this type: N/A

  *  Magic number(s): N/A

  *  File extension(s): cbor

  *  Macintosh file type code(s): N/A

  Person & email address to contact for further information:
  iesg@ietf.org

  Intended usage: COMMON

  Restrictions on usage: N/A

  Author: Brendan Moran, <brendan.moran.ietf@gmail.com>

  Change Controller: IESG

  Provisional registration?  No ```
]]></artwork></figure>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC4122' target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author fullname='P. Leach' initials='P.' surname='Leach'><organization/></author>
<author fullname='M. Mealling' initials='M.' surname='Mealling'><organization/></author>
<author fullname='R. Salz' initials='R.' surname='Salz'><organization/></author>
<date month='July' year='2005'/>
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC3986' target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'><organization/></author>
<author fullname='R. Fielding' initials='R.' surname='Fielding'><organization/></author>
<author fullname='L. Masinter' initials='L.' surname='Masinter'><organization/></author>
<date month='January' year='2005'/>
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference anchor='RFC8949' target='https://www.rfc-editor.org/info/rfc8949'>
<front>
<title>Concise Binary Object Representation (CBOR)</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='P. Hoffman' initials='P.' surname='Hoffman'><organization/></author>
<date month='December' year='2020'/>
<abstract><t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t><t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t></abstract>
</front>
<seriesInfo name='STD' value='94'/>
<seriesInfo name='RFC' value='8949'/>
<seriesInfo name='DOI' value='10.17487/RFC8949'/>
</reference>



<reference anchor='RFC9019' target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>



<reference anchor='RFC9124' target='https://www.rfc-editor.org/info/rfc9124'>
<front>
<title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<date month='January' year='2022'/>
<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t><t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9124'/>
<seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.moran-suit-mti'>
   <front>
      <title>Mandatory-to-Implement Algorithms for Creators and Consumers of Software Update for the Internet of Things manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>   This document specifies algorithm profiles for SUIT manifest parsers
   and authors to ensure better interoperability.  These profiles apply
   specifically to a constrained node software update use case.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-moran-suit-mti-02'/>
   <format target='https://www.ietf.org/archive/id/draft-moran-suit-mti-02.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-cose-hash-algs'>
   <front>
      <title>CBOR Object Signing and Encryption (COSE): Hash Algorithms</title>
      <author fullname='Jim Schaad' initials='J.' surname='Schaad'>
         <organization>August Cellars</organization>
      </author>
      <date day='14' month='September' year='2020'/>
      <abstract>
	 <t>The CBOR Object Signing and Encryption (COSE) syntax (see RFC 9052) does not define any direct methods for using hash algorithms.  There are, however, circumstances where hash algorithms are used, such as indirect signatures, where the hash of one or more contents are signed, and identification of an X.509 certificate or other object by the use of a fingerprint.  This document defines hash algorithms that are identified by COSE algorithm identifiers.
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cose-hash-algs-09'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cose-hash-algs-09.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-teep-architecture'>
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname='Mingliang Pei' initials='M.' surname='Pei'>
         <organization>Broadcom</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Dave Thaler' initials='D.' surname='Thaler'>
         <organization>Microsoft</organization>
      </author>
      <author fullname='Dave Wheeler' initials='D. M.' surname='Wheeler'>
         <organization>Amazon</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-19'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-teep-architecture-19.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-cbor-tags-oid'>
   <front>
      <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
      <author fullname='Carsten Bormann' initials='C.' surname='Bormann'>
         <organization>Universität Bremen TZI</organization>
      </author>
      <date day='21' month='May' year='2021'/>
      <abstract>
	 <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.

 This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cbor-tags-oid-08'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Encrypted Payloads in SUIT Manifests</title>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Russ Housley' initials='R.' surname='Housley'>
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='David Brown' initials='D.' surname='Brown'>
         <organization>Linaro</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>   This document specifies techniques for encrypting software, firmware
   and personalization data by utilizing the IETF SUIT manifest.  Key
   establishment is provided by hybrid public-key encryption (HPKE) and
   AES Key Wrap (AES-KW).  HPKE uses public key cryptography while AES-
   KW uses a pre-shared key-encryption key.  Encryption of the plaintext
   is accomplished with conventional symmetric key cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-09'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-firmware-encryption-09.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-update-management'>
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to IoT
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-update-management-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-update-management-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-trust-domains'>
   <front>
      <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   (as defined in [I-D.ietf-suit-manifest]) for use in deployments with
   multiple trust domains.  A device has more than one trust domain when
   it enables delegation of different rights to mutually distrustful
   entities for use with different purposes or components in the context
   of firmware update.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-trust-domains-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-trust-domains-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-report'>
   <front>
      <title>Secure Reporting of Update Status</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>   The Software Update for the Internet of Things (SUIT) manifest
   provides a way for many different update and boot workflows to be
   described by a common format.  However, this does not provide a
   feedback mechanism for developers in the event that an update or boot
   fails.

   This specification describes a lightweight feedback mechanism that
   allows a developer in possession of a manifest to reconstruct the
   decisions made and actions performed by a manifest processor.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-report-04'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-report-04.txt' type='TXT'/>
</reference>



<reference anchor='RFC7228' target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='M. Ersue' initials='M.' surname='Ersue'><organization/></author>
<author fullname='A. Keranen' initials='A.' surname='Keranen'><organization/></author>
<date month='May' year='2014'/>
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>


<reference anchor="YAML" target="https://yaml.org/">
  <front>
    <title>YAML Ain't Markup Language</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<t>To be valid, the following CDDL MUST have the COSE CDDL appended to it. The COSE CDDL can be obtained by following the directions in <xref target="RFC8152"/>, Section 1.3.</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Envelope_Tagged = #6.107(SUIT_Envelope)
SUIT_Envelope = {
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * SUIT_Integrated_Payload,
  * $$SUIT_Envelope_Extensions,
}

SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]

SUIT_Digest = [
  suit-digest-algorithm-id : suit-cose-hash-algs,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

SUIT_Severable_Manifest_Members = (
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  * $$SUIT_severable-members-extensions,
)

SUIT_Integrated_Payload = (suit-integrated-payload-key => bstr)
suit-integrated-payload-key = tstr

SUIT_Manifest_Tagged = #6.1070(SUIT_Manifest)

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Unseverable_Members,
    SUIT_Severable_Members_Choice,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-invoke => bstr .cbor SUIT_Command_Sequence,
  * $$unseverable-manifest-member-extensions,
)

SUIT_Severable_Members_Choice = (
  ? suit-payload-fetch => SUIT_Digest / 
      bstr .cbor SUIT_Command_Sequence,
  ? suit-install => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
  ? suit-text => SUIT_Digest / bstr .cbor SUIT_Text_Map,
  * $$severable-manifest-members-choice-extensions
)

SUIT_Common = {
    ? suit-components             => SUIT_Components,
    ? suit-shared-sequence        => bstr .cbor SUIT_Shared_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Components           = [ + SUIT_Component_Identifier ]

;REQUIRED to implement:
suit-cose-hash-algs /= cose-alg-sha-256

;OPTIONAL to implement:
suit-cose-hash-algs /= cose-alg-shake128
suit-cose-hash-algs /= cose-alg-sha-384
suit-cose-hash-algs /= cose-alg-sha-512
suit-cose-hash-algs /= cose-alg-shake256

SUIT_Component_Identifier =  [* bstr]

SUIT_Shared_Sequence = [
    + ( SUIT_Condition // SUIT_Shared_Commands )
]

SUIT_Shared_Commands //= (suit-directive-set-component-index,  IndexArg)
SUIT_Shared_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Shared_Sequence)
SUIT_Shared_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument_Shared)
SUIT_Shared_Commands //= (suit-directive-override-parameters,
    {+ $$SUIT_Parameters})

IndexArg /= uint
IndexArg /= true
IndexArg /= [+uint]


SUIT_Directive_Try_Each_Argument_Shared = [
    2* bstr .cbor SUIT_Shared_Sequence,
    ?nil
]

SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-component-slot,    SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-check-content,     SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-abort,             SUIT_Rep_Policy)

SUIT_Directive //= (suit-directive-write,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-component-index,  IndexArg)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-override-parameters,
    {+ $$SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-copy,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-swap,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-invoke,            SUIT_Rep_Policy)

SUIT_Directive_Try_Each_Argument = [
    2* bstr .cbor SUIT_Command_Sequence,
    ?nil
]

SUIT_Rep_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

$$SUIT_Parameters //= (suit-parameter-vendor-identifier =>
    (RFC4122_UUID / cbor-pen))

cbor-pen = #6.112(bstr)

$$SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
$$SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
$$SUIT_Parameters //= (suit-parameter-image-size => uint)
$$SUIT_Parameters //= (suit-parameter-component-slot => uint)

$$SUIT_Parameters //= (suit-parameter-uri => tstr)
$$SUIT_Parameters //= (suit-parameter-source-component => uint)
$$SUIT_Parameters //= (suit-parameter-invoke-args => bstr)

$$SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)

$$SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

$$SUIT_Parameters //= (suit-parameter-content => bstr)
$$SUIT_Parameters //= (suit-parameter-strict-order => bool)
$$SUIT_Parameters //= (suit-parameter-soft-failure => bool)

RFC4122_UUID = bstr .size 16

SUIT_Text_Map = {
    SUIT_Text_Keys,
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    }
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

suit-authentication-wrapper = 2
suit-manifest = 3

;REQUIRED to implement:
cose-alg-sha-256 = -16

;OPTIONAL to implement:
cose-alg-shake128 = -18
cose-alg-sha-384 = -43
cose-alg-sha-512 = -44
cose-alg-shake256 = -45

;Unseverable, recipient-necessary
suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-validate = 7
suit-load = 8
suit-invoke = 9
;Severable, recipient-necessary
suit-payload-fetch = 16
suit-install = 17
;Severable, recipient-unnecessary
suit-text = 23

suit-components = 2
suit-shared-sequence = 4

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-component-slot    = 5
suit-condition-check-content     = 6

suit-condition-abort                    = 14
suit-condition-device-identifier        = 24

suit-directive-set-component-index      = 12
suit-directive-try-each                 = 15
suit-directive-write                    = 18
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-invoke                   = 23

suit-directive-swap                     = 31
suit-directive-run-sequence             = 32

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-component-slot    = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14
suit-parameter-content           = 18

suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-invoke-args       = 23

suit-parameter-device-identifier = 24

suit-parameter-custom = nint

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
]]></sourcecode></figure>

</section>
<section anchor="examples"><name>B. Examples</name>

<t>The following examples demonstrate a small subset of the functionality of the manifest. Even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<t>Note that reporting policies are declared for each non-flow-control command in these examples. The reporting policies used in the examples are described in the following tables.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Label</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Rec-Pass</c>
      <c>suit-send-record-on-failure</c>
      <c>Rec-Fail</c>
      <c>suit-send-sysinfo-success</c>
      <c>Sys-Pass</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Sys-Fail</c>
</texttable>

<texttable>
      <ttcol align='left'>Command</ttcol>
      <ttcol align='left'>Sys-Fail</ttcol>
      <ttcol align='left'>Sys-Pass</ttcol>
      <ttcol align='left'>Rec-Fail</ttcol>
      <ttcol align='left'>Rec-Pass</ttcol>
      <c>suit-condition-vendor-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-class-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-image-match</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-component-slot</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>1</c>
      <c>suit-directive-fetch</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-copy</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-invoke</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
</texttable>

<section anchor="example-0-secure-boot"><name>Example 0: Secure Boot</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
</list></t>

<t>It also serves as the minimum example.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'6658ea560262696dd1f13b782239a064da7c6c5cbaf52fded428a6fc83c7e5af'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'e3505f7ab70bd3a0e04916f37b0d7251aa
6f52ca12c7edaa886a4129a298ca6a1ecc2a57955c6bf4ccb9f01d684d5d1c4774dffb
e508a034431feafa60848a2c'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:0,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-run / 23,2
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  161</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af035871a50101020003585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f0943821702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  237</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af584ad28443a10126a0f65840e3505f
7ab70bd3a0e04916f37b0d7251aa6f52ca12c7edaa886a4129a298ca6a1e
cc2a57955c6bf4ccb9f01d684d5d1c4774dffbe508a034431feafa60848a
2c035871a50101020003585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f0943821702
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload"><name>Example 1: Simultaneous Download and Installation of Payload</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Simultaneous download and installation of payload. No secure boot is present in this example to demonstrate a download-only manifest.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'ef14b7091e8adae8aa3bb6fca1d64fb37e19dcf8b35714cfdddc5968c80ff50e'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'e95d9bb4926c7c82138fc81b968fdc42d9
bc8cfadf9e35dde8cba7bd44b91af0427a13dff4e6bcf5f2d5577f8f3bcaed55983e43
e984d14d6bdb2c762d9378b5'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:1,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  196</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820ef14b7091e8adae8aa3bb6fca1d64fb37e
19dcf8b35714cfdddc5968c80ff50e035894a50101020103585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f1158258614a115781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  272</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820ef14b7091e8adae8aa3bb6fca1d64fb37e
19dcf8b35714cfdddc5968c80ff50e584ad28443a10126a0f65840e95d9b
b4926c7c82138fc81b968fdc42d9bc8cfadf9e35dde8cba7bd44b91af042
7a13dff4e6bcf5f2d5577f8f3bcaed55983e43e984d14d6bdb2c762d9378
b5035894a50101020103585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f1158258614a11578
1b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502
030f
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-secure-boot-severed-fields"><name>Example 2: Simultaneous Download, Installation, Secure Boot, Severed Fields</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>This example also demonstrates severable elements (<xref target="ovr-severable"/>), and text (<xref target="manifest-digest-text"/>).</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'86bbcc8823f3a4441956f02b001302f503487461fb77fab086efe31530881f97'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'3a2d25bdff0d7aaee88549c14f0f1ee881
e3c92d2e51231f3e7bce213adbddefecf8a0ea98859b6d1a69a01c961858e99aacd520
dd59bb0bd8016a66de777b34'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:2,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-run / 23,2
            ] >>,
            / install / 17:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'cfa90c5c58595e7f5119a72f803fd0370b3e6abbec6315cd38f63135281bc498'
            ],
            / text / 23:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'2bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918'
            ],
        } >>,
    })
]]></artwork></figure>

<t>Total size of the Envelope without COSE authentication object or Severable Elements:  235</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f582086bbcc8823f3a4441956f02b001302f503
487461fb77fab086efe31530881f970358bba70101020203585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f094382170211822f5820cfa90c5c58595e7f5119a72f803f
d0370b3e6abbec6315cd38f63135281bc49817822f58202bfc4d0cc6680b
e7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918
]]></artwork></figure>
<t>Total size of the Envelope with COSE authentication object but without Severable Elements:  311</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f582086bbcc8823f3a4441956f02b001302f503
487461fb77fab086efe31530881f97584ad28443a10126a0f658403a2d25
bdff0d7aaee88549c14f0f1ee881e3c92d2e51231f3e7bce213adbddefec
f8a0ea98859b6d1a69a01c961858e99aacd520dd59bb0bd8016a66de777b
340358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f094382170211822f
5820cfa90c5c58595e7f5119a72f803fd0370b3e6abbec6315cd38f63135
281bc49817822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf918
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object and Severable Elements:  894</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba4025873825824822f582086bbcc8823f3a4441956f02b001302f503
487461fb77fab086efe31530881f97584ad28443a10126a0f658403a2d25
bdff0d7aaee88549c14f0f1ee881e3c92d2e51231f3e7bce213adbddefec
f8a0ea98859b6d1a69a01c961858e99aacd520dd59bb0bd8016a66de777b
340358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f094382170211822f
5820cfa90c5c58595e7f5119a72f803fd0370b3e6abbec6315cd38f63135
281bc49817822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf91811583c8614a1157832687474703a2f2f657861
6d706c652e636f6d2f766572792f6c6f6e672f706174682f746f2f66696c
652f66696c652e62696e1502030f17590204a20179019d2323204578616d
706c6520323a2053696d756c74616e656f757320446f776e6c6f61642c20
496e7374616c6c6174696f6e2c2053656375726520426f6f742c20536576
65726564204669656c64730a0a2020202054686973206578616d706c6520
636f766572732074686520666f6c6c6f77696e672074656d706c61746573
3a0a202020200a202020202a20436f6d7061746962696c69747920436865
636b20287b7b74656d706c6174652d636f6d7061746962696c6974792d63
6865636b7d7d290a202020202a2053656375726520426f6f7420287b7b74
656d706c6174652d7365637572652d626f6f747d7d290a202020202a2046
69726d7761726520446f776e6c6f616420287b7b6669726d776172652d64
6f776e6c6f61642d74656d706c6174657d7d290a202020200a2020202054
686973206578616d706c6520616c736f2064656d6f6e7374726174657320
736576657261626c6520656c656d656e747320287b7b6f76722d73657665
7261626c657d7d292c20616e64207465787420287b7b6d616e6966657374
2d6469676573742d746578747d7d292e814100a2036761726d2e636f6d05
78525468697320636f6d706f6e656e7420697320612064656d6f6e737472
6174696f6e2e205468652064696765737420697320612073616d706c6520
7061747465726e2c206e6f742061207265616c206f6e652e
]]></artwork></figure>

</section>
<section anchor="example-3-ab-images"><name>Example 3: A/B images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>A/B Image Template (<xref target="a-b-template"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'b3e6a52776bf3ed218feba031c609c98260e1a52fc1f019683edb6d1c5c4a379'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'3a4c404585cf111bb5556a0ce269aa56e7
56d998f09a1179640933c44230f6a7d2ea2331f9d904d84f39496721cf2f76ee85f06b
b71ab2179c833292f0d227bb'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:3,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    } ,
                    / directive-try-each / 15,[
                        << [
                            / directive-override-parameters / 20,{
                                / slot / 5:0,
                            } ,
                            / condition-component-slot / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<< [
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                                ] >>,
                                / image-size / 14:34768,
                            }
                        ] >> ,
                        << [
                            / directive-override-parameters / 20,{
                                / slot / 5:1,
                            } ,
                            / condition-component-slot / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<< [
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                                ] >>,
                                / image-size / 14:76834,
                            }
                        ] >>
                    ] ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-try-each / 15,[
                    << [
                        / directive-override-parameters / 20,{
                            / slot / 5:0,
                        } ,
                        / condition-component-slot / 5,5 ,
                        / directive-override-parameters / 20,{
                            / uri / 21:'http://example.com/file1.bin',
                        }
                    ] >> ,
                    << [
                        / directive-override-parameters / 20,{
                            / slot / 5:1,
                        } ,
                        / condition-component-slot / 5,5 ,
                        / directive-override-parameters / 20,{
                            / uri / 21:'http://example.com/file2.bin',
                        }
                    ] >>
                ] ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  320</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820b3e6a52776bf3ed218feba031c609c9826
0e1a52fc1f019683edb6d1c5c4a3790359010fa5010102030358a4a20281
81410004589b8814a20150fa6b4a53d5ad5fdfbe9de663e4d41ffe025014
92af1425695e48bf429b2d51f2ab450f8258348614a10500050514a20358
24822f582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d058368614a10501050514a2035824822f582001
23456789abcdeffedcba987654321000112233445566778899aabbccddee
ff0e1a00012c22010f020f074382030f11585b860f8258288614a1050005
0514a115781c687474703a2f2f6578616d706c652e636f6d2f66696c6531
2e62696e58288614a10501050514a115781c687474703a2f2f6578616d70
6c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  396</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820b3e6a52776bf3ed218feba031c609c9826
0e1a52fc1f019683edb6d1c5c4a379584ad28443a10126a0f658403a4c40
4585cf111bb5556a0ce269aa56e756d998f09a1179640933c44230f6a7d2
ea2331f9d904d84f39496721cf2f76ee85f06bb71ab2179c833292f0d227
bb0359010fa5010102030358a4a2028181410004589b8814a20150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450f8258348614a10500050514a2035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0583686
14a10501050514a2035824822f58200123456789abcdeffedcba98765432
1000112233445566778899aabbccddeeff0e1a00012c22010f020f074382
030f11585b860f8258288614a10500050514a115781c687474703a2f2f65
78616d706c652e636f6d2f66696c65312e62696e58288614a10501050514
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

</section>
<section anchor="example-4-load-from-external-storage"><name>Example 4: Load from External Storage</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>Install (<xref target="template-install"/>)</t>
  <t>Load (<xref target="template-load-ext"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'838eb848698c9d9dd29b5930102ea1f29743857d975f52ed4d19589b821e82cf'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'8ea1abc44569f3acea130558a1b1f6a23b
f509cc1f3ac7afe5a3d9bfbdf752b0fbdddb12a64fa0f83faa2d1580d35458cf17dbc4
0c21d6601436e4a39d261c02'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:4,
            / common / 3:<< {
                / components / 2:[
                    [h'00'] ,
                    [h'02'] ,
                    [h'01']
                ],
                / shared-sequence / 4:<< [
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15
            ] >>,
            / load / 8:<< [
                / directive-set-component-index / 12,2 ,
                / directive-override-parameters / 20,{
                    / image-digest / 3:<< [
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ] >>,
                    / image-size / 14:76834,
                    / source-component / 22:0 / [h'00'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-set-component-index / 12,2 ,
                / directive-run / 23,2
            ] >>,
            / payload-fetch / 16:<< [
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / image-digest / 3:<< [
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ] >>,
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / source-component / 22:1 / [h'02'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  327</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820838eb848698c9d9dd29b5930102ea1f297
43857d975f52ed4d19589b821e82cf03590116a801010204035867a20283
814100814102814101045858880c0014a40150fa6b4a53d5ad5fdfbe9de6
63e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820
00112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100e1987d0010f020f0745840c00030f085838880c0214a3035824822f
58200123456789abcdeffedcba987654321000112233445566778899aabb
ccddeeff0e1a00012c2216001602030f0945840c02170210584e880c0114
a2035824822f582000112233445566778899aabbccddeeff0123456789ab
cdeffedcba987654321015781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e1502030f114b880c0014a116011602030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  403</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820838eb848698c9d9dd29b5930102ea1f297
43857d975f52ed4d19589b821e82cf584ad28443a10126a0f658408ea1ab
c44569f3acea130558a1b1f6a23bf509cc1f3ac7afe5a3d9bfbdf752b0fb
dddb12a64fa0f83faa2d1580d35458cf17dbc40c21d6601436e4a39d261c
0203590116a801010204035867a20283814100814102814101045858880c
0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e
48bf429b2d51f2ab45035824822f582000112233445566778899aabbccdd
eeff0123456789abcdeffedcba98765432100e1987d0010f020f0745840c
00030f085838880c0214a3035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c2216001602
030f0945840c02170210584e880c0114a2035824822f5820001122334455
66778899aabbccddeeff0123456789abcdeffedcba987654321015781b68
7474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502030f
114b880c0014a116011602030f
]]></artwork></figure>

</section>
<section anchor="example-5-two-images"><name>Example 5: Two Images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Furthermore, it shows using these templates with two images.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'264dc89eb4a39ae7a8ed05e4d6232153bce4fb9a111a31310b90627d1edfc3bb'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'82a7c80c7544a744e7da857164b5a11b87
ab33e1ef29fa9e5c0e37870829bb3790a94f2536900185c3a361e619355a154f9220ba
00e8248cd18cd2ffcb0efc99'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:5,
            / common / 3:<< {
                / components / 2:[
                    [h'00'] ,
                    [h'01']
                ],
                / shared-sequence / 4:<< [
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15 ,
                    / directive-set-component-index / 12,1 ,
                    / directive-override-parameters / 20,{
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                        ] >>,
                        / image-size / 14:76834,
                    }
                ] >>,
            } >>,
            / validate / 7:<< [
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-set-component-index / 12,0 ,
                / directive-run / 23,2
            ] >>,
            / install / 17:<< [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file1.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file2.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  306</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820264dc89eb4a39ae7a8ed05e4d6232153bc
e4fb9a111a31310b90627d1edfc3bb03590101a601010205035895a20282
8141008141010458898c0c0014a40150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820001122
33445566778899aabbccddeeff0123456789abcdeffedcba98765432100e
1987d0010f020f0c0114a2035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c220749880c
00030f0c01030f0945840c00170211584f900c0014a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65312e62696e1502030f0c0114
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  382</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820264dc89eb4a39ae7a8ed05e4d6232153bc
e4fb9a111a31310b90627d1edfc3bb584ad28443a10126a0f6584082a7c8
0c7544a744e7da857164b5a11b87ab33e1ef29fa9e5c0e37870829bb3790
a94f2536900185c3a361e619355a154f9220ba00e8248cd18cd2ffcb0efc
9903590101a601010205035895a202828141008141010458898c0c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab45035824822f582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d0010f020f0c0114a2035824
822f58200123456789abcdeffedcba987654321000112233445566778899
aabbccddeeff0e1a00012c220749880c00030f0c01030f0945840c001702
11584f900c0014a115781c687474703a2f2f6578616d706c652e636f6d2f
66696c65312e62696e1502030f0c0114a115781c687474703a2f2f657861
6d706c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

</section>
</section>
<section anchor="design-rationale"><name>C. Design Rational</name>

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted invocation operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted invocation of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency's commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope"><name>C.1 Design Rationale: Envelope</name>

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of Severable Elements (<xref target="severable-fields"/>)</t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers"><name>C.2 Byte String Wrappers</name>

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the shared sequence. The shared sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>
<section anchor="implementation-matrix"><name>D. Implementation Conformance Matrix</name>

<t>This section summarizes the functionality a minimal manifest processor
implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Class Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Device Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>OPTIONAL</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>REQUIRED</c>
      <c>Check Content</c>
      <c><xref target="suit-condition-check-content"/></c>
      <c>OPTIONAL</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>Abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>OPTIONAL</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>REQUIRED if more than one component</c>
      <c>Write Content</c>
      <c><xref target="suit-directive-write"/></c>
      <c>OPTIONAL</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>OPTIONAL</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>REQUIRED</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>REQUIRED for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>OPTIONAL</c>
      <c>Invoke</c>
      <c><xref target="suit-directive-invoke"/></c>
      <c>REQUIRED for Bootloader</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>OPTIONAL</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>REQUIRED</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>REQUIRED</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>REQUIRED</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>REQUIRED</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>Content</c>
      <c><xref target="suit-parameter-content"/></c>
      <c>OPTIONAL</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>REQUIRED for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>OPTIONAL</c>
      <c>Invoke Args</c>
      <c><xref target="suit-parameter-invoke-args"/></c>
      <c>OPTIONAL</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>OPTIONAL</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>OPTIONAL</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>OPTIONAL</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c>OPTIONAL</c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
H4sIAKvDa2MAA+y963Ic2XUm+r+eIg854Qa6q4oESLbYkFs2eLNo8TYEWxqd
Vh86UZUopFiVWcrMArqapH7NQzji/PFj+LcV815n3ffaeSmAVM8Ze8YdYYuo
zNzXtdde129NJpNRkzfL7Cg5Th6WxSyvs+RBXqTVNnl5+sds1iSvs3WV1VnR
pE1eFsnewwcvX+9PTtM6mycnWZWny/wnfvSkrFZpk5yVVdKcZ8lJedZcplWW
fLeep01W04OnRZNVRdYk5Vny5jwvFnWyd/Ld0zf7yfO0yM+yuhmlp6dVdnGU
YEfaD7wRXpiXsyJdwZDnVXrWTPKsOZvUm7yZrOSNyeHBaAZdLspqe5TUzXw0
ytfVUdJUm7o5vH37m9uHIxhYegQTmG2qvNmOLsvq3aIqN+sj6mz0LtvCT/Mj
G/DkEXY2GtVNWszfpsuygAFss3q0zo9GSVKdzbJ53WyX8muSNOXM/TMv5rCE
+kNdVk2VndX293YV/dlU+cxenpWrFXxrT/NimRehm+zHZrLMYdLQyGm5hNcm
5ZdfwRNYplW6XsMau3G8XWYXGb50dzRKN815WcHoJ/AM/8sLePBgmjwvq7SQ
33ilH1RZMU+L6ElZLWC9ee+BfKpV8ixf5U02l+fZKs2XR8kpfzpd4adT3Ky/
X+CTKcxr1Or719PkTT07L8+yIl9EA/h1WhRAQp2n1xzEOX0+bexzGMOPU9jW
nhE8yKt35+Xyp7j/rHjXfhL3/aRKNwW2XiUnQEBx9/D19FS+/vs6b6Zn9vZ0
nrUH8Ztp8n8DlZ1mVbwIvymzov0kHsTTAg5k3Pc7+Gj6k3z09zm+AL23u/zL
P0+T13/516LAI9mk86jfv/zz9gIIuO+FuPsXcGTyGZyqVT4ri/lm1pRVPJqS
WppWpTXkqaEgDpJfZHikXj95ePfg8FD+ef/gnv7zzjf3v9Zfv7n7jfzzm9sH
9s+Dw7tHIzj0xZlv8OnkEVOhcIsm11+JhczKOpucp/X5JF0u6uhRk2XrSVrN
zoGyZs2myuIPT8tq0qSLelLm8+gJ9XOWVyvkg5OsmFXbNa1U56UN8UjkYOki
w+PefYW412RewnIVdfdxla2Bq8gK/OLw8D7+8/fHz58d0Q4Il7+BvyTHefFF
Awy1erdZJ8/SYrGBXm/Qe8YU4D8c0lFyePvwNjeRVosM2NJ506zro1u3tulq
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
NklehEW7Mpzq48cgTT0PZqjd7XQirqiVJzLrYHP1Is+YFMA5KKELuWpRrUCO
GxhScGiQMugiN+xdEssTieQSZ8HgOKOwLxrjCcvrHPAlDiTqhlcALu9mU18x
e/6YmmNfba1RK604Arz2HtjllLy/6W6q0eiR+Q2Rs7eN3+g8zDl+xAde2I+8
DkAfoHvXbBeclRhCWLDSJj4JDj8GLsaxDiC9gXBSkADzSJolA78agmu2IkUX
Jm8Jicyma9ilpcEuIM+BWleRf3oOBI5LQiwpI8vCFjXKFeoMKQY20ojXFv5E
SryIL2P2tsEgLs/LFXndyGdiXk0YuV+5sOaF0B0Ty4RjXzJnGrXVCBEn0YqQ
05A/EzKsY1fh5lTWhyK6QExWlxFOsChJbUbnrUh1KOaC0IstEn9+rkSMjEw4
hCyNkT15I+QL3XHtX5cgMPumXKOZKCJXDjHK1vCpuf/Ie8gW/BBmJHJVSq87
82jsMbx5k3bHmI3wioeBQvh+0KgvRzq4Uj5ySO/2Hm8Dhy1lbB3ybge971oE
GrlfKepI7pNxdFyITy45qlnZDIdBXWYV6yUieeM+SKN4WbALqYrj951lEeWc
U/j+Mp+j1c7N2TdktDnzfILDsjCAR7kOT5baBA0f1Qny4+EYfsStGmpfPV3A
VPkcnWbNZQY3LBoNWsYCbJ2VMJKT6CbqmTtoOfFDNzhjwqt8BmtZYgAjHJ4q
HpRnQ+rpPaOD4B0a2N4Sg2KtI3W7wpxbd6FvHd1Y0OfSNU1sxRjoLDIewXSq
NLKj0lENhGZRhWKuCyZl/jtLq2VOHnWKDJPrQvQKixKAls5K0pfR60MsIUdm
RocLmdV6DV2gG6HVSR0s6sQuepxicAZPeA/U9htFK+USRhquzOgExrF7xtZI
r0DqkkAOirkQYieex7eMnDbTU5X8x+TNlWA3a1IMThacAbN7B3xIyJR5CTvX
fldW787QPkGeNWIgEkSqci1QwDwlcW7JYRVrF1/glKMVueZgjG2LEPk8sA+J
EvDxQWriJP8uLhzvHtIRx02aC56EWzYqZHO2Asl15Gh5HKLmtGWyMmVsKbsA
KmZT6kDIzc8xffYDdS1U/5OW4ZjutdakeyYqti39hFibWr52fWf2B1idBxqP
wj5vtxzjzmkyfYaOE8WM0SWaJusNX8V1VqnHhwQN1ZfaEUDqiUKxQqyQfIFa
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
EtuNKHQk+riRUyKs5LuiDiQVeEiX0fCztw+p1LkeedlOW8Q+XtLTQ0yrUi4+
+0SCY3r4RMomUe2aH+H0NoUjVd09ptlekh1asCtOp2eJt1QB+7wjGzf1GQd4
dwPt4zy4PPVkRjP37FdXSaJf9Az9nZG8IlS1CF4/UghM/xXXrgyp2sPH5ITe
jKbuaJjHFG3qxzDc7sDg5kq+ao3srYtCgKvml72Ir0ejnjsNeT79An/glDDa
EhrozZ+9VgPvsoPD+9fq6c79u9d6797B4fU6pqEPL8y3SfI9Cwt6G7c2xsSN
r5K9Fsp5cutWtJcaD5Xsj1qN2ZNbt/TO2BmfM044nOe4Wuxfv6GoSHKviNSa
2ye0bYWiAzs2qOi3b6rtW4wWeqsAONLkJ7TfE8XDXb3/Ss9ECBv5iLDDsj64
43hbRT8gbET0w/df4TuwK6NrDt22/bArSvYe3b8r8qVteweSlc/nXli8LhEF
5G39RVthj+NoP2k3L65IXU2JqJMYgDGN+xbesLdg7rcQu3PU6Tt8u6POF331
Olu/5fqv12qmWwzss5rphFJ83mii8i/832dNKoq8GX92Mz6ab/zZoyFA2nHi
/+s0M+rQVvfsUQzeFe1co5lr8bHdTVzNwdon61rNfhrzulaTn8qvrtEkyV9/
/TYwAMlfv5uXIFb99c2wkDve2cyVPHkXM+6TIVvcOPSV8F2RTE8JuJF1Ey1e
jb8JPE78I3z1N3tBGaqBQcIbs7ICQY9LC4C+f3vc/4YiCR1Fuhe9UW9rtHK6
Rg6HXgmt3EG5tUNhbu13BDWCHErt70kVxbdU3PAWWf8n66zYh6b136J7Hhzu
sQ57zT47tfFA9PW97V+zHR8lORoQoVkt+LQWyVEqCu51v4y5fvj6mp+jziuq
7nV77OCGfuKIXcBisEJc89tu9cHOFl533UQ8+RXGBNzC8gssjXwaQYkvz6Zx
zRV00a70LfR+/dV3CGD27Sg6NN8KNRI9HaiKofqoKZPh199k21qVvB3qyK9c
JbPwcXgXm5HaZR99p/EbouBH2rSyA0pvC/9FRhj/Ojld2m8Pvy6tzzkg8Jqt
I2+7VuvhCPpQl2u87m1g0etkLuj54F227TMS2B72Lm0IBLzO6NiRFr27a6W0
7T/WiMnJ0apXv71NV8vet+OJd6e704WQiNa9CpbHO8OmhbYNAd6eHOywJHRM
BvTB/VHbQoA/370zahsE6Oe7o47+T7/fg26d8W8caodNDGInnpvRzrfJQetJ
x2KamDVCbEl3VJDwls9vEzFuBCNj8ouRsx8m99VWzKbB5JvRL0+uMeSWCQ8Z
UmyJSw5+MdDSpmi1xZa35PCOlcAze5NNs23mwomFBQg6KDzAqNlOMb0eyUTX
eEeZXb/MfYVNhYfo2g+pbfzSvc5LUSFNfunrzsi52GHPfzCBu+2Xu1epvXx4
t4vE2FMUS5s+bL9sFTB6xnGv/TKDS/cP+v51qjjooG/3Y9v3tnx40IubPvBy
Z4JyBHpfvtOPYtnf9J3OOCIwzdbLhx080B20ukPsDbQ6UGVYO+y01EurHZBS
L97oVnY6jAQZfev/a+9Km+M2jvb3+RWo5IOcmEviPlhJqnhJpq3Lonwob7lc
A2BArrUHtcCKoizlt79PzwzOxWJ5yZEVkiVqF5iju6dvNGZWZmw4xjVbuKtw
1YLRYJ5us9YDng4nDPi3DRbo92JX1n7QYa3Fa9UbbWqk9ca7XuT1Jrte4/WG
ul7i9ea5oT6HHLUWQGu8sxZAa1yyNkD9flhpqIacr1KFDnlc0KD/+c9/qGZk
f9s4UvvL0Z4kequ5/GN3A5XyhpGKqdoqTpaQqMMF5MYU1d5trc0WVrfkO3qr
tkuW/kXfnrZUv1HuMD2dV3vC5aK1n8ZLWcGsgaIyKF0BXB8yXwN/dHB4Irec
OofXsbBoz6pdWd1B1TOj0f7Ro+OnxvMXxz/uvTwyvjt6Ja+yJ8ePvtk7Pdp7
sv/k0f7lm0cnT9wI3x8dHOjPF0ff7D8yL/jF8f7e99+f7p3/+9Vv/z744dHj
J5754/4BO/jt1Unx89dm9Nuj6ezy2+eL88PHL9/vnI1/fnb2Yu/pwd7eydFk
fkQ7IL95E3179uO7sQiezqdv37x5HL4o3rLnX8fj4qefkrP07d7iZZ5997rI
D14dvbv47mmxePrNz+Po2b7z9OuL2d4PRf5++sJ2nrjFd+OfFFpHTw9XkZKr
/nKllOecikYTuZlXc3fL1tbneU3wHur9sP/4+KBBvIevL44uXn3z3fzfx+9/
Mw/2vn91rD8f7n2fHIJcR2ff8v1Hb9zHb968PXn1Y/JqtnzPv134b8Y7RzGL
3+9M3cWPk9nxz/HFd2bwzeX543hvuv8kOfgt5u9fWO7bl6fp+yz/9uLh4/iJ
9zot3j97fDKfnP7znw38O2BJ9NXmqAoVQ+7BffLNnty4JG/seFTxMe1aMte1
y91DksaiPJAJlqZ86UHa/xl0TQb+Kzerqw/0m3WIqeqXegYuz1suuqze2uS0
zepy+3qSD51Y+2DI99HKl8/YSh6MVKLOc9HLasnoOSxmb7Oseh+VmtHbqY1m
3ZzZB+PkMu+O1c2aqUZyJFZuclBfa4zRmLMJZeONug8tBIc82g+G1fy30bvd
0L7p6G4auu1CfDBM3dKsW6+e7Gs2G/a6bhvaVIfvtlupt+GUEJi7qjRWGPtz
Oj5dlsOWEtLYf7fBZwL3qOxU1l1SlgMRqS5OV7smfPX772UjiXl1X3n0Hz/K
zbLqWVsdZMGqGNHpFB/lU8VCFYrL122rXYWn49l4upyWkKqKPUYleXWyZsdY
EzPvGPbuP/6hE9h1ayX8u/i0clMP1yw926HAGX//gsgLGuQvxs5WT5dWCdoO
O3vg+14ouOebtm/7kZ+mVmY5cRDathNx03dTHiR+4iUxzzw7S0Xq2iH3syR0
kkB4PHvQmuQX41//2uqgUW3BqzGxwq9WkVFNdUmzSFXL33ubVbjjr7U7Cgjn
o5N1KNPPxxWo6nGWs+ak/TN+XNe5PEZnx3hIpJ9BJ6wBoUEGfD57IBzP9LKA
x4EZpw43helGlp85QWymge1ZnDMfBE+4ZYPOKedh6HPXsiNuR2HCfW6JJLG5
F0Sel/hx5iZJHGWmlfqhm3qplbhB4KZZFjPhmSE3Hdd1rEzwjPtm6IbcTh6s
wPnL30Cn9nJW39oLu1M7SzuGs7uyVPX9ytejtbK6rLE2W0ISYXZb68xJ74xV
izIRQSP0s9n/nT0wzQe/rKLfJy/dNMaO4a6Kat18OEYGTObWEFNXJgKiae2e
PcBqxS73nNTjqZelWSyiVPi+I9zUtbJMPECfss2IGo2o1YhRu1Gz4Tq21GTT
hgaz2pjVciObZ5YLkYo84YbgLjuK7dSzMpvHrveAoNNtKGcXjajViJqNmu2G
J22FunpN+8la97m2wuuuTkf5maZlQdFBODzP94MgDKOI8zhOkjQVIoM82Y7r
+UEY8ThJcUGkUIRRGPie69iWuSpD5c+qIuzDXkbUkAx313EDP1ynvdaplCHf
AqNuWd4Vuq54GeBS9FwVjxWMVtXqjlGlLXeMoH9Fm3M3PRawQHfaPmuyWJIG
iNaN3UrhECrOlj0wZo0CTLsKSOYFHS2iX5asaufLzYRlbX/bjBvz+DfMuWsY
lm/RoXSqiw5M0tCPuW3aXmgHoYW/Lkxrhv/NzZaXDZte0/HCwOKeaeHXNk36
7mU0WWiFFnMtXHJxyQ99y+WuaXnmJoUCOE0SbTYk/zRPjcaqDLHrCZEpLHxJ
MY6ZmTbDn8B1MLCDTxF9sgJc3rQ4wytjO0G9Mhvbd1cuABB3unJe6PLUDmGT
OdbO9rmZYUjXVF4BG3ILNnkF7GpuQb9XwOxkmKmGeIptYqohnmKbmGqIp9gm
phriqWbwYSH4aBw/ZBzOL9QZcRQOtnYEBPvpEv8/MESp3m+t4EK38uW7Uaov
jsqBZLjSwidt4jPu4KOd2W3j6Vy9pSfkkXzyTUC1/3m17UiJrDy7oZmEq2CQ
m8Y3dnL/k0RDAiwK2YssEfKU4w934hiCyyFBbhY7AdgqTbIwdrzAcpMsTdPE
i/wwCc0s80xxHw3dLBqKvDSKY+gIPwkSSKcTQllaMSibpYlrpxGLkzDJeJpF
0JHQASGkPYhT140jC5bQtQNuOVBsrvDjJPMyaBYvCLIwc+KEC3yJQugjh4kI
itByUz9OY+hQH0M7QRh7n300tNL6Phq6j4buo6HGIP+L0VBZvQH81k5wYymE
OViMqYG1++CsKM53d3bK9CZUyw7t+7Adj2cPVqnat0hNQFRCmUbesnub3pAo
dxzORf41wrnNrgMb9h3IA47cyvO2vrxwziKCeRJ8fAT9Yj8MXPyaDrczGzFQ
gJt+Gph+4nu2YL7jZ36KGz7CLHlJBlwCqMsBbxsVBvYdRoW3ZoC1UaH0jtiQ
e7TJO2JXc4/6vSMWe8O8+QVEhV3WZJt4c4g1Wc2bzejSXhNdbrVCy63mk6gt
Q5+/iNiPNkT7/J6H3SwqbWEhH6c14si8cbZfdcAcxpy/XYyqOxhGb1VGxYhf
rdtp829/ntgTigWcHIa2kzncdV0r8nxwaQxudUwIgOm44EjfymJILo/N0BeZ
cCzPMcPQyqLgPva8UewJ8U5tL4ZyNNOAcyHC0HOjxHIzaAX6ZjHhJBEaCQ/6
xcocEcSJgBLmaQy9kwmodG4KqJnQi2I/tbgfcdNKIt8KvVCQikpSzzZZmuJ+
bMZpaFo+9/1UBEEQO+5nH3va97HnfezZ7nMfe7YG+V+MPe/2SZzq1IpnP5Wh
haccmYmXwGGFVAWZZ1kRD+wsNJ0sNZ3AjB3hg/dE4sO8Jim8bXxwPPi6ceJG
YcfQdnGQDgnh+8kQsOMscVMzSXw/NGMRpGmUeQl3TM7tOPZSK4rglHupcKCv
4JxbcWgKO+FulPEsstYjsCl+LprHzW+OoelUt9XjzeXjOO8akfVmx4gNe0YU
RcSIiHT0Yn95kXX9UMuyyvmG2Jxdhc+toByqzXDs+hwnV3gDLw0xEu2mXfJb
L0c51tCj926ofmuOWheqK2eSDXmTm5xJdjVvst+ZZI47zOxfQKje5XW2idmH
eJ1tYvYhXmcDzH7DrJShTlfr4fAwcm+WrHLvJeBeAv5YCaBsmpPU2TTH7kum
sdVsWuDjlh1EaJLgivCBANpY4MQQn1w/KzNuDN3W5oWtwIvwycWaWwFtHJza
Dn6x7CqJx/S8Jq6ijedQFU/g+QlxPGaFLAReQB0wYxDgCkFj+a6dII53MVPg
yKYJfgm4iIClmxjK8x10tml418Z1gF3eCXzmy1sYyXQJeMzpuwEoaxJ/yl8P
uPoRzd7JOZoyH65JhNtEFLoMKmQSEgI1kkSje57uSPABGeY05qg/2fjkSupr
OkeSlAkgcLEOdA+T0MwxCVAQ47cztp366wfAPUYj0ABBGqR21J57DcGqqVh3
rqDZIfV1h76hXVA7QrMUZLH0+N311PMQI7Vapj5mbjdNV2jambO5hGzdGhLT
AIUMn+RwxDjETJhVLxTWOZC8IlnFAoaqI7EKdfDQwaVmGnRwRGArulAfVndS
ABLzSa52FVsEYU1fDEd3Ip8mAxSMEMfXQH1VOFMHPZRQ+hOIOr4iVVoKr4mZ
Q89ucG/JFJmUKEGz6jvWKvasIUdCC4Enm9XQNLoD26ZgKNaTwNpKEDGn5CPZ
mCQOdLc1LLZYTc47u8bezr7eDP0LSbP/XaKkTuN7qa9TLz6K2+n4P0mGXFow
z4ZUxnAbUtsKMxFz07ES34ySKLR92Ew0yBIL5jXyQzQiBwJW0eVOEN1nyG+Y
IXcTV7pMSWZZFjwAeDTchNMGx4yTZDOIMnwCOCaw90Hku2bkOInr2rDFPofm
EByeENzGNDLdNHQzJ4IRDWwrycjmwyv0MtOPWRxYPIZjEyWh40DdwIW07SCO
P/sMuXOfIf8yM+TrU749G22Ab7yt9ZnzK6TVb7Um9TDypc4dw+u+Q3VV7OqR
1r4yitG31iW17xyf6z+hqPve6klFE5M/7IlF+TP85KJLnSs9wSh/Pg4+LhlY
1v8CD1v3PPzJeHhTxnkDj386HgYHO+5teLj35i/3D/Aana9XPHoVKzfI0ncg
SVezbEMa4Rba4E7g31hRa60pqa2QW8PYa7X2H7gmA5r6T70m9o3XpEf0v4TK
aMpRXf357eawnQ3H7abjRZQFr+pPHUq1c1el9Fmd04/iEF8o63vVJ7hsOHww
M3ps4rgqlW16mMYzPTkFIGA3zfaTpWX92X7M5lezWc3ZGpNZ7DZ2mwEc0Jta
2Ylt9xfDenHoK+ztsIk9kwCp8u3keiWyDsDWifrWqCWWGwZla0a177gq3GmW
/d+6KvzWzL/+QRtlZdhQWmZTVoZdLS3Tn5VhcTwsl0NiyTZXVqwXS7ZJLj9B
zYUSS7ZJLocGY5v96fViyTbJ5ZAEsU1yOSSW7IbCLsWSrcplK+vu7hqPKSmZ
LeZTgw7jWtCpqSfFfAHb9sVk4XV5f2tk7XyrBo/1QNVdOYgqYP/TZOdDJxRx
CJGMwgQaJU0hsl7kkGIQHIIbESN7QRoFXgaGSd3UiqRusC0R2sn9TlI3y86H
IC7UDVSKH2UOT/DVMT2oYSu2oOZtJ2aZB1MD84K7Ac+Ex500irM4zQLPjk18
SNPYsrnvZjAuoZNxbqdQNWbqeNDesC5BigmYmdhW6vvQzo4vYJui1PatxLQ/
++y82219t9n5NfEJ3bUH71qfPLPft2E06GdvmVfIa98/FrgvnN+I/f9m4fwN
JeyWCTttIcJbQNWfVLjFK+LXk4Fb8P8flr5ez/fXSlNDa3e3MAch7V0T/5WG
owfdTa/Oy21WaaC7zQ+pzld+pePG/HWNd0HaJ1ZgdP8WcFlfFN9/Ep0/xPd/
to0gVOfrPeC4pia/Be/0KwZLKwb7s1IMd504Dq7z4s/GiJINh5QqQWX5PNQJ
Klkb7gcyQeXoxLH8a8u/lqxyCsPQTCBjg68CsesVh7cTRew2EszWFIdTUjCh
DfvwDUg4Cg0baDj17Gxznmq93WR9eSrLxwffLAvTFRSqON3EFyGhsCiPtDE3
t54GrA/Mq2whQmkpNrSFCCCLq/UGqxC73EkaGax2h2nkW4vCujSySh+wofzB
pvQBu1r+oD99wOT7GQNSOiSkbJOUDgkpu/4LezWDsuu/sFcLKdskpUNCyq7q
3fYJKdskpUNCym7ia5RCym66mYoUxU1S2swpe7vGy4u5Knv+Uiq52cPlAkAv
pvOF2DLGhZGfzS/y+oSZXNRYKF1TXMx1MfufZwcU23fTJIxETNqBi4CHIjVh
TVPfBit5TpwIN4vpaZbFHcuxzDgyfTtILZFmidMtE77PIF81g2zzIIFwBZ7r
8sB1RZBymBLLd2MPtI7DgPHYcYQlYGcyHgkvMYUThIEZQnvG9ICeR25m02tU
ENDQSxzu+JbwrcjxMILnZpFtmzGH3hOkW5LUwj87y5LYFFkSRZ99Btn7r2WQ
73PE9zni+xzxJ8sRX4HFr5VT6na+kXx8FjzzyUqDr8szAznW1cK7zzzFvyGH
c8305X8517spL3bTfX8+o0zdjct1P2ni82656FOSZ13l7JexQbBjXmeD4M3R
DRsOb3S5ncV9nSdR27J6Mk9iN7OZMkUSRmGyOY+pnCd2szymMgLs5p6FSXvi
tlIk/VmIu8yFmIEb6eSRzIYktJ1tIytiqo018CVDOFOmHDolcOxqBa/dREaZ
Cr3bkrqbl7qGd7kB8q0ZfG2OUgaobChC3RSgsqtFqP0BKouiYdkbEj12s+yk
Ej12s+ykEr1NReLd7GRL9NjVilr7RY9tkr0h0WObZG9IVtgm2RsarmdDmk1V
5uyvxsG2cSgoo2K84OqwaeP3v6byymihr4iPjB1DkORh7MWckktvYWiNbCLe
jWmjp1ic8bfjubyZqI2Qx3SGtDq5PN8yLs5gTo28GMNL4mXmktKBxvn8Qiyy
5aRsS0MsKSF4JsYLAzcmRsLPuUxYjmkoyn6e/HD8sk6ciFkyT4XKiy7Em+WY
dpyuQIJO4XTS7fh8TA8r1TTbxn55n/KrcoCUTkPlRn6OtvCw39MgCCgMurdF
aBUKqTGdun2w/+yFMRnTOdwyRQuSTOcUfXBQhWuYgKREHbZdntJNoZsCEy5K
LhbqwGI6yXcxVbqqhCS+VEcVVQAg/J/nQp5KBFdBjwK1p5YoV2cqc40ddCHI
hps0cAlBBaHgudS0+qBwAKngSGg5GkPKU5MBiDw6XJ0Pr7asXizzQtLh7bxU
sXUvygwvhD5yqT5YuUJEzdXAS52SLd4ViI7VhAtxCsKKBfHITFw0RtfHlfcu
kcHPgRG94nc6pqNtYzET2bgAvuAIhEy0+OAtOEZAX3OwnA5Lrs58x3QTPjtd
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
3bcYPZr6/wF0Jz5+eUQCAA==

-->

</rfc>

