<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.31 (Ruby 3.2.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-24" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>
    <author initials="Ø." surname="Rønningstad" fullname="Øyvind Rønningstad">
      <organization>Nordic Semiconductor</organization>
      <address>
        <email>oyvind.ronningstad@gmail.com</email>
      </address>
    </author>

    <date year="2023" month="October" day="31"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about code/data obtained by a recipient (chiefly
the firmware for an IoT device), where to find the code/data, the
devices to which it applies, and cryptographic information protecting
the manifest. Software updates and Trusted Invocation both tend to use
sequences of common operations, so the manifest encodes those sequences
of operations, rather than declaring the metadata.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. The transport of firmware images to the devices themselves is important security aspect. Luckily, there are already various device management solutions available offering the distribution of firmware images to IoT devices. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. Firmware signing allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image and to distribute the content encryption key securely. The support for firmware and payload encryption via the SUIT manifest format is described in a companion document <xref target="I-D.ietf-suit-firmware-encryption"/>. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>

<t>This specification defines the SUIT manifest format and it is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="RFC9124"/>.</t>
  <t>Simple to parse on a constrained node.</t>
  <t>Simple to process on a constrained node.</t>
  <t>Compact encoding.</t>
  <t>Comprehensible by an intermediate system.</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes.</t>
  <t>Extensible.</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>a Network Operator to reason about compatibility of a firmware, such as timing and acceptance of firmware updates.</t>
  <t>a Device Operator to reason about the impact of a firmware.</t>
  <t>a device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>a device to reason about the applicability of a firmware.</t>
  <t>a device to reason about the installation of a firmware.</t>
  <t>a device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="RFC9019"/> and the threats, requirements, and user stories in <xref target="RFC9124"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or Trusted Invocation are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In this document, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the language is tailored to software updates and Trusted Invocation.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and Trusted Invocation use cases, there is nothing in the SUIT Information Model <xref target="RFC9124"/> that restricts its use to only those use cases. Other use cases include the management of trusted applications (TAs) in a Trusted Execution Environment (TEE), as discussed in <xref target="RFC9397"/>.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements. Severable elements can be removed from the manifest without impacting its security, see <xref target="severable-fields"/>.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient's storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document"><name>How to use this Document</name>

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rational is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> gives a summarize of the mandatory-to-implement features of this specification.</t>

<t>Additional specifications describe functionality of advanced use cases, such as:</t>

<t><list style="symbols">
  <t>Firmware Encryption is covered in <xref target="I-D.ietf-suit-firmware-encryption"/></t>
  <t>Update Management is covered in <xref target="I-D.ietf-suit-update-management"/></t>
  <t>Features, such as dependencies, key delegation, multiple processors, required by the use of multiple trust domains are covered in <xref target="I-D.ietf-suit-trust-domains"/></t>
  <t>Secure reporting of the update status is covered in <xref target="I-D.ietf-suit-report"/></t>
</list></t>

<t>A technique to efficiently compress firmware images may be standardized in the future.</t>

</section>
<section anchor="background"><name>Background</name>

<t>Distributing software updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="RFC9019"/>. The security aspects are described in <xref target="RFC9124"/>.</t>

<section anchor="iot-firmware-update-constraints"><name>IoT Firmware Update Constraints</name>

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivered to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model"><name>SUIT Workflow Model</name>

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Invocation Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
  <t>Verify image(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and invoking images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Invoke image(s).</t>
</list></t>

<t>If verification and invocation is implemented in a bootloader, then the bootloader <bcp14>MUST</bcp14> also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader may add its own authentication, e.g. a Message Authentication Code (MAC), to the manifest in order to prevent further verifications.</t>

</section>
</section>
<section anchor="metadata-structure-overview"><name>Metadata Structure Overview</name>

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest.</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, such as affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable elements.</t>
    </list></t>
  <t>Severable elements (see <xref target="ovr-severable"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Integrated Payloads     |          +------------------------------+
+-------------------------+          | Structure Version            |
                                     | Sequence Number              |
                                     | Reference to Full Manifest   |
                               +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Components IDs          |      +-> +-----------------------+
| Common Command Sequence ---------> | Command Sequence      |
+-------------------------+          +-----------------------+
                                     | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope"><name>Envelope</name>

<t>The SUIT Envelope is a container that encloses the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that avoids substantial complexity that would be needed with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-auth"><name>Authentication Block</name>

<t>The Authentication Block contains a bstr-wrapped SUIT Digest Container, see <xref target="SUIT_Digest"/>, and one or more <xref target="RFC9052"/> CBOR Object Signing and Encryption (COSE) authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>Each of these objects is used in detached payload mode. The payload is the bstr-wrapped SUIT_Digest.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest"><name>Manifest</name>

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical"><name>Critical Metadata</name>

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which manifest is newest and whether the structure version is supported. It also <bcp14>MAY</bcp14> provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, and <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common"><name>Common</name>

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of two parts: a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence <bcp14>MUST NOT</bcp14> have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/> for more detail.</t>

</section>
<section anchor="ovr-commands"><name>Command Sequences</name>

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Payload Fetch, Payload Installation and, System Validation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Invocation Command Sequences are: System Validation, Image Loading, and Image Invocation. An Invocation Procedure is the complete set of each Invocation Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command (dependencies are not defined in this specification).</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity"><name>Integrity Check Values</name>

<t>To enable severable elements <xref target="ovr-severable"/>, there needs to be a mechanism to verify the integrity of the severed data. While the severed data stays outside the manifest, for efficiency reasons, Integrity Check Values are used to include the digest of the data in the manifest. Note that Integrated Payloads, see {#ovr-integrated}, are integrity-checked using Command Sequences.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text"><name>Human-Readable Text</name>

<t>Text is typically a Severable Element (<xref target="ovr-severable"/>). It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable"><name> Severable Elements</name>

<t>Severable Elements are elements of the Envelope (<xref target="ovr-envelope"/>) that have Integrity Check Values (<xref target="ovr-integrity"/>) in the Manifest (<xref target="ovr-manifest"/>).</t>

<t>Because of this organisation, these elements can be discarded or "Severed" from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system severs the Text sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated"><name>Integrated Payloads</name>

<t>In some cases, it is beneficial to include a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest's envelope.</t>
</list></t>

<t>See <xref target="template-integrated-payload"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior"><name>Manifest Processor Behavior</name>

<t>This section describes the behavior of the manifest processor and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the manifest processor: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup"><name>Manifest Processor Setup</name>

<t>Prior to executing any command sequence, the manifest processor or its host application <bcp14>MUST</bcp14> inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the manifest processor or its host application <bcp14>MUST</bcp14> extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the manifest processor can choose between several manifests, it <bcp14>MUST</bcp14> select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it <bcp14>MAY</bcp14> select the next latest valid, authentic manifest, according to application-specific policy.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported Component Identifier encountered.</t>
  <t>Payload not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Payload verification failed.</t>
  <t>Missing required component from a Component Set.</t>
  <t>Required parameter not supplied.</t>
</list></t>

<t>These failure reasons <bcp14>MAY</bcp14> be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Selecting an older manifest in the event of failure of the latest valid manifest is one possible strategy to provide robustness of the firmware update process. It may not be appropriate for all applications. In particular Trusted Execution Environments <bcp14>MAY</bcp14> require a failure to invoke a new installation, rather than a rollback approach. See <xref section="4.2.1" sectionFormat="comma" target="RFC9124"/> for more discussion on the security considerations that apply to rollback.</t>

<t>Following these initial tests, the manifest processor clears all parameter storage. This ensures that the manifest processor begins without any leaked data.</t>

</section>
<section anchor="required-checks"><name> Required Checks</name>

<t>The <bcp14>RECOMMENDED</bcp14> process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a Recipient receives an incompatible manifest.</t>

<t>When validating authenticity of manifests, the manifest processor <bcp14>MAY</bcp14> use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity.</t>

<t>Once a valid, authentic manifest has been selected, the manifest processor <bcp14>MUST</bcp14> examine the component list and
check that the number of components listed in the manifest is not larger than the number in the target system.</t>

<t>For each listed component, the manifest processor <bcp14>MUST</bcp14> provide storage for the supported parameters. If the manifest processor does not have sufficient temporary storage to process the parameters for all components, it <bcp14>MAY</bcp14> process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The manifest processor <bcp14>SHOULD</bcp14> check that the shared sequence contains at least Check Vendor Identifier command and at least one Check Class Identifier command.</t>

<t>Because the shared sequence contains Check Vendor Identifier and Check Class Identifier command(s), no custom commands are permitted in the shared sequence. This ensures that any custom commands are only executed by devices that understand them.</t>

<t>If the manifest contains more than one component, each command sequence <bcp14>MUST</bcp14> begin with a Set Component Index <xref target="suit-directive-set-component-index"/>.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it <bcp14>SHOULD</bcp14> verify that all Components in the Component Set are specified by one update, that is:</t>

<t><list style="numbers">
  <t>the manifest Author has sufficient permissions for the requested operations (see <xref target="access-control-lists"/>) and</t>
  <t>the manifest specifies a digest and a payload for every Component in the Component Set.</t>
</list></t>

</section>
<section anchor="interpreter-fundamental-properties"><name>Interpreter Fundamental Properties</name>

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update <bcp14>MUST</bcp14> either result in an error, or a correct system state that can be checked against known digests.</t>
  <t>Executing a Trusted Invocation <bcp14>MUST</bcp14> either result in an error, or an invoked image.</t>
  <t>Executing the same manifest on multiple Recipients <bcp14>MUST</bcp14> result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

<section anchor="resilience-to-disruption"><name>Resilience to Disruption</name>

<t>As required in <xref section="3" sectionFormat="of" target="RFC9019"/> and as an extension of design goal 1, devices must remain operable after a disruption, such as a power failure or network interruption, interrupts the update process.</t>

<t>The manifest processor must be resilient to these faults. In order to enable this resilience, systems implementing the manifest processor <bcp14>MUST</bcp14> make the following guarantees:</t>

<t>One of:
1. A fallback/recovery image is provided so that a disrupted system can apply the SUIT Manifest again.
2. Manifest Authors <bcp14>MUST</bcp14> construct Manifests in such a way that repeated partial invocations of any Manifest always results in a correct system state. Typically this is done by using Try-Each and Conditions to bypass operations that have already been completed.
3. A journal of manifest operations is stored in nonvolatile memory. The journal enables the parser to re-create the state just prior to the disruption. This journal can, for example, be a SUIT Report or a journaling file system.</t>

<t>AND</t>

<t><list style="numbers">
  <t>Where a command is not repeatable because of the way in which it alters system state (e.g. swapping images or in-place delta) it <bcp14>MUST</bcp14> be resumable or revertible. This applies to commands that modify at least one source component as well as the destination component.</t>
</list></t>

</section>
</section>
<section anchor="command-behavior"><name>Abstract Machine Description</name>

<t>The heart of the manifest is the list of commands, which are processed by a Manifest Processor -- a form of interpreter. This Manifest Processor can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>Conditions <bcp14>MUST NOT</bcp14> have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag (<xref target="suit-parameter-soft-failure"/>) is set when a Condition reports failure.</t>

<t>Directives <bcp14>MAY</bcp14> have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter <bcp14>MUST</bcp14> Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>To simplify the logic describing the command semantics, the object "current" is used. It represents the component identified by the Component Index:</t>

<figure><artwork><![CDATA[
current := components[component-index]
]]></artwork></figure>

<t>As a result, Set Component Index is described as current := components[arg].</t>

<t>The following table describes the semantics of each operation. The pseudo-code semantics are inspired by the Python programming language.</t>

<texttable>
      <ttcol align='left'>pseudo-code operation</ttcol>
      <ttcol align='left'>Semantics</ttcol>
      <c>assert(test)</c>
      <c>When test is false, causes an error return</c>
      <c>store(dest, source)</c>
      <c>Writes source into dest</c>
      <c>statement0 for-each e in l else statement1</c>
      <c>Performs statement0 once for each element in iterable l; performs statement1 if no break is encountered</c>
      <c>break</c>
      <c>halt a for-each loop</c>
      <c>now()</c>
      <c>return the current UTC time</c>
      <c>statement if test</c>
      <c>performs statement if test is true</c>
</texttable>

<t>The following table describes the behavior of each command. "params" represents the parameters for the current component. Most commands operate on a component.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Check Content</c>
      <c>assert(binary-match(current, current.params[content]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for-each k,v in arg</c>
      <c>Invoke</c>
      <c>invoke(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Write</c>
      <c>store(current, current.params[content])</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Slot</c>
      <c>assert(current.slot-index == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>(break if (exec(seq) is not error)) for-each seq in arg else assert(0)</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Invoke with Arguments</c>
      <c>invoke(current, arg)</c>
</texttable>

</section>
<section anchor="index-true"><name>Special Cases of Component Index</name>

<t>Component Index can take on one of three types:</t>

<t><list style="numbers">
  <t>Integer</t>
  <t>Array of integers</t>
  <t>True</t>
</list></t>

<t>Integers <bcp14>MUST</bcp14> always be supported by Set Component Index. Arrays of integers <bcp14>MUST</bcp14> be supported by Set Component Index if the Recipient supports 3 or more components. True <bcp14>MUST</bcp14> be supported by Set Component Index if the Recipient supports 2 or more components. Each of these operates on the list of components declared in the manifest.</t>

<t>Integer indices are the default case as described in the previous section. An array of integers represents a list of the components (Set Component Index) to which each subsequent command applies. The value True replaces the list of component indices with the full list of components, as defined in the manifest.</t>

<t>When a command is executed, it</t>

<t><list style="numbers">
  <t>operates on the component identified by the component index if that index is an integer, or</t>
  <t>it operates on each component identified by an array of indicies, or</t>
  <t>it operates on every component if the index is the boolean True.</t>
</list></t>

<t>This is described by the following pseudocode:</t>

<figure><artwork><![CDATA[
if component-index is True:
    current-list = components
else if component-index is array:
    current-list = [ components[idx] for idx in component-index ]
else:
    current-list = [ components[component-index] ]
for current in current-list:
    cmd(current)
]]></artwork></figure>

<t>Try Each and Run Sequence are affected in the same way as other commands: they are invoked once for each possible Component. This means that the sequences that are arguments to Try Each and Run Sequence are not invoked with Component Index = True, nor are they invoked with array indices. They are only invoked with integer indices. The interpreter loops over the whole sequence, setting the Component Index to each index in turn.</t>

</section>
<section anchor="serial-processing"><name>Serialized Processing Interpreter</name>

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor <bcp14>MAY</bcp14> handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

<t>When a serialized Manifest Processor encounters a component index of True, it does not ignore any commands. It applies them to the current component on each iteration.</t>

</section>
<section anchor="parallel-processing"><name>Parallel Processing Interpreter</name>

<t>To enable parallel or out-of-order processing of Command Sequences, Recipients <bcp14>MAY</bcp14> make use of the Strict Order parameter. The Strict Order parameter indicates to the Manifest Processor that Commands <bcp14>MUST</bcp14> be executed strictly in order. When the Strict Order parameter is False, this indicates to the Manifest Processor that Commands <bcp14>MAY</bcp14> be executed in parallel or out of order. 
To perform parallel processing, once the Strict Order parameter is set to False, the Recipient may issue each or every command concurrently until the Strict Order parameter is returned to True or the Command Sequence ends. Then, it waits for all issued commands to complete before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the Recipient consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>When the manifest processor encounters any of the following scenarios the parallel processing <bcp14>MUST</bcp14> pause until all issued commands have completed, after which it may resume parallel processing if Strict Order is still False.</t>

<t><list style="symbols">
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Component Index.</t>
</list></t>

<t>Extensions <bcp14>MAY</bcp14> alter this list. A Component <bcp14>MUST NOT</bcp14> be both a target of an operation and a source of data (for example, in Copy or Swap) in a Command Sequence where Strict Order is False.</t>

<t>To perform more useful parallel operations, a manifest author may collect sequences of commands in a Run Sequence command. Then, each of these sequences <bcp14>MAY</bcp14> be run in parallel. There are several invocation options for Run Sequence:</t>

<t><list style="symbols">
  <t>Component Index is a positive integer, Strict Order is False: Strict Order is set to True before the sequence argument is run. The sequence argument <bcp14>MUST</bcp14> begin with set-component-index.</t>
  <t>Component Index is true or an array of positive integers, Strict Order is False: The sequence argument is run once for each component (or each component in the array); the manifest processor presets the component index and Strict Order = True before each iteration of the sequence argument.</t>
  <t>Component Index is a positive integer, Strict Order is True: No special considerations</t>
  <t>Component Index is True or an array of positive integers, Strict Order is True: The sequence argument is run once for each component (or each component in the array); the manifest processor presets the component index before each iteration of the sequence argument.</t>
</list></t>

<t>These rules isolate each sequence from each other sequence, ensuring that they operate as expected. When Strict Order = False, any further Set Component Index directives in the Run Sequence command sequence argument <bcp14>MUST</bcp14> cause an Abort. This allows the interpreter that issues Run Sequence commands to check that the first element is correct, then issue the sequence to a parallel execution context to handle the remainder of the sequence.</t>

</section>
</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC9052"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>The author <bcp14>MUST</bcp14> ensure that all parameters consumed by a command are set prior to invoking that command. Where Component Index = True, this means that the parameters consumed by each command <bcp14>MUST</bcp14> have been set for each Component.</t>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<t>NOTE: On systems that support only a single component, Set Component Index has no effect and can be omitted.</t>

<t>NOTE: <strong>A digest <bcp14>MUST</bcp14> always be set using Override Parameters.</strong></t>

<section anchor="template-compatibility-check"><name>Compatibility Check Template</name>

<t>The goal of the compatibility check template ensure that Recipients only install compatible images.</t>

<t>In this template all information is contained in the shared sequence and the following sequence of commands is used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="uuid-identifiers"/>)</t>
  <t>Check Class Identifier condition (see <xref target="uuid-identifiers"/>)</t>
</list></t>

</section>
<section anchor="template-secure-boot"><name>Trusted Invocation Template</name>

<t>The goal of the Trusted Invocation template is to ensure that only authorized code is invoked; such as in Secure Boot or when a Trusted Application is loaded into a TEE.</t>

<t>The following commands are placed into the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>The system validation sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>Then, the run sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Invoke directive (see <xref target="suit-directive-invoke"/>)</t>
</list></t>

</section>
<section anchor="firmware-download-template"><name>Component Download Template</name>

<t>The goal of the Component Download template is to acquire and store an image.</t>

<t>The following commands are placed into the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI (see <xref target="suit-parameter-uri"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-install"><name>Install Template</name>

<t>The goal of the Install template is to use an image already stored in an identified component to copy into a second component.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: the Component Download operations are moved from the Payload Install sequence to the Payload Fetch sequence.</t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="suit-parameter-source-component"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-integrated-payload"><name>Integrated Payload Template</name>

<t>The goal of the Integrated Payload template is to install a payload that is included in the manifest envelope. It is identical to the Component Download template (<xref target="firmware-download-template"/>).</t>

<t>An Author <bcp14>MAY</bcp14> choose to place a payload in the envelope of a manifest. The payload envelope key <bcp14>MUST</bcp14> be a string. The payload <bcp14>MUST</bcp14> be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way <bcp14>MAY</bcp14> be expressed as a fragment-only reference, as defined in <xref section="4.4" sectionFormat="comma" target="RFC3986"/>, for example: "#device-model-v1.2.3.bin".</t>

<t>An intermediary, such as a Network Operator, <bcp14>MAY</bcp14> choose to pre-fetch a payload and add it to the manifest envelope, using the URI as the key.</t>

</section>
<section anchor="template-load-ext"><name>Load from Nonvolatile Storage Template</name>

<t>The goal of the Load from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="a-b-template"><name>A/B Image Template</name>

<t>The goal of the A/B Image Template is to acquire, validate, and invoke one of two images, based on a test.</t>

<t>The following commands are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following commands are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

<t>If Trusted Invocation (<xref target="template-secure-boot"/>) is used, only the run sequence is added to this template, since the shared sequence is populated by this template:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
    </list></t>
  <t>Invoke</t>
</list></t>

<t>NOTE: Any test can be used to select between images, Check Slot Condition is used in this template because it is a typical test for execute-in-place devices.</t>

</section>
</section>
<section anchor="metadata-structure"><name>Metadata Structure</name>

<t>The metadata for SUIT updates is composed of several primary constituent parts: Authentication Information, Manifest, Severable Elements and Integrated Payloads.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding-considerations"><name>Encoding Considerations</name>

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialized variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific values, as described in <xref target="iana"/>.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

<t>All CBOR maps in the Manifest and manifest envelope <bcp14>MUST</bcp14> be encoded with the canonical CBOR ordering as defined in <xref target="RFC8949"/>.</t>

</section>
<section anchor="envelope"><name>Envelope</name>

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="authentication-info"><name>Authenticated Manifests</name>

<t>SUIT_Authentication contains a list of elements, which consist of a SUIT_Digest calculated over the manifest, and zero or more SUIT_Authentication_Block's calculated over the SUIT_Digest.</t>

<figure><artwork><![CDATA[
SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]
SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged
]]></artwork></figure>

<t>The SUIT_Digest is computed over the bstr-wrapped SUIT_Manifest that is present in the SUIT_Envelope at the suit-manifest key. The SUIT_Digest <bcp14>MUST</bcp14> always be present. The Manifest Processor requires a SUIT_Authentication_Block to be present. The manifest <bcp14>MUST</bcp14> be protected from tampering between the time of creation and the time of signing/MACing.</t>

<t>The SUIT_Authentication_Block is computed using detached payloads, as described in RFC 9052 <xref target="RFC9052"/>. The detached payload in each case is the bstr-wrapped SUIT_Digest at the beginning of the list. Signers (or MAC calculators) <bcp14>MUST</bcp14> verify the SUIT_Digest prior to performing the cryptographic computation to avoid "Time-of-check to time-of-use" type of attack. When multiple SUIT_Authentication_Blocks are present, then each  SUIT_Authentication_Block <bcp14>MUST</bcp14> be computed over the same SUIT_Digest but using a different algorithm or signing/MAC authority. This feature also allows to transition to new algorithms, such as post-quantum cryptography (PQC) algorithms.</t>

<t>The SUIT_Authentication structure <bcp14>MUST</bcp14> come before the suit-manifest element, regardless of canonical encoding of CBOR. The algorithms used in SUIT_Authentication are defined by the profiles declared in <xref target="I-D.ietf-suit-mti"/>.</t>

</section>
<section anchor="manifest-structure"><name>Manifest</name>

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
</list></t>

<t>The Text section, or any Command Sequence of the Update Procedure (Image Fetch, Image Installation and, System Validation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable element. Severable elements are <bcp14>RECOMMENDED</bcp14> to implement. In particular, the human-readable text <bcp14>SHOULD</bcp14> be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version"><name>suit-manifest-version</name>

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is <bcp14>REQUIRED</bcp14> to implement.</t>

</section>
<section anchor="manifest-seqnr"><name>suit-manifest-sequence-number</name>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. Each Recipient <bcp14>MUST</bcp14> reject any manifest that has a sequence number lower than its current sequence number. For convenience, an implementer <bcp14>MAY</bcp14> use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is <bcp14>REQUIRED</bcp14> to implement.</t>

</section>
<section anchor="manifest-reference-uri"><name>suit-reference-uri</name>

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.</t>

</section>
<section anchor="manifest-digest-text"><name>suit-text</name>

<t>suit-text <bcp14>SHOULD</bcp14> be a severable element. suit-text is a map of language identifiers (identical to Tag38 of RFC9290, Appendix A) to language-specific text maps. Each language-specific text map is a map containing two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text</t>
  <t>SUIT_Component_Identifier =&gt; map</t>
</list></t>

<t>The SUIT_Text_Map is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
tag38-ltag = text .regexp "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*"

SUIT_Text_Map = {
    + tag38-ltag => SUIT_Text_LMap
}
SUIT_Text_LMap = {
    SUIT_Text_Keys,
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    }
}
]]></artwork></figure>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text <bcp14>MUST</bcp14> also be present in suit-common (<xref target="manifest-common"/>).</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section <bcp14>MAY</bcp14> be present. If present, each section <bcp14>MUST</bcp14> be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The YAML <xref target="YAML"/>-formatted document that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition (see <xref target="uuid-identifiers"/>)</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition (see {{uuid-identifiers)</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A free text representation of the component version</c>
</texttable>

<t>suit-text is <bcp14>OPTIONAL</bcp14> to implement.</t>

</section>
<section anchor="manifest-common"><name>suit-common</name>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-components, and suit-shared-sequence. suit-common is <bcp14>REQUIRED</bcp14> to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is <bcp14>REQUIRED</bcp14> to implement.</t>

<t>suit-shared-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-shared-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-shared-sequence is <bcp14>RECOMMENDED</bcp14> to implement. Whenever a parameter or Try Each command is required by more than one Command Sequence, placing that parameter or command in suit-shared-sequence results in a smaller encoding.</t>

<section anchor="suit-component-identifier"><name>SUIT_Component_Identifier</name>

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>A Component Identifier can be trivial, such as the simple array [h'00']. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path "/usr/bin/env" would encode to ['usr','bin','env'].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands"><name>SUIT_Command_Sequence</name>

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient <bcp14>MUST</bcp14> take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is <bcp14>OPTIONAL</bcp14> to implement because it is not relevant in all bootloaders.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is <bcp14>OPTIONAL</bcp14> to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation. suit-validate is <bcp14>REQUIRED</bcp14> to implement.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is <bcp14>OPTIONAL</bcp14> to implement.</t>
  <t>Invoke or Boot: suit-invoke is a SUIT_Command_Sequence to execute in order to invoke an image. suit-invoke typically contains a single instruction: the "invoke" directive, but may also contain an image condition. suit-invoke is <bcp14>OPTIONAL</bcp14> to implement because it not needed for restart-based invocation.</t>
</list></t>

<t>Goals 1,2,3 form the Update Procedure. Goals 3,4,5 form the Invocation Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that <bcp14>MUST</bcp14> be true and any failure is treated as a failure of the update/load/invocation</t>
  <t>Directives that <bcp14>MUST</bcp14> be executed.</t>
</list></t>

<t>Each condition is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>A <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided. This index is a numeric index into the Component Identifier table defined at the beginning of the manifest.</t>

<t>To facilitate optional conditions, a special directive, suit-directive-try-each (<xref target="suit-directive-try-each"/>), is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/invocation, but a parameter is provided to override this behavior. See suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>).</t>

</section>
<section anchor="reporting-policy"><name>Reporting Policy</name>

<t>To facilitate construction of Reports that describe the success or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>At the completion of each command, a Manifest Processor <bcp14>MAY</bcp14> forward information about the command to a Reporting Engine, which is responsible for reporting boot or update status to a third party. The Reporting Engine is entirely implementation-defined, the reporting policy simply facilitates the Reporting Engine's interface to the SUIT Manifest Processor.</t>

<t>The information elements provided to the Reporting Engine are:</t>

<t><list style="symbols">
  <t>The reporting policy</t>
  <t>The result of the command</t>
  <t>The values of parameters consumed by the command</t>
  <t>The system information consumed by the command</t>
</list></t>

<t>The Reporting Engine consumes these information elements and decides whether to generate an entry in its report output and which information elements to include based on its internal policy decisions. The Reporting Engine uses the reporting policy provided to it by the SUIT Manifest Processor as a set of hints but <bcp14>MAY</bcp14> choose to ignore these hints and apply its own policy instead.</t>

<t>If the component index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine <bcp14>MUST</bcp14> receive one set of information elements for each Component, in the order expressed in the Components list or the Component Index array.</t>

<t>This specification does not define a particular format of Records or Reports. This specification only defines hints to the Reporting Engine for which information elements it should aggregate into the Report.</t>

<t>When used in a Invocation Procedure, the output of the Reporting Engine <bcp14>MAY</bcp14> form the basis of an attestation report. When used in an Update Process, the report <bcp14>MAY</bcp14> form the basis for one or more log entries.</t>

</section>
<section anchor="secparameters"><name>SUIT_Parameters</name>

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reuse of parameters between commands, thus reducing manifest size.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Content</c>
      <c>suit-parameter-content</c>
      <c><xref target="suit-parameter-content"/></c>
      <c>Component Slot</c>
      <c>suit-parameter-component-slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Invoke Args</c>
      <c>suit-parameter-invoke-args</c>
      <c><xref target="suit-parameter-invoke-args"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately.</t>

<section anchor="cbor-pen-uuid-namespace-identifier"><name>CBOR PEN UUID Namespace Identifier</name>

<t>The CBOR PEN UUID Namespace Identifier is constructed as follows:</t>

<t>It uses the OID Namespace as a starting point, then uses the CBOR absolute OID encoding for the IANA PEN OID (1.3.6.1.4.1):</t>

<figure><artwork><![CDATA[
D8 6F                # tag(111)
   45                # bytes(5)
# Absolute OID encoding of IANA Private Enterprise Number:
#    1.3. 6. 1. 4. 1
      2B 06 01 04 01 # X.690 Clause 8.19
]]></artwork></figure>

<t>Computing a version 5 UUID from these produces:</t>

<figure><artwork><![CDATA[
NAMESPACE_CBOR_PEN = UUID5(NAMESPACE_OID, h'D86F452B06010401')
NAMESPACE_CBOR_PEN = 47fbdabb-f2e4-55f0-bb39-3620c2f6df4e
]]></artwork></figure>

</section>
<section anchor="uuid-identifiers"><name>Constructing UUIDs</name>

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient <bcp14>MAY</bcp14> match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They <bcp14>MUST NOT</bcp14> be used as assertions of identity. They are evaluated by identifier conditions (<xref target="identifier-conditions"/>).</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module's firmware has a proprietary update mechanism and doesn't support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs <bcp14>MUST</bcp14> be created according to versions 3, 4, or 5 of RFC 4122 <xref target="RFC4122"/>. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The <bcp14>RECOMMENDED</bcp14> method to create a vendor ID is:</t>

<figure><artwork><![CDATA[
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)
]]></artwork></figure>

<t>If the Vendor ID is a UUID, the <bcp14>RECOMMENDED</bcp14> method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(Vendor ID, Class-Specific-Information)
]]></artwork></figure>

<t>If the Vendor ID is a CBOR PEN (see <xref target="suit-parameter-vendor-identifier"/>), the <bcp14>RECOMMENDED</bcp14> method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(
    UUID5(NAMESPACE_CBOR_PEN, CBOR_PEN),
    Class-Specific-Information)
]]></artwork></figure>

<t>Class-specific-information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier"><name>suit-parameter-vendor-identifier</name>

<t>suit-parameter-vendor-identifier may be presented in one of two ways:</t>

<t><list style="symbols">
  <t>A Private Enterprise Number</t>
  <t>A byte string containing a UUID <xref target="RFC4122"/></t>
</list></t>

<t>Private Enterprise Numbers are encoded as a relative OID, according to the definition in <xref target="RFC9090"/>. All PENs are relative to the IANA PEN: 1.3.6.1.4.1.</t>

</section>
<section anchor="suit-parameter-class-identifier"><name>suit-parameter-class-identifier</name>

<t>A RFC 4122 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It <bcp14>MUST</bcp14> be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier"><name>suit-parameter-device-identifier</name>

<t>A RFC 4122 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It <bcp14>MUST</bcp14> be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest"><name>suit-parameter-image-digest</name>

<t>A fingerprint computed over the component itself, encoded in the SUIT_Digest <xref target="SUIT_Digest"/> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size"><name>suit-parameter-image-size</name>

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-component-slot"><name>suit-parameter-component-slot</name>

<t>This parameter sets the slot index of a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its index into the component's storage area. This slot <bcp14>MUST</bcp14> be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-content"><name>suit-parameter-content</name>

<t>A block of raw data for use with <xref target="suit-directive-write"/>. It contains a byte string of data to be written to a specified component ID in the same way as a fetch or a copy.</t>

<t>If data is encoded this way, it should be small, e.g. 10's of bytes. Large payloads, e.g. 1000's of bytes, written via this method might prevent the manifest from being held in memory during validation. Typical applications include small configuration parameters.</t>

<t>The size of payload embedded in suit-parameter-content impacts the security requirement defined in <xref target="RFC9124"/>, Section 4.3.21 REQ.SEC.MFST.CONST: Manifest Kept Immutable between Check and Use. Actual limitations on payload size for suit-parameter-content depend on the application, in particular the available memory that satisfies REQ.SEC.MFST.CONST. If the availability of tamper resistant memory is less than the manifest size, then REQ.SEC.MFST.CONST cannot be satisfied.</t>

<t>If suit-parameter-content is instantiated in a severable command sequence, then this becomes functionally very similar to an integrated payload, which may be a better choice.</t>

</section>
<section anchor="suit-parameter-uri"><name>suit-parameter-uri</name>

<t>A URI Reference <xref target="RFC3986"/> from which to fetch a resource, encoded as a text string. CBOR Tag 32 is not used because the meaning of the text string is unambiguous in this context.</t>

</section>
<section anchor="suit-parameter-source-component"><name>suit-parameter-source-component</name>

<t>This parameter sets the source component to be used with either suit-directive-copy (<xref target="suit-directive-copy"/>) or with suit-directive-swap (<xref target="suit-directive-swap"/>). The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-invoke-args"><name>suit-parameter-invoke-args</name>

<t>This parameter contains an encoded set of arguments for suit-directive-invoke (<xref target="suit-directive-invoke"/>). The arguments <bcp14>MUST</bcp14> be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-fetch-arguments"><name>suit-parameter-fetch-arguments</name>

<t>An implementation-defined set of arguments to suit-directive-fetch (<xref target="suit-directive-fetch"/>). Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order"><name>suit-parameter-strict-order</name>

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It <bcp14>MAY</bcp14> be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands <bcp14>MUST</bcp14> have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands <bcp14>MUST</bcp14> complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure"><name>suit-parameter-soft-failure</name>

<t>When executing a command sequence inside suit-directive-try-each (<xref target="suit-directive-try-each"/>) or suit-directive-run-sequence (<xref target="suit-directive-run-sequence"/>) and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when the enclosing SUIT_Command_Sequence terminates and suit-parameter-soft-failure reverts to the value it had prior to the invocation of the SUIT_Command_Sequence. Nested SUIT_Command_Sequences do not inherit the enclosing sequence's suit-parameter-soft-failure. It <bcp14>MUST NOT</bcp14> be set outside of suit-directive-try-each or suit-directive-run-sequence, modifying suit-parameter-soft-failure outside of these circumstances causes an Abort.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True in every SUIT_Command_Sequence in the suit-directive-try-each argument. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort. When the enclosing SUIT_Command_Sequence terminates, suit-parameter-soft-failure reverts to the value it held before the SUIT_Command_Sequence was invoked.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom"><name>suit-parameter-custom</name>

<t>This parameter is an extension point for any proprietary, application specific conditions and directives. It <bcp14>MUST NOT</bcp14> be used in the shared sequence. This effectively scopes each custom command to a particular Vendor Identifier/Class Identifier pair.</t>

<t>suit-parameter-custom <bcp14>MAY</bcp14> be consumed by any command, in an application-specific way, however if a suit-parameter-custom is absent, then all standardised suit-commands <bcp14>MUST</bcp14> execute correctly. In this respect, suit-parameter-custom <bcp14>MUST</bcp14> be treated as a hint by any standardised suit-command that consumes it.</t>

</section>
</section>
<section anchor="suitcondition"><name>SUIT_Condition</name>

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Check Content</c>
      <c>suit-condition-check-content</c>
      <c><xref target="suit-condition-check-content"/></c>
      <c>Component Slot</c>
      <c>suit-condition-component-slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>Abort</c>
      <c>suit-condition-abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>Custom Condition</c>
      <c>suit-condition-custom</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition <bcp14>MUST</bcp14> report a result code on completion. If a condition reports failure, then the current sequence of commands <bcp14>MUST</bcp14> terminate. A subsequent command or command sequence <bcp14>MAY</bcp14> continue executing if suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is set. If a condition requires additional information, this <bcp14>MUST</bcp14> be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it <bcp14>MUST</bcp14> report a failure. If a Recipient encounters an unknown condition, it <bcp14>MUST</bcp14> report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary definition by the author of a manifest processor. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions"><name>suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier</name>

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that <bcp14>MUST</bcp14> have already been set as a parameter. The installing Recipient <bcp14>MUST</bcp14> match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. Each component <bcp14>MAY</bcp14> match more than one identifier. Care is needed to ensure that manifests correctly identify their targets using these conditions. Using only a generic class ID for a device-specific firmware could result in matching devices that are not compatible.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are <bcp14>REQUIRED</bcp14> to implement. suit-condition-device-identifier is <bcp14>OPTIONAL</bcp14> to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers <bcp14>MUST</bcp14> be known to the Manifest Processor in order to evaluate compatibility.</t>

</section>
<section anchor="suit-condition-image-match"><name>suit-condition-image-match</name>

<t>Verify that the current component matches the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>) for the current component. The digest is verified against the digest specified in the Component's parameters list. If no digest is specified, the condition fails. suit-condition-image-match is <bcp14>REQUIRED</bcp14> to implement.</t>

</section>
<section anchor="suit-condition-check-content"><name>suit-condition-check-content</name>

<t>This directive compares the specified component identifier to the data indicated by suit-parameter-content. This functions similarly to suit-condition-image-match, however it does a direct, byte-by-byte comparison rather than a digest-based comparison. Because it is possible that an early stop to check-content could reveal information through timing, suit-condition-check-content <bcp14>MUST</bcp14> be constant time: no early exits.</t>

<t>The following pseudo-code described an example content checking algorithm:</t>

<figure><artwork><![CDATA[
// content & component must be same length
// returns 0 for match
int check_content(content, component, length) {
    int residual = 0;
    for (i = 0; i < length; i++) {
        residual |= content[i] ^ component[i];
    }
    return residual;
}
]]></artwork></figure>

</section>
<section anchor="suit-condition-component-slot"><name>suit-condition-component-slot</name>

<t>Verify that the slot index of the current component matches the slot index set in suit-parameter-component-slot (<xref target="suit-parameter-component-slot"/>). This condition allows a manifest to select between several images to match a target slot.</t>

</section>
<section anchor="suit-condition-abort"><name>suit-condition-abort</name>

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each (<xref target="suit-directive-try-each"/>).</t>

</section>
<section anchor="SUIT_Condition_Custom"><name>suit-condition-custom</name>

<t>suit-condition-custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is <bcp14>OPTIONAL</bcp14> to implement.</t>

</section>
</section>
<section anchor="suitdirective"><name>SUIT_Directive</name>
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Write</c>
      <c>suit-directive-write</c>
      <c><xref target="suit-directive-write"/></c>
      <c>Invoke</c>
      <c>suit-directive-invoke</c>
      <c><xref target="suit-directive-invoke"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it <bcp14>MUST</bcp14> report a result code. If the Directive reports failure, then the current Command Sequence <bcp14>MUST</bcp14> be terminated.</t>

<section anchor="suit-directive-set-component-index"><name>suit-directive-set-component-index</name>

<t>Set Component Index defines the component to which successive directives and conditions will apply. The Set Component Index arguments are described in <xref target="index-true"/>.</t>

<t>If the following commands apply to ONE component, an unsigned integer index into the component list is used. If the following commands apply to ALL components, then the boolean value "True" is used instead of an index. If the following commands apply to more than one, but not all components, then an array of unsigned integer indices into the component list is used.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-try-each"><name>suit-directive-try-each</name>

<t>This command runs several SUIT_Command_Sequence instances, one after another, in a strict order, until one succeeds or the list is exhausted. Use this command to implement a "try/catch-try/catch" sequence. Manifest processors <bcp14>MAY</bcp14> implement this command.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters"><name>suit-directive-override-parameters</name>

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch"><name>suit-directive-fetch</name>

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more payloads. suit-directive-fetch retrieves each component listed in component-index. If component-index is True, instead of an integer, then all current manifest components are fetched. If component-index is an array, then all listed components are fetched.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

</section>
<section anchor="suit-directive-copy"><name>suit-directive-copy</name>

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. As described in <xref target="index-true"/> component index may be a single integer, a list of integers, or True. suit-directive-copy retrieves each component specified by the current component-index, respectively.</t>

<t>suit-directive-copy reads its source from suit-parameter-source-component (<xref target="suit-parameter-source-component"/>).</t>

<t>If either the source component parameter or the source component itself is absent, this command fails.</t>

</section>
<section anchor="suit-directive-write"><name>suit-directive-write</name>

<t>This directive writes a small block of data, specified in <xref target="suit-parameter-content"/>, to a component.</t>

<t>Encoding Considerations: Careful consideration must be taken to determine whether it is more appropriate to use an integrated payload or to use <xref target="suit-parameter-content"/> for a particular application. While the encoding of suit-directive-write is smaller than an integrated payload, a large suit-parameter-content payload may prevent the manifest processor from holding the command sequence in memory while executing it.</t>

</section>
<section anchor="suit-directive-invoke"><name>suit-directive-invoke</name>

<t>suit-directive-invoke directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor <bcp14>MAY</bcp14> be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-invoke through suit-parameter-invoke-arguments (<xref target="suit-parameter-invoke-args"/>) and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor <bcp14>MAY</bcp14> resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-run-sequence"><name>suit-directive-run-sequence</name>

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr. This also allows a sequence of instructions to be iterated over, once for each current component index, when component-index = true or component-index = list. See <xref target="index-true"/>.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap"><name>suit-directive-swap</name>

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. As with suit-directive-copy, if the source component is missing, this command fails.</t>

</section>
</section>
<section anchor="integrity-checks"><name>Integrity Check Values</name>

<t>When the Text section or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope. The keys for the envelope elements have the same values as the keys for the manifest elements.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="severable-fields"><name>Severable Elements</name>

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or "Severed" without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>At time of manifest creation, the Author <bcp14>MAY</bcp14> chose to make a manifest element severable by removing it from the manifest, encoding it in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that it can still be authenticated. Making an element severable changes the digest of the manifest, so the signature <bcp14>MUST</bcp14> be computed after manifest elements are made severable. Only Manifest Elements with corresponding elements in the SUIT_Envelope can be made severable (see <xref target="iana-envelope"/> for SUIT_Envelope elements). The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 <bcp14>SHOULD NOT</bcp14> be severable. Elements larger than (Digest Bits)/8 + 4 <bcp14>MAY</bcp14> be severable, while elements that are much larger than (Digest Bits)/8 + 4 <bcp14>SHOULD</bcp14> be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists"><name>Access Control Lists</name>

<t>SUIT Manifest Processors are <bcp14>RECOMMENDED</bcp14> to use one of the following models for managing permissions in the manifest.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or Component Identifier prefixes to the listed identities or identity groups. Any identity can verify an image digest, but fetching into or fetching from a Component Identifier requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the Component Identifier or Component Identifier prefix that an identity can use, and also lists the commands and parameters that the identity can use in combination with that Component Identifier.</t>

</section>
<section anchor="SUIT_Digest"><name>SUIT Digest Container</name>

<t>The SUIT digest is a CBOR array containing two elements: an algorithm identifier and a bstr containing the bytes of the digest. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The values of the algorithm identifier are found in the IANA "COSE Algorithms" registry <xref target="COSE_Alg"/>, which was created by <xref target="RFC9054"/>. SHA-256 (-16) <bcp14>MUST</bcp14> be implemented by all Manifest Processors.</t>

<t>Any other algorithm defined in the IANA "COSE Algorithms" registry, such as SHA-512 (-44), <bcp14>MAY</bcp14> be implemented in a Manifest Processor.</t>

</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate CBOR tag 107 (suggested) in the "CBOR Tags" registry for the SUIT Envelope.</t>
  <t>allocate CBOR tag 1070 (suggested) in the "CBOR Tags" registry for the SUIT Manifest.</t>
  <t>allocate media type application/suit-envelope in the "Media Types" registry, see below.</t>
  <t>setup several registries as described below.</t>
</list></t>

<t>IANA is requested to create a new category for Software Update for the Internet of Things (SUIT)
and a page within this category for SUIT manifests.</t>

<t>IANA is also requested to create several registries defined in the subsections below.</t>

<t>For each registry, values 0-255 are Standards Action and 256 or greater are Expert Review. Negative values -255 to 0 are Standards Action, and -256 and lower are Private Use.</t>

<t>New entries to those registries need to provide a label, a name and a reference to a specification that describes the functionality. More guidance on the expert review can be found below.</t>

<section anchor="iana-envelope"><name>SUIT Envelope Elements</name>

<t>IANA is requested to create a new registry for SUIT envelope elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>2</c>
      <c>Authentication Wrapper</c>
      <c><xref target="authentication-info"/> of [TBD: this document]</c>
      <c>3</c>
      <c>Manifest</c>
      <c><xref target="manifest-structure"/> of [TBD: this document]</c>
      <c>16</c>
      <c>Payload Fetch</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>17</c>
      <c>Payload Installation</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>23</c>
      <c>Text Description</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="suit-manifest-elements"><name>SUIT Manifest Elements</name>

<t>IANA is requested to create a new registry for SUIT manifest elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Encoding Version</c>
      <c><xref target="manifest-version"/> of [TBD: this document]</c>
      <c>2</c>
      <c>Sequence Number</c>
      <c><xref target="manifest-seqnr"/> of [TBD: this document]</c>
      <c>3</c>
      <c>Common Data</c>
      <c><xref target="manifest-common"/> of [TBD: this document]</c>
      <c>4</c>
      <c>Reference URI</c>
      <c><xref target="manifest-reference-uri"/> of [TBD: this document]</c>
      <c>7</c>
      <c>Image Validation</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>8</c>
      <c>Image Loading</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>9</c>
      <c>Image Invocation</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>16</c>
      <c>Payload Fetch</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>17</c>
      <c>Payload Installation</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>23</c>
      <c>Text Description</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="suit-common-elements"><name>SUIT Common Elements</name>

<t>IANA is requested to create a new registry for SUIT common elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>2</c>
      <c>Component Identifiers</c>
      <c><xref target="manifest-common"/> of [TBD: this document]</c>
      <c>4</c>
      <c>Common Command Sequence</c>
      <c><xref target="manifest-common"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="suit-commands"><name>SUIT Commands</name>

<t>IANA is requested to create a new registry for SUIT commands.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c><xref target="identifier-conditions"/> of [TBD: this document]</c>
      <c>2</c>
      <c>Class Identifier</c>
      <c><xref target="identifier-conditions"/> of [TBD: this document]</c>
      <c>3</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/> of [TBD: this document]</c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/> of [TBD: this document]</c>
      <c>6</c>
      <c>Check Content</c>
      <c><xref target="suit-condition-check-content"/> of [TBD: this document]</c>
      <c>12</c>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/> of [TBD: this document]</c>
      <c>13</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>14</c>
      <c>Abort</c>
      <c>&#160;</c>
      <c>15</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/> of [TBD: this document]</c>
      <c>16</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>17</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>18</c>
      <c>Write Content</c>
      <c><xref target="suit-directive-write"/> of [TBD: this document]</c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/> of [TBD: this document]</c>
      <c>21</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/> of [TBD: this document]</c>
      <c>22</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/> of [TBD: this document]</c>
      <c>23</c>
      <c>Invoke</c>
      <c><xref target="suit-directive-invoke"/> of [TBD: this document]</c>
      <c>24</c>
      <c>Device Identifier</c>
      <c><xref target="identifier-conditions"/> of [TBD: this document]</c>
      <c>25</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>31</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/> of [TBD: this document]</c>
      <c>32</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/> of [TBD: this document]</c>
      <c>33</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="suit-parameters"><name>SUIT Parameters</name>

<t>IANA is requested to create a new registry for SUIT parameters.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/> of [TBD: this document]</c>
      <c>2</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/> of [TBD: this document]</c>
      <c>3</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/> of [TBD: this document]</c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/> of [TBD: this document]</c>
      <c>12</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/> of [TBD: this document]</c>
      <c>13</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/> of [TBD: this document]</c>
      <c>14</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/> of [TBD: this document]</c>
      <c>18</c>
      <c>Content</c>
      <c><xref target="suit-parameter-content"/> of [TBD: this document]</c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>21</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/> of [TBD: this document]</c>
      <c>22</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/> of [TBD: this document]</c>
      <c>23</c>
      <c>Invoke Args</c>
      <c><xref target="suit-parameter-invoke-args"/> of [TBD: this document]</c>
      <c>24</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/> of [TBD: this document]</c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="suit-text-values"><name>SUIT Text Values</name>

<t>IANA is requested to create a new registry for SUIT text values.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Manifest Description</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>2</c>
      <c>Update Description</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>3</c>
      <c>Manifest JSON Source</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>4</c>
      <c>Manifest YAML Source</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="suit-component-text-values"><name> SUIT Component Text Values</name>

<t>IANA is requested to create a new registry for SUIT component text values.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Name</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>2</c>
      <c>Model Name</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>3</c>
      <c>Vendor Domain</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>4</c>
      <c>Model Info</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>5</c>
      <c>Component Description</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>6</c>
      <c>Component Version</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>7</c>
      <c>Component Version Required</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="expert-review-instructions"><name>Expert Review Instructions</name>

<t>The IANA registries established in this document allow values to be added
based on expert review. This section gives some general guidelines for
what the experts should be looking for, but they are being designated
as experts for a reason, so they should be given substantial
latitude.</t>

<t>Expert reviewers should take into consideration the following points:</t>

<t><list style="symbols">
  <t>Point squatting should be discouraged.  Reviewers are encouraged
   to get sufficient information for registration requests to ensure
   that the usage is not going to duplicate one that is already
   registered, and that the point is likely to be used in
   deployments.  The zones tagged as private use
   are intended for testing purposes and closed environments;
   code points in other ranges should not be assigned for testing.</t>
  <t>Specifications are required for the standards track range of point
   assignment.  Specifications should exist for  all other ranges,
   but early assignment before a specification is
   available is considered to be permissible.
   When specifications are not provided, the description provided
   needs to have sufficient information to identify what the point is
   being used for.</t>
  <t>Experts should take into account the expected usage of fields when
   approving point assignment.  The fact that there is a range for
   standards track documents does not mean that a standards track
   document cannot have points assigned outside of that range.  The
   length of the encoded value should be weighed against how many
   code points of that length are left, the size of device it will be
   used on, and the number of code points left that encode to that
   size.</t>
</list></t>

</section>
<section anchor="media-type-registration"><name>Media Type Registration</name>

<t>This section registers the 'application/suit-envelope' media type in the
"Media Types" registry.  This media type are used to indicate that
the content is a SUIT envelope.</t>

<figure><artwork><![CDATA[
      Type name: application

      Subtype name: suit-envelope

      Required parameters: N/A

      Optional parameters: N/A

      Encoding considerations: binary

      Security considerations: See the Security Considerations section
      of [[This RFC]].

      Interoperability considerations: N/A

      Published specification: [[This RFC]]

      Applications that use this media type: Primarily used for
        Firmware and software updates although the content may
        also contain configuration data and other information
        related to software and firmware.

      Fragment identifier considerations: N/A

      Additional information:

      *  Deprecated alias names for this type: N/A

      *  Magic number(s): N/A

      *  File extension(s): cbor

      *  Macintosh file type code(s): N/A

      Person & email address to contact for further information:
      iesg@ietf.org

      Intended usage: COMMON

      Restrictions on usage: N/A

      Author: Brendan Moran, <brendan.moran.ietf@gmail.com>

      Change Controller: IESG

      Provisional registration?  No
]]></artwork></figure>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Milosch Meriac"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Geraint Luff"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Dan Ros"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="John-Paul Stanford"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Hugo Vincent"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Carsten Bormann"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Frank Audun Kvamtrø"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Krzysztof Chruściński"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Andrzej Puzdrowski"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Michael Richardson"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="David Brown"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Emmanuel Baccelli"/></t>
      </dd>
    </dl>
  </t>
</list></t>

<t>We would like to thank our responsible area director, Roman Danyliw, for his detailed review.
Finally, we would like to thank our SUIT working group chairs (Dave Thaler, David Waltermire, Russ Housley)
for their feedback and support.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>



<reference anchor='RFC4122'>
  <front>
    <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
    <author fullname='P. Leach' initials='P.' surname='Leach'/>
    <author fullname='M. Mealling' initials='M.' surname='Mealling'/>
    <author fullname='R. Salz' initials='R.' surname='Salz'/>
    <date month='July' year='2005'/>
    <abstract>
      <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
      <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='4122'/>
  <seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>

<reference anchor='RFC9052'>
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname='J. Schaad' initials='J.' surname='Schaad'/>
    <date month='August' year='2022'/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name='STD' value='96'/>
  <seriesInfo name='RFC' value='9052'/>
  <seriesInfo name='DOI' value='10.17487/RFC9052'/>
</reference>

<reference anchor='RFC3986'>
  <front>
    <title>Uniform Resource Identifier (URI): Generic Syntax</title>
    <author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'/>
    <author fullname='R. Fielding' initials='R.' surname='Fielding'/>
    <author fullname='L. Masinter' initials='L.' surname='Masinter'/>
    <date month='January' year='2005'/>
    <abstract>
      <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name='STD' value='66'/>
  <seriesInfo name='RFC' value='3986'/>
  <seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>

<reference anchor='RFC8949'>
  <front>
    <title>Concise Binary Object Representation (CBOR)</title>
    <author fullname='C. Bormann' initials='C.' surname='Bormann'/>
    <author fullname='P. Hoffman' initials='P.' surname='Hoffman'/>
    <date month='December' year='2020'/>
    <abstract>
      <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
      <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
    </abstract>
  </front>
  <seriesInfo name='STD' value='94'/>
  <seriesInfo name='RFC' value='8949'/>
  <seriesInfo name='DOI' value='10.17487/RFC8949'/>
</reference>

<reference anchor='RFC9019'>
  <front>
    <title>A Firmware Update Architecture for Internet of Things</title>
    <author fullname='B. Moran' initials='B.' surname='Moran'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <author fullname='D. Brown' initials='D.' surname='Brown'/>
    <author fullname='M. Meriac' initials='M.' surname='Meriac'/>
    <date month='April' year='2021'/>
    <abstract>
      <t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t>
      <t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9019'/>
  <seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>

<reference anchor='RFC9124'>
  <front>
    <title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
    <author fullname='B. Moran' initials='B.' surname='Moran'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <author fullname='H. Birkholz' initials='H.' surname='Birkholz'/>
    <date month='January' year='2022'/>
    <abstract>
      <t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t>
      <t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9124'/>
  <seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>


<reference anchor='I-D.ietf-suit-mti'>
   <front>
      <title>Mandatory-to-Implement Algorithms for Authors and Recipients of Software Update for the Internet of Things manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Øyvind Rønningstad' initials='O.' surname='Rønningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <author fullname='Akira Tsukamoto' initials='A.' surname='Tsukamoto'>
         <organization>ALAXALA Networks Corp.</organization>
      </author>
      <date day='23' month='October' year='2023'/>
      <abstract>
	 <t>   This document specifies algorithm profiles for SUIT manifest parsers
   and authors to ensure better interoperability.  These profiles apply
   specifically to a constrained node software update use case.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-mti-03'/>
   
</reference>

<reference anchor='RFC9090'>
  <front>
    <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
    <author fullname='C. Bormann' initials='C.' surname='Bormann'/>
    <date month='July' year='2021'/>
    <abstract>
      <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
      <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9090'/>
  <seriesInfo name='DOI' value='10.17487/RFC9090'/>
</reference>

<reference anchor='RFC9054'>
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Hash Algorithms</title>
    <author fullname='J. Schaad' initials='J.' surname='Schaad'/>
    <date month='August' year='2022'/>
    <abstract>
      <t>The CBOR Object Signing and Encryption (COSE) syntax (see RFC 9052) does not define any direct methods for using hash algorithms. There are, however, circumstances where hash algorithms are used, such as indirect signatures, where the hash of one or more contents are signed, and identification of an X.509 certificate or other object by the use of a fingerprint. This document defines hash algorithms that are identified by COSE algorithm identifiers.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9054'/>
  <seriesInfo name='DOI' value='10.17487/RFC9054'/>
</reference>

<reference anchor='RFC2119'>
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname='S. Bradner' initials='S.' surname='Bradner'/>
    <date month='March' year='1997'/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='2119'/>
  <seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>

<reference anchor='RFC8174'>
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname='B. Leiba' initials='B.' surname='Leiba'/>
    <date month='May' year='2017'/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='8174'/>
  <seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>



<reference anchor='RFC9397'>
  <front>
    <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
    <author fullname='M. Pei' initials='M.' surname='Pei'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <author fullname='D. Thaler' initials='D.' surname='Thaler'/>
    <author fullname='D. Wheeler' initials='D.' surname='Wheeler'/>
    <date month='July' year='2023'/>
    <abstract>
      <t>A Trusted Execution Environment (TEE) is an environment that enforces the following: any code within the environment cannot be tampered with, and any data used by such code cannot be read or tampered with by any code outside the environment. This architecture document discusses the motivation for designing and standardizing a protocol for managing the lifecycle of Trusted Applications running inside such a TEE.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9397'/>
  <seriesInfo name='DOI' value='10.17487/RFC9397'/>
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Encrypted Payloads in SUIT Manifests</title>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         </author>
      <author fullname='Russ Housley' initials='R.' surname='Housley'>
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='David Brown' initials='D.' surname='Brown'>
         <organization>Linaro</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='23' month='October' year='2023'/>
      <abstract>
	 <t>   This document specifies techniques for encrypting software, firmware,
   machine learning models, and personalization data by utilizing the
   IETF SUIT manifest.  Key agreement is provided by ephemeral-static
   (ES) Diffie-Hellman (DH) and AES Key Wrap (AES-KW).  ES-DH uses
   public key cryptography while AES-KW uses a pre-shared key.
   Encryption of the plaintext is accomplished with conventional
   symmetric key cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-18'/>
   
</reference>


<reference anchor='I-D.ietf-suit-update-management'>
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='23' month='October' year='2023'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-update-management-04'/>
   
</reference>


<reference anchor='I-D.ietf-suit-trust-domains'>
   <front>
      <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='11' month='September' year='2023'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT Manifest format
   (as defined in [I-D.ietf-suit-manifest]) for use in deployments with
   multiple trust domains.  A device has more than one trust domain when
   it enables delegation of different rights to mutually distrusting
   entities for use for different purposes or Components in the context
   of firmware or software update.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-trust-domains-05'/>
   
</reference>


<reference anchor='I-D.ietf-suit-report'>
   <front>
      <title>Secure Reporting of Update Status</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <date day='11' month='September' year='2023'/>
      <abstract>
	 <t>   The Software Update for the Internet of Things (SUIT) manifest
   provides a way for many different update and boot workflows to be
   described by a common format.  However, this does not provide a
   feedback mechanism for developers in the event that an update or boot
   fails.

   This specification describes a lightweight feedback mechanism that
   allows a developer in possession of a manifest to reconstruct the
   decisions made and actions performed by a manifest processor.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-report-07'/>
   
</reference>

<reference anchor='RFC7228'>
  <front>
    <title>Terminology for Constrained-Node Networks</title>
    <author fullname='C. Bormann' initials='C.' surname='Bormann'/>
    <author fullname='M. Ersue' initials='M.' surname='Ersue'/>
    <author fullname='A. Keranen' initials='A.' surname='Keranen'/>
    <date month='May' year='2014'/>
    <abstract>
      <t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks. This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='7228'/>
  <seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>


<reference anchor="YAML" target="https://yaml.org/">
  <front>
    <title>YAML Ain't Markup Language</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="COSE_Alg" target="https://www.iana.org/assignments/cose/cose.xhtml#algorithms">
  <front>
    <title>COSE Algorithms</title>
    <author >
      <organization></organization>
    </author>
    <date year="2023"/>
  </front>
</reference>


    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message <bcp14>MUST</bcp14> adhere to the following CDDL data definition.</t>

<t>To be valid, the following CDDL <bcp14>MUST</bcp14> have the COSE CDDL appended to it. The COSE CDDL can be obtained by following the directions in <xref section="1.4" sectionFormat="comma" target="RFC9052"/>.</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Envelope_Tagged = #6.107(SUIT_Envelope)
SUIT_Envelope = {
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * SUIT_Integrated_Payload,
  * $$SUIT_Envelope_Extensions,
}

SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]

SUIT_Digest = [
  suit-digest-algorithm-id : suit-cose-hash-algs,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

SUIT_Severable_Manifest_Members = (
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  * $$SUIT_severable-members-extensions,
)

SUIT_Integrated_Payload = (suit-integrated-payload-key => bstr)
suit-integrated-payload-key = tstr

SUIT_Manifest_Tagged = #6.1070(SUIT_Manifest)

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Unseverable_Members,
    SUIT_Severable_Members_Choice,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-invoke => bstr .cbor SUIT_Command_Sequence,
  * $$unseverable-manifest-member-extensions,
)

SUIT_Severable_Members_Choice = (
  ? suit-payload-fetch => SUIT_Digest / 
      bstr .cbor SUIT_Command_Sequence,
  ? suit-install => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
  ? suit-text => SUIT_Digest / bstr .cbor SUIT_Text_Map,
  * $$severable-manifest-members-choice-extensions
)

SUIT_Common = {
    ? suit-components             => SUIT_Components,
    ? suit-shared-sequence        => bstr .cbor SUIT_Shared_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Components           = [ + SUIT_Component_Identifier ]

;REQUIRED to implement:
suit-cose-hash-algs /= cose-alg-sha-256

;OPTIONAL to implement:
suit-cose-hash-algs /= cose-alg-shake128
suit-cose-hash-algs /= cose-alg-sha-384
suit-cose-hash-algs /= cose-alg-sha-512
suit-cose-hash-algs /= cose-alg-shake256

SUIT_Component_Identifier =  [* bstr]

SUIT_Shared_Sequence = [
    + ( SUIT_Condition // SUIT_Shared_Commands )
]

SUIT_Shared_Commands //= (suit-directive-set-component-index,  IndexArg)
SUIT_Shared_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Shared_Sequence)
SUIT_Shared_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument_Shared)
SUIT_Shared_Commands //= (suit-directive-override-parameters,
    {+ $$SUIT_Parameters})

IndexArg /= uint
IndexArg /= true
IndexArg /= [+uint]


SUIT_Directive_Try_Each_Argument_Shared = [
    2* bstr .cbor SUIT_Shared_Sequence,
    ?nil
]

SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-component-slot,    SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-check-content,     SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-abort,             SUIT_Rep_Policy)

SUIT_Directive //= (suit-directive-write,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-component-index,  IndexArg)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-override-parameters,
    {+ $$SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-copy,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-swap,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-invoke,            SUIT_Rep_Policy)

SUIT_Directive_Try_Each_Argument = [
    2* bstr .cbor SUIT_Command_Sequence,
    ?nil
]

SUIT_Rep_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

$$SUIT_Parameters //= (suit-parameter-vendor-identifier =>
    (RFC4122_UUID / cbor-pen))

cbor-pen = #6.112(bstr)

$$SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
$$SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
$$SUIT_Parameters //= (suit-parameter-image-size => uint)
$$SUIT_Parameters //= (suit-parameter-component-slot => uint)

$$SUIT_Parameters //= (suit-parameter-uri => tstr)
$$SUIT_Parameters //= (suit-parameter-source-component => uint)
$$SUIT_Parameters //= (suit-parameter-invoke-args => bstr)

$$SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)

$$SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

$$SUIT_Parameters //= (suit-parameter-content => bstr)
$$SUIT_Parameters //= (suit-parameter-strict-order => bool)
$$SUIT_Parameters //= (suit-parameter-soft-failure => bool)

RFC4122_UUID = bstr .size 16

tag38-ltag = text .regexp "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*"
SUIT_Text_Map = {
    + tag38-ltag => SUIT_Text_LMap
}
SUIT_Text_LMap = {
    SUIT_Text_Keys,
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    }
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

suit-authentication-wrapper = 2
suit-manifest = 3

;REQUIRED to implement:
cose-alg-sha-256 = -16

;OPTIONAL to implement:
cose-alg-shake128 = -18
cose-alg-sha-384 = -43
cose-alg-sha-512 = -44
cose-alg-shake256 = -45

;Unseverable, recipient-necessary
suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-validate = 7
suit-load = 8
suit-invoke = 9
;Severable, recipient-necessary
suit-payload-fetch = 16
suit-install = 17
;Severable, recipient-unnecessary
suit-text = 23

suit-components = 2
suit-shared-sequence = 4

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-component-slot    = 5
suit-condition-check-content     = 6

suit-condition-abort                    = 14
suit-condition-device-identifier        = 24

suit-directive-set-component-index      = 12
suit-directive-try-each                 = 15
suit-directive-write                    = 18
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-invoke                   = 23

suit-directive-swap                     = 31
suit-directive-run-sequence             = 32

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-component-slot    = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14
suit-parameter-content           = 18

suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-invoke-args       = 23

suit-parameter-device-identifier = 24

suit-parameter-custom = nint

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
]]></sourcecode></figure>

</section>
<section anchor="examples"><name>B. Examples</name>

<t>The following examples demonstrate a small subset of the functionality of the manifest. Even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<t>Note that reporting policies are declared for each non-flow-control command in these examples. The reporting policies used in the examples are described in the following tables.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Label</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Rec-Pass</c>
      <c>suit-send-record-on-failure</c>
      <c>Rec-Fail</c>
      <c>suit-send-sysinfo-success</c>
      <c>Sys-Pass</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Sys-Fail</c>
</texttable>

<texttable>
      <ttcol align='left'>Command</ttcol>
      <ttcol align='left'>Sys-Fail</ttcol>
      <ttcol align='left'>Sys-Pass</ttcol>
      <ttcol align='left'>Rec-Fail</ttcol>
      <ttcol align='left'>Rec-Pass</ttcol>
      <c>suit-condition-vendor-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-class-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-image-match</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-component-slot</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>1</c>
      <c>suit-directive-fetch</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-copy</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-invoke</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
</texttable>

<section anchor="example-0-secure-boot"><name>Example 0: Secure Boot</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
</list></t>

<t>It also serves as the minimum example.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'6658ea560262696dd1f13b782239a064da7c6c5cbaf52fded428a6fc83c7e5af'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'56acf3c133338f558bbbac1e73a62bffac
2a0067d0f7a2e860e20b9119a61d964af04fb56c2c7618d3d74558c14f5daf7cafa877
1b34ec42160f5c94250a57eb'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:0,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-run / 23,2
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  161</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af035871a50101020003585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f0943821702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  237</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af584ad28443a10126a0f6584056acf3
c133338f558bbbac1e73a62bffac2a0067d0f7a2e860e20b9119a61d964a
f04fb56c2c7618d3d74558c14f5daf7cafa8771b34ec42160f5c94250a57
eb035871a50101020003585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f0943821702
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload"><name>Example 1: Simultaneous Download and Installation of Payload</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Simultaneous download and installation of payload. No secure boot is present in this example to demonstrate a download-only manifest.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'ef14b7091e8adae8aa3bb6fca1d64fb37e19dcf8b35714cfdddc5968c80ff50e'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'9c44e07766a26fd33d41ded913363c0ec7
465c06c30be70df32a73a4dea1bbb353d880d9d1813f7b6f0c6987dc4b289838468477
9c17ca9062085487254cf203'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:1,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  196</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820ef14b7091e8adae8aa3bb6fca1d64fb37e
19dcf8b35714cfdddc5968c80ff50e035894a50101020103585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f1158258614a115781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  272</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820ef14b7091e8adae8aa3bb6fca1d64fb37e
19dcf8b35714cfdddc5968c80ff50e584ad28443a10126a0f658409c44e0
7766a26fd33d41ded913363c0ec7465c06c30be70df32a73a4dea1bbb353
d880d9d1813f7b6f0c6987dc4b2898384684779c17ca9062085487254cf2
03035894a50101020103585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f1158258614a11578
1b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502
030f
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-secure-boot-severed-fields"><name>Example 2: Simultaneous Download, Installation, Secure Boot, Severed Fields</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>This example also demonstrates severable elements (<xref target="ovr-severable"/>), and text (<xref target="manifest-digest-text"/>).</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'56c894f743ca34ff0ae76271f964dcb8c139edb4a8dc64b01444504620be28a8'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'd6fc4cd4119a261c9e7f782226a235aa06
960781a537064131238203e9fcde17f9a04e09f6ace03ef861971ef3d4b519558cdd96
6a6303e7e82783d6b2a99cf2'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:2,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / reference-uri / 4:'https://git.io/JJYoj',
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-run / 23,2
            ] >>,
            / install / 17:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'cfa90c5c58595e7f5119a72f803fd0370b3e6abbec6315cd38f63135281bc498'
            ],
            / text / 23:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'302196d452bce5e8bfeaf71e395645ede6d365e63507a081379721eeecf00007'
            ],
        } >>,
    })
]]></artwork></figure>

<t>Total size of the Envelope without COSE authentication object or Severable Elements:  257</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f582056c894f743ca34ff0ae76271f964dcb8c1
39edb4a8dc64b01444504620be28a80358d1a80101020203585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f047468747470733a2f2f6769742e696f2f4a4a596f6a074382030f0943
82170211822f5820cfa90c5c58595e7f5119a72f803fd0370b3e6abbec63
15cd38f63135281bc49817822f5820302196d452bce5e8bfeaf71e395645
ede6d365e63507a081379721eeecf00007
]]></artwork></figure>
<t>Total size of the Envelope with COSE authentication object but without Severable Elements:  333</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f582056c894f743ca34ff0ae76271f964dcb8c1
39edb4a8dc64b01444504620be28a8584ad28443a10126a0f65840d6fc4c
d4119a261c9e7f782226a235aa06960781a537064131238203e9fcde17f9
a04e09f6ace03ef861971ef3d4b519558cdd966a6303e7e82783d6b2a99c
f20358d1a80101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f047468747470733a2f2f676974
2e696f2f4a4a596f6a074382030f094382170211822f5820cfa90c5c5859
5e7f5119a72f803fd0370b3e6abbec6315cd38f63135281bc49817822f58
20302196d452bce5e8bfeaf71e395645ede6d365e63507a081379721eeec
f00007
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object and Severable Elements:  923</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba4025873825824822f582056c894f743ca34ff0ae76271f964dcb8c1
39edb4a8dc64b01444504620be28a8584ad28443a10126a0f65840d6fc4c
d4119a261c9e7f782226a235aa06960781a537064131238203e9fcde17f9
a04e09f6ace03ef861971ef3d4b519558cdd966a6303e7e82783d6b2a99c
f20358d1a80101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f047468747470733a2f2f676974
2e696f2f4a4a596f6a074382030f094382170211822f5820cfa90c5c5859
5e7f5119a72f803fd0370b3e6abbec6315cd38f63135281bc49817822f58
20302196d452bce5e8bfeaf71e395645ede6d365e63507a081379721eeec
f0000711583c8614a1157832687474703a2f2f6578616d706c652e636f6d
2f766572792f6c6f6e672f706174682f746f2f66696c652f66696c652e62
696e1502030f1759020ba165656e2d5553a20179019d2323204578616d70
6c6520323a2053696d756c74616e656f757320446f776e6c6f61642c2049
6e7374616c6c6174696f6e2c2053656375726520426f6f742c2053657665
726564204669656c64730a0a2020202054686973206578616d706c652063
6f766572732074686520666f6c6c6f77696e672074656d706c617465733a
0a202020200a202020202a20436f6d7061746962696c6974792043686563
6b20287b7b74656d706c6174652d636f6d7061746962696c6974792d6368
65636b7d7d290a202020202a2053656375726520426f6f7420287b7b7465
6d706c6174652d7365637572652d626f6f747d7d290a202020202a204669
726d7761726520446f776e6c6f616420287b7b6669726d776172652d646f
776e6c6f61642d74656d706c6174657d7d290a202020200a202020205468
6973206578616d706c6520616c736f2064656d6f6e737472617465732073
6576657261626c6520656c656d656e747320287b7b6f76722d7365766572
61626c657d7d292c20616e64207465787420287b7b6d616e69666573742d
6469676573742d746578747d7d292e814100a2036761726d2e636f6d0578
525468697320636f6d706f6e656e7420697320612064656d6f6e73747261
74696f6e2e205468652064696765737420697320612073616d706c652070
61747465726e2c206e6f742061207265616c206f6e652e
]]></artwork></figure>

</section>
<section anchor="example-3-ab-images"><name>Example 3: A/B images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>A/B Image Template (<xref target="a-b-template"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'b3e6a52776bf3ed218feba031c609c98260e1a52fc1f019683edb6d1c5c4a379'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'a72d9dabc04af139a0a5b3ef775234b9ed
1c2390e03ffa1454458b2394cca16aced37039bbf84ea898a54a242d0d04883f22135a
9b98efe042015041f0142d4e'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:3,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    } ,
                    / directive-try-each / 15,[
                        << [
                            / directive-override-parameters / 20,{
                                / slot / 5:0,
                            } ,
                            / condition-component-slot / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<< [
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                                ] >>,
                                / image-size / 14:34768,
                            }
                        ] >> ,
                        << [
                            / directive-override-parameters / 20,{
                                / slot / 5:1,
                            } ,
                            / condition-component-slot / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<< [
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                                ] >>,
                                / image-size / 14:76834,
                            }
                        ] >>
                    ] ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-try-each / 15,[
                    << [
                        / directive-override-parameters / 20,{
                            / slot / 5:0,
                        } ,
                        / condition-component-slot / 5,5 ,
                        / directive-override-parameters / 20,{
                            / uri / 21:'http://example.com/file1.bin',
                        }
                    ] >> ,
                    << [
                        / directive-override-parameters / 20,{
                            / slot / 5:1,
                        } ,
                        / condition-component-slot / 5,5 ,
                        / directive-override-parameters / 20,{
                            / uri / 21:'http://example.com/file2.bin',
                        }
                    ] >>
                ] ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  320</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820b3e6a52776bf3ed218feba031c609c9826
0e1a52fc1f019683edb6d1c5c4a3790359010fa5010102030358a4a20281
81410004589b8814a20150fa6b4a53d5ad5fdfbe9de663e4d41ffe025014
92af1425695e48bf429b2d51f2ab450f8258348614a10500050514a20358
24822f582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d058368614a10501050514a2035824822f582001
23456789abcdeffedcba987654321000112233445566778899aabbccddee
ff0e1a00012c22010f020f074382030f11585b860f8258288614a1050005
0514a115781c687474703a2f2f6578616d706c652e636f6d2f66696c6531
2e62696e58288614a10501050514a115781c687474703a2f2f6578616d70
6c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  396</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820b3e6a52776bf3ed218feba031c609c9826
0e1a52fc1f019683edb6d1c5c4a379584ad28443a10126a0f65840a72d9d
abc04af139a0a5b3ef775234b9ed1c2390e03ffa1454458b2394cca16ace
d37039bbf84ea898a54a242d0d04883f22135a9b98efe042015041f0142d
4e0359010fa5010102030358a4a2028181410004589b8814a20150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450f8258348614a10500050514a2035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0583686
14a10501050514a2035824822f58200123456789abcdeffedcba98765432
1000112233445566778899aabbccddeeff0e1a00012c22010f020f074382
030f11585b860f8258288614a10500050514a115781c687474703a2f2f65
78616d706c652e636f6d2f66696c65312e62696e58288614a10501050514
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

</section>
<section anchor="example-4-load-from-external-storage"><name>Example 4: Load from External Storage</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>Install (<xref target="template-install"/>)</t>
  <t>Load (<xref target="template-load-ext"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'838eb848698c9d9dd29b5930102ea1f29743857d975f52ed4d19589b821e82cf'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'42e4185517635842a5715c63772436588c
c366d6a4c2beff3f3e0736806062c4208a756da9cfb0cc1325168eb3c743834b5f5a5d
c00b33acd2a9073c6eb09e5c'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:4,
            / common / 3:<< {
                / components / 2:[
                    [h'00'] ,
                    [h'02'] ,
                    [h'01']
                ],
                / shared-sequence / 4:<< [
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15
            ] >>,
            / load / 8:<< [
                / directive-set-component-index / 12,2 ,
                / directive-override-parameters / 20,{
                    / image-digest / 3:<< [
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ] >>,
                    / image-size / 14:76834,
                    / source-component / 22:0 / [h'00'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-set-component-index / 12,2 ,
                / directive-run / 23,2
            ] >>,
            / payload-fetch / 16:<< [
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / image-digest / 3:<< [
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ] >>,
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / source-component / 22:1 / [h'02'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  327</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820838eb848698c9d9dd29b5930102ea1f297
43857d975f52ed4d19589b821e82cf03590116a801010204035867a20283
814100814102814101045858880c0014a40150fa6b4a53d5ad5fdfbe9de6
63e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820
00112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100e1987d0010f020f0745840c00030f085838880c0214a3035824822f
58200123456789abcdeffedcba987654321000112233445566778899aabb
ccddeeff0e1a00012c2216001602030f0945840c02170210584e880c0114
a2035824822f582000112233445566778899aabbccddeeff0123456789ab
cdeffedcba987654321015781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e1502030f114b880c0014a116011602030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  403</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820838eb848698c9d9dd29b5930102ea1f297
43857d975f52ed4d19589b821e82cf584ad28443a10126a0f6584042e418
5517635842a5715c63772436588cc366d6a4c2beff3f3e0736806062c420
8a756da9cfb0cc1325168eb3c743834b5f5a5dc00b33acd2a9073c6eb09e
5c03590116a801010204035867a20283814100814102814101045858880c
0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e
48bf429b2d51f2ab45035824822f582000112233445566778899aabbccdd
eeff0123456789abcdeffedcba98765432100e1987d0010f020f0745840c
00030f085838880c0214a3035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c2216001602
030f0945840c02170210584e880c0114a2035824822f5820001122334455
66778899aabbccddeeff0123456789abcdeffedcba987654321015781b68
7474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502030f
114b880c0014a116011602030f
]]></artwork></figure>

</section>
<section anchor="example-5-two-images"><name>Example 5: Two Images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Furthermore, it shows using these templates with two images.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'264dc89eb4a39ae7a8ed05e4d6232153bce4fb9a111a31310b90627d1edfc3bb'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'9350fcb80d59f9be2a923bc144c5f64022
b57d18ccddd9c0477a5be608b04200689373d42fc42fc154dce2d54255d64be9f5bd55
efddb5de22354ec0894e979a'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:5,
            / common / 3:<< {
                / components / 2:[
                    [h'00'] ,
                    [h'01']
                ],
                / shared-sequence / 4:<< [
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15 ,
                    / directive-set-component-index / 12,1 ,
                    / directive-override-parameters / 20,{
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                        ] >>,
                        / image-size / 14:76834,
                    }
                ] >>,
            } >>,
            / validate / 7:<< [
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-set-component-index / 12,0 ,
                / directive-run / 23,2
            ] >>,
            / install / 17:<< [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file1.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file2.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  306</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820264dc89eb4a39ae7a8ed05e4d6232153bc
e4fb9a111a31310b90627d1edfc3bb03590101a601010205035895a20282
8141008141010458898c0c0014a40150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820001122
33445566778899aabbccddeeff0123456789abcdeffedcba98765432100e
1987d0010f020f0c0114a2035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c220749880c
00030f0c01030f0945840c00170211584f900c0014a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65312e62696e1502030f0c0114
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  382</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820264dc89eb4a39ae7a8ed05e4d6232153bc
e4fb9a111a31310b90627d1edfc3bb584ad28443a10126a0f658409350fc
b80d59f9be2a923bc144c5f64022b57d18ccddd9c0477a5be608b0420068
9373d42fc42fc154dce2d54255d64be9f5bd55efddb5de22354ec0894e97
9a03590101a601010205035895a202828141008141010458898c0c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab45035824822f582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d0010f020f0c0114a2035824
822f58200123456789abcdeffedcba987654321000112233445566778899
aabbccddeeff0e1a00012c220749880c00030f0c01030f0945840c001702
11584f900c0014a115781c687474703a2f2f6578616d706c652e636f6d2f
66696c65312e62696e1502030f0c0114a115781c687474703a2f2f657861
6d706c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

</section>
</section>
<section anchor="design-rationale"><name>C. Design Rational</name>

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted invocation operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted invocation of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency's commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope"><name>C.1 Design Rationale: Envelope</name>

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of Severable Elements (<xref target="severable-fields"/>)</t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers"><name>C.2 Byte String Wrappers</name>

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the shared sequence. The shared sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>
<section anchor="implementation-matrix"><name>D. Implementation Conformance Matrix</name>

<t>This section summarizes the functionality a minimal manifest processor
implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Class Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Device Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Check Content</c>
      <c><xref target="suit-condition-check-content"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c><bcp14>REQUIRED</bcp14> if more than one component</c>
      <c>Write Content</c>
      <c><xref target="suit-directive-write"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c><bcp14>REQUIRED</bcp14> for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Invoke</c>
      <c><xref target="suit-directive-invoke"/></c>
      <c><bcp14>REQUIRED</bcp14> for Bootloader</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Content</c>
      <c><xref target="suit-parameter-content"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c><bcp14>REQUIRED</bcp14> for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Invoke Args</c>
      <c><xref target="suit-parameter-invoke-args"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+y963YcV3Im+r+eIg85ywLUVUUCpNQS2mobBEmLbt6GoLqn
R63DlahKFLJZlVmdmQWwRNK/zkPMWuePH2N+22ve68R9x85LAWRrjmc81lp2
E5WZ+xo7dly+iJhMJqPLo+TeaNTkzTI7So6Tk7KY5XWWPMiLtNomL87+nM2a
5FW2rrI6K5q0ycsi2Tt58OLV/uQsrbN5cppVebrMf+ZHj8tqlTbJeVklzUWW
nJbnzVVaZckP63naZDU9eFI0WVVkTVKeJ68v8mJRJ3unPzx5vZ88S4v8PKub
UXp2VmUwNOxI+4E3wgvzclakKxjyvErPm0meNeeTepM3k5W8MTm8P8rX1VHS
VJu6Obx799u7h6MZjGFRVtujpG7mo7qpsnR1lDx59PrxaASjTI9gNrNNlTfb
0VVZvV1U5WZ9RD2P3mZb+Gl+ZKOfPMSeR6N1fjRKkup8ls3rZouruM1q+KUp
Z+6feTGH5dMf6rKCvs9r+3u7iv5sqnxmL8/K1Qq+tad5scyL0E32rpksc5gw
NHJWLuG1Sfnlr+AJLNEqXa9hfd043iyzywxfug8z3jQXZQWjn8Az/C8v4MGD
afKsrNJCfuNVflBlxTwtoidltYC15n0H0qlWydN8lTfZXJ5nqzRfHiVn/Ol0
hZ9OcaP+foFPpjCvUavv76fJ63p2UZ5nRb6IBvB9WhRAPp2n0skFPZ429hj6
eDeFXerp4UFevb0olz/H7WfF2/aTeIKPq3RTYOtVcgr0EHcPX0/P5Ou/r/Nm
em5vT+dZexC/myb/NS3mZ1kVT/J3ZVa0n8SDeFLAYYv7fgsfTX+Wj/4+xxeg
93aX//rfpsmrf/3vRYHHrUnnUb//+t+2l0CgfS/E3T+HE5DP4JCs8llZzDez
pqzi0ZTU0rQqrSG/2wVxh/wywyPz6vHJ/YPDQ/nnt3e/OjwCWq+z0W394R7/
MEmXi5rfuvftN1/LB998e/9b+/bA/nlweB//+WTycOqYQpPbq9/ehVHmc+v1
PlJPfcGdjEZ5cd4a5Lf3vv11t8nzvFohZ5tkxazarml9Oi9tiOshT0oXGR7i
7ivEnibzEhYJ9qnzuMrWwCtkJL8+PPwG//nH42dPj2jdhW/fwl+S47z4ogEW
Wb3drJOnabHYQK+36D076vAfDukoObx7eJebSKtFBszmomnW9dGdO9t0tZzC
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
UwIA

-->

</rfc>

