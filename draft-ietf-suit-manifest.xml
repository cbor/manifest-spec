<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-17" category="std">

  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>

    <date year="2022" month="July" day="11"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about code/data obtained by a recipient (chiefly
the firmware for an IoT device), where to find the that code/data, the
devices to which it applies, and cryptographic information protecting
the manifest. Software updates and Trusted Invocation both tend to use
sequences of common operations, so the manifest encodes those sequences
of operations, rather than declaring the metadata.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata describing one or more code or data payloads and how to:</t>

<t><list style="symbols">
  <t>Obtain any dependencies</t>
  <t>Obtain the payload(s)</t>
  <t>Install them</t>
  <t>Verify them</t>
  <t>Load them into memory</t>
  <t>Invoke them</t>
</list></t>

<t>This specification defines the SUIT manifest format and it is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="RFC9124"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>a Firmware Author to reason about releasing a firmware.</t>
  <t>a Network Operator to reason about compatibility of a firmware.</t>
  <t>a Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>a Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>a device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>a device to reason about the applicability of a firmware.</t>
  <t>a device to reason about the installation of a firmware.</t>
  <t>a device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="RFC9019"/> and the threats, requirements, and user stories in <xref target="RFC9124"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or Trusted Invocation are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In this document, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the language is tailored to software updates and Trusted Invocation.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and Trusted Invocation use cases, there is nothing in the SUIT Information Model (<xref target="RFC9124"/>) that restricts its use to only those use cases. Other use cases include the management of trusted applications (TAs) in a Trusted Execution Environment (TEE), as discussed in <xref target="I-D.ietf-teep-architecture"/>.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient's storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document"><name>How to use this Document</name>

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rational is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> gives a summarize of the mandatory-to-implement features of this specification.</t>

<t>This specification covers the core features of SUIT. Additional specifications describe functionality of advanced use cases, such as:</t>

<t><list style="symbols">
  <t>Firmware Encryption is covered in <xref target="I-D.ietf-suit-firmware-encryption"/></t>
  <t>Update Management is covered in <xref target="I-D.ietf-suit-update-management"/></t>
  <t>Features, such as dependencies, key delegation, multiple processors, required by the use of multiple trust domains are covered in <xref target="I-D.ietf-suit-trust-domains"/></t>
  <t>Secure reporting of the update status is covered in <xref target="I-D.ietf-suit-report"/></t>
  <t>Compression of firmware images</t>
</list></t>

</section>
<section anchor="background"><name>Background</name>

<t>Distributing software updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="RFC9019"/>. The security aspects are described in <xref target="RFC9124"/>.</t>

<section anchor="iot-firmware-update-constraints"><name>IoT Firmware Update Constraints</name>

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivered to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model"><name>SUIT Workflow Model</name>

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Invocation Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Run image(s).</t>
</list></t>

<t>If verification and running is implemented in a bootloader, then the bootloader MUST also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader may add its own authentication, e.g. a Message Authentication Code (MAC), to the manifest in order to prevent further verifications.</t>

</section>
</section>
<section anchor="metadata-structure-overview"><name>Metadata Structure Overview</name>

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest..</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, such as affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable elements.</t>
    </list></t>
  <t>Severable elements (see <xref target="ovr-severable"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| Integrated Payloads     |          | Structure Version            |
+-------------------------+          | Sequence Number              |
                                     | Reference to Full Manifest   |
                               +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Components IDs          |      +-> +-----------------------+
| Common Command Sequence ---------> | Command Sequence      |
+-------------------------+          +-----------------------+
                                     | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope"><name>Envelope</name>

<t>The SUIT Envelope is a container that encloses the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that would add substantial complexity with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-auth"><name>Authentication Block</name>

<t>The Authentication Block contains a bstr-wrapped SUIT Digest Container, see <xref target="SUIT_Digest"/>, and one or more <xref target="RFC8152"/> CBOR Object Signing and Encryption (COSE) authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>Each of these objects is used in detached payload mode. The payload is the bstr-wrapped SUIT_Digest.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest"><name>Manifest</name>

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical"><name>Critical Metadata</name>

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which manifest is newest and whether the structure version is supported. It also MAY provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, and <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common"><name>Common</name>

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of two parts: a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence MUST NOT have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/> for more detail.</t>

</section>
<section anchor="ovr-commands"><name>Command Sequences</name>

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Payload Fetch, and Payload Installation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Invocation Command Sequences are: System Validation, Image Loading, and Image Invocation. An Invocation Procedure is the complete set of each Invocation Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command (dependencies are not defined in this specification).</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity"><name>Integrity Check Values</name>

<t>To enable <xref target="ovr-severable"/>, there needs to be a mechanism to verify integrity of any metadata outside the manifest. Integrity Check Values are used to verify the integrity of metadata that is not contained in the manifest. This MAY include Severable Command Sequences, or Text data. Integrated Payloads are integrity-checked using Command Sequences, so they do not have Integrity Check Values present in the Manifest.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text"><name>Human-Readable Text</name>

<t>Text is typically a Severable Element (<xref target="ovr-severable"/>). It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable"><name>Â Severable Elements</name>

<t>Severable Elements are elements of the Envelope (<xref target="ovr-envelope"/>) that have Integrity Check Values (<xref target="ovr-integrity"/>) in the Manifest (<xref target="ovr-manifest"/>).</t>

<t>Because of this organisation, these elements can be discarded or "Severed" from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system severs the Text sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated"><name>Integrated Payloads</name>

<t>In some cases, it is beneficial to include a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest's envelope.</t>
</list></t>

<t>See <xref target="template-integrated-payload"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior"><name>Manifest Processor Behavior</name>

<t>This section describes the behavior of the manifest processor and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the manifest processor: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup"><name>Manifest Processor Setup</name>

<t>Prior to executing any command sequence, the manifest processor or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the manifest processor or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the manifest processor can choose between several manifests, it MUST select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest, according to application-specific policy.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported Component Identifier encountered.</t>
  <t>Payload not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Payload verification failed.</t>
  <t>Missing required component from a Component Set.</t>
  <t>Required parameter not supplied.</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Selecting an older manifest in the event of failure of the latest valid manifest is a robustness mechanism that is necessary for supporting the requirements in <xref target="RFC9019"/>, section 3.5. It may not be appropriate for all applications. In particular Trusted Execution Environments MAY require a failure to invoke a new installation, rather than a rollback approach. See <xref target="RFC9124"/>, Section 4.2.1 for more discussion on the security considerations that apply to rollback.</t>

<t>Following these initial tests, the manifest processor clears all parameter storage. This ensures that the manifest processor begins without any leaked data.</t>

</section>
<section anchor="required-checks"><name>Â Required Checks</name>

<t>The RECOMMENDED process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a Recipient receives an incompatible manifest.</t>

<t>When validating authenticity of manifests, the manifest processor MAY use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity.</t>

<t>Once a valid, authentic manifest has been selected, the manifest processor MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component is supported.</t>

<t>For each listed component, the manifest processor MUST provide storage for the supported parameters. If the manifest processor does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The manifest processor SHOULD check that the common sequence contains at least Check Vendor Identifier command and at least one Check Class Identifier command.</t>

<t>Because the common sequence contains Check Vendor Identifier and Check Class Identifier command(s), no custom commands are permitted in the common sequence. This ensures that any custom commands are only executed by devices that understand them.</t>

<t>If the manifest contains more than one component, each command sequence MUST begin with a Set Component Index.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by one update, that is the manifest:</t>

<t><list style="numbers">
  <t>has sufficient permissions imparted by its signatures</t>
  <t>specifies a digest and a payload for every Component in the Component Set.</t>
</list></t>

<section anchor="minimal-sigs"><name>Minimizing Signature Verifications</name>

<t>Signature verification can be energy and time expensive on a constrained device. MAC verification is typically unaffected by these concerns. A Recipient MAY choose to parse and execute only the SUIT_Common section of the manifest prior to signature verification, if all of the below apply:</t>

<t><list style="symbols">
  <t>The Authentication Block contains a COSE_Sign_Tagged or COSE_Sign1_Tagged</t>
  <t>The Recipient receives manifests over an unauthenticated channel, exposing it to more inauthentic or incompatible manifests, and</t>
  <t>The Recipient has a power budget that makes signature verification undesirable</t>
</list></t>

<t>When executing Common prior to authenticity validation, the Manifest Processor MUST first evaluate the integrity of the manifest using the SUIT_Digest present in the authentication block.</t>

<t>The guidelines in Creating Manifests (<xref target="creating-manifests"/>) require that the common section contains the applicability checks, so this section is sufficient for applicability verification. The parser MUST restrict acceptable commands to conditions and the following directives: Override Parameters, Set Parameters, Try Each, and Run Sequence ONLY. The manifest parser MUST NOT execute any command with side-effects outside the parser (for example, Run, Copy, Swap, or Fetch commands) prior to authentication and any such command MUST Abort. The Common Sequence MUST be executed again, in its entirety, after authenticity validation.</t>

<t>A Recipient MAY rely on network infrastructure to filter inapplicable manifests.</t>

</section>
</section>
<section anchor="interpreter-fundamental-properties"><name>Interpreter Fundamental Properties</name>

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a Trusted Invocation MUST either result in an error, or an invoked image.</t>
  <t>Executing the same manifest on multiple Recipients MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

<section anchor="resilience-to-disruption"><name>Resilience to Disruption</name>

<t>As required in Section 3 of RFC9019 and as an extension of design goal 1, devices must remain operable after a disruption, such as a power failure or network interruption, interrupts the update process.</t>

<t>The manifest processor must be resilient to these faults. In order to enable this resilience, systems implementing the manifest processor MUST make the following guarantees:</t>

<t>Either:
1. A fallback/recovery image is provided so that a disrupted system can apply the SUIT Manifest again.
2. Manifests are constructed so that repeated partial invocations of any manifest sequence always results in a correct system configuration.
3. A journal of manifest operations is stored in nonvolatile memory so that a repeated invocation does not alter nonvolatile memory up until the point of the previous failure. The journal enables the parser to recreate the processor state just prior to the disruption. This journal can be, for example, a SUIT Report. This report can be used to resume processing of the manifest from the point of failure.</t>

<t>AND</t>

<t><list style="numbers">
  <t>Where a command is not repeatable because of the way in which it alters system state (e.g. swapping images or in-place delta) it MUST be resumable or revertible. This applies to commands that modify at least one source component as well as the destination component.</t>
</list></t>

</section>
</section>
<section anchor="command-behavior"><name>Abstract Machine Description</name>

<t>The heart of the manifest is the list of commands, which are processed by a Manifest Processor--a form of interpreter. This Manifest Processor can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>Conditions MUST NOT have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag (<xref target="suit-parameter-soft-failure"/>) is set when a Condition reports failure.</t>

<t>Directives MAY have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter MUST Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>To simplify the logic describing the command semantics, the object "current" is used. It represents the component identified by the Component Index:</t>

<figure><artwork><![CDATA[
current := components\[component-index\]
]]></artwork></figure>

<t>As a result, Set Component Index is described as current := components[arg].</t>

<t>The following table describes the behavior of each command. "params" represents the parameters for the current component. Most commands operate on a component.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for-each k,v in arg</c>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in params for-each k,v in arg</c>
      <c>Run</c>
      <c>run(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Slot</c>
      <c>assert(current.slot-index == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>try-each-done if exec(seq) is not error for-each seq in arg</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Run with Arguments</c>
      <c>run(current, arg)</c>
</texttable>

</section>
<section anchor="index-true"><name>Special Cases of Component Index</name>

<t>Component Index can take on one of three types:</t>

<t><list style="numbers">
  <t>Integer</t>
  <t>Array of integers</t>
  <t>True</t>
</list></t>

<t>Integers MUST always be supported by Set Component Index. Arrays of integers MUST be supported by Set Component Index if the Recipient supports 3 or more components. True MUST be supported by Set Component Index if the Recipient supports 2 or more components. Each of these operates on the list of components declared in the manifest.</t>

<t>Integer indices are the default case as described in the previous section. An array of integers represents a list of the components (Set Component Index) to which each subsequent command applies. The value True replaces the list of component indices with the full list of components, as defined in the manifest.</t>

<t>When a command is executed, it either 1. operates on the component identified by the component index if that index is an integer, or 2. it operates on each component identified by an array of indicies, or 3. it operates on every component if the index is the boolean True. This is described by the following pseudocode:</t>

<figure><artwork><![CDATA[
if component-index is true:
    current-list = components
else if component-index is array:
    current-list = [ components[idx] for idx in component-index ]
else:
    current-list = [ components[component-index] ]
for current in current-list:
    cmd(current)
]]></artwork></figure>

<t>Try Each and Run Sequence are affected in the same way as other commands: they are invoked once for each possible Component. This means that the sequences that are arguments to Try Each and Run Sequence are NOT invoked with Component Index = True, nor are they invoked with array indices. They are only invoked with integer indices. The interpreter loops over the whole sequence, setting the Component Index to each index in turn.</t>

</section>
<section anchor="serial-processing"><name>Serialized Processing Interpreter</name>

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor MAY handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

<t>When a serialized Manifest Processor encounters a component index of True, it does not ignore any commands. It applies them to the current component on each iteration.</t>

</section>
<section anchor="parallel-processing"><name>Parallel Processing Interpreter</name>

<t>Advanced Recipients MAY make use of the Strict Order parameter and enable parallel processing of some Command Sequences, or it may reorder some Command Sequences. To perform parallel processing, once the Strict Order parameter is set to False, the Recipient may issue each or every command concurrently until the Strict Order parameter is returned to True or the Command Sequence ends. Then, it waits for all issued commands to complete before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the Recipient consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>When the manifest processor encounters any of these scenarios the parallel processing MUST halt until all issued commands have completed:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, a manifest author may collect sequences of commands in a Run Sequence command. Then, each of these sequences MAY be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence MUST begin with a Set Component Index directive with the following exception: when the index is either True or an array of indices, the Set Component Index is implied. Any further Set Component Index directives MUST cause an Abort. This allows the interpreter that issues Run Sequence commands to check that the first element is correct, then issue the sequence to a parallel execution context to handle the remainder of the sequence.</t>

</section>
</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC8152"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>The author MUST ensure that all parameters consumed by a command are set prior to invoking that command. Where Component Index = True, this means that the parameters consumed by each command MUST have been set for each Component.</t>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<t>NOTE: On systems that support only a single component, Set Component Index has no effect and can be omitted.</t>

<t>NOTE: <strong>A digest MUST always be set using Override Parameters.</strong></t>

<section anchor="template-compatibility-check"><name>Compatibility Check Template</name>

<t>The goal of the compatibility check template ensure that Recipients only install compatible images.</t>

<t>In this template all information is contained in the common sequence and the following sequence of commands is used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="uuid-identifiers"/>)</t>
  <t>Check Class Identifier condition (see <xref target="uuid-identifiers"/>)</t>
</list></t>

</section>
<section anchor="template-secure-boot"><name>Trusted Invocation Template</name>

<t>The goal of the Trusted Invocation template is to ensure that only authorized code is invoked; such as in Secure Boot or when a Trusted Application is loaded into a TEE.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>The system validation sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>Then, the run sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Run directive (see <xref target="suit-directive-run-sequence"/>)</t>
</list></t>

</section>
<section anchor="firmware-download-template"><name>Component Download Template</name>

<t>The goal of the Component Download template is to acquire and store an image.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI (see <xref target="suit-parameter-uri"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-install"><name>Install Template</name>

<t>The goal of the Install template is to use an image already stored in an identified component to copy into a second component.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: the Component Download operations are moved from the Payload Install sequence to the Payload Fetch sequence.</t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="suit-parameter-source-component"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-integrated-payload"><name>Integrated Payload Template</name>

<t>The goal of the Integrated Payload template is to install a payload that is included in the manifest envelope. It is identical to the Component Download template (<xref target="firmware-download-template"/>).</t>

<t>An implementer MAY choose to place a payload in the envelope of a manifest. The payload envelope key MUST be a string. The payload MUST be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way MAY be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4.</t>

<t>A distributor MAY choose to pre-fetch a payload and add it to the manifest envelope, using the URI as the key.</t>

</section>
<section anchor="template-load-ext"><name>Load from Nonvolatile Storage Template</name>

<t>The goal of the Load from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="a-b-template"><name>A/B Image Template</name>

<t>The goal of the A/B Image Template is to acquire, validate, and invoke one of two images, based on a test.</t>

<t>The following commands are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following commands are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

<t>If Trusted Invocation (<xref target="template-secure-boot"/>) is used, only the run sequence is added to this template, since the common sequence is populated by this template:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
    </list></t>
  <t>Run</t>
</list></t>

<t>NOTE: Any test can be used to select between images, Check Slot Condition is used in this template because it is a typical test for execute-in-place devices.</t>

</section>
</section>
<section anchor="metadata-structure"><name>Metadata Structure</name>

<t>The metadata for SUIT updates is composed of several primary constituent parts: the Envelope, Authentication Information, Manifest, and Severable Elements.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding-considerations"><name>Encoding Considerations</name>

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialized variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific values, as described in <xref target="iana"/>.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

<t>All CBOR maps in the Manifest and manifest envelope MUST be encoded with the canonical CBOR ordering as defined in <xref target="RFC8949"/>.</t>

</section>
<section anchor="envelope"><name>Envelope</name>

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="authentication-info"><name>Authenticated Manifests</name>

<t>The suit-authentication-wrapper contains a SUIT Digest Container (see <xref target="SUIT_Digest"/>) and one or more SUIT Authentication Blocks. The SUIT_Digest carries the result of computing the indicated hash algorithm over the suit-manifest element. A signing application MUST verify the suit-manifest element against the SUIT_Digest prior to signing. A SUIT Authentication Block is implemented as COSE_Mac_Tagged, COSE_Mac0_Tagged, COSE_Sign_Tagged or COSE_Sign1_Tagged structures with detached payloads, as described in RFC 8152 <xref target="RFC8152"/>.</t>

<t>For COSE_Sign and COSE_Sign1 a special signature structure (called Sig_structure) has to be created onto which the selected digital signature algorithm is applied to, see Section 4.4 of <xref target="RFC8152"/> for details. This specification requires Sig_structure to be populated as follows:
* The external_aad field MUST be set to a zero-length binary string (i.e. there is no external additional authenticated data).
* The payload field contains the SUIT_Digest wrapped in a bstr, as per the requirements in Section 4.4 of RFC 8152.
All other fields in the Sig_structure are populated as described in Section 4.4 of <xref target="RFC8152"/>.</t>

<t>Likewise, Section 6.3 of <xref target="RFC8152"/> describes the details for computing a MAC and the fields of the MAC_structure need to be populated. The rules for external_aad and the payload fields described in the paragraph above also apply to this structure.</t>

<t>The suit-authentication-wrapper MUST come before the suit-manifest element, regardless of canonical encoding of CBOR.</t>

<t>A SUIT_Envelope that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be a list containing only the SUIT_Digest.</t>

<t>The algorithms used in SUIT_Authentication are defined by the profiles declared in <xref target="I-D.moran-suit-mti"/>.</t>

</section>
<section anchor="manifest-structure"><name>Manifest</name>

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
</list></t>

<t>The Text section, or any Command Sequence of the Update Procedure (Image Fetch, Image Installation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable element. Severable elements are RECOMMENDED to implement. In particular, the human-readable text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version"><name>suit-manifest-version</name>

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED to implement.</t>

</section>
<section anchor="manifest-seqnr"><name>suit-manifest-sequence-number</name>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. Each Recipient MUST reject any manifest that has a sequence number lower than its current sequence number. For convenience, an implementer MAY use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED to implement.</t>

</section>
<section anchor="manifest-reference-uri"><name>suit-reference-uri</name>

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.</t>

</section>
<section anchor="manifest-digest-text"><name>suit-text</name>

<t>suit-text SHOULD be a severable element. suit-text is a map containing two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text</t>
  <t>SUIT_Component_Identifier =&gt; map</t>
</list></t>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text MUST also be present in suit-common (<xref target="manifest-common"/>).</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The YAML (<xref target="YAML"/>)-formatted document that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A free text representation of the component version</c>
</texttable>

<t>suit-text is OPTIONAL to implement.</t>

</section>
<section anchor="manifest-common"><name>suit-common</name>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is REQUIRED to implement.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED to implement. It is REQUIRED if the optimizations described in <xref target="minimal-sigs"/> will be used. Whenever a parameter or Try Each command is required by more than one Command Sequence, placing that parameter or command in suit-common-sequence results in a smaller encoding.</t>

<section anchor="suit-component-identifier"><name>SUIT_Component_Identifier</name>

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>A Component Identifier can be trivial, such as the simple array [h'00']. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path "/usr/bin/env" would encode to ['usr','bin','env'].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands"><name>SUIT_Command_Sequence</name>

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL to implement.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation. suit-validate is REQUIRED to implement.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL to implement.</t>
  <t>Run or Boot: suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: the "run" directive. suit-run is OPTIONAL to implement.</t>
</list></t>

<t>Goals 1,2 form the Update Procedure. Goals 4,5,6 form the Invocation Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true and any failure is treated as a failure of the update/load/invocation</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>Each condition is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>A <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided. This index is a numeric index into the Component Identifier table defined at the beginning of the manifest.</t>

<t>To facilitate optional conditions, a special directive, suit-directive-try-each (<xref target="suit-directive-try-each"/>), is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/invocation, but a parameter is provided to override this behavior. See suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>).</t>

</section>
<section anchor="reporting-policy"><name>Reporting Policy</name>

<t>To facilitate construction of Reports that describe the success or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>At the completion of each command, a Manifest Processor MAY forward information about the command to a Reporting Engine, which is responsible for reporting boot or update status to a third party. The Reporting Engine is entirely implementation-defined, the reporting policy simply facilitates the Reporting Engine's interface to the SUIT Manifest Processor.</t>

<t>The information elements provided to the Reporting Engine are:</t>

<t><list style="symbols">
  <t>The reporting policy</t>
  <t>The result of the command</t>
  <t>The values of parameters consumed by the command</t>
  <t>The system information consumed by the command</t>
</list></t>

<t>Together, these elements are called a Record. A group of Records is a Report.</t>

<t>If the component index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine MUST receive one Record for each Component, in the order expressed in the Components list or the component index array.</t>

<t>This specification does not define a particular format of Records or Reports. This specification only defines hints to the Reporting Engine for which Records it should aggregate into the Report. The Reporting Engine MAY choose to ignore these hints and apply its own policy instead.</t>

<t>When used in a Invocation Procedure, the report MAY form the basis of an attestation report. When used in an Update Process, the report MAY form the basis for one or more log entries.</t>

</section>
<section anchor="secparameters"><name>SUIT_Parameters</name>

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reuse of parameters between commands, thus reducing manifest size.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Component Slot</c>
      <c>suit-parameter-component-slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Run Args</c>
      <c>suit-parameter-run-args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately.</t>

<section anchor="cbor-pen-uuid-namespace-identifier"><name>CBOR PEN UUID Namespace Identifier</name>

<t>The CBOR PEN UUID Namespace Identifier is constructed as follows:</t>

<t>It uses the OID Namespace as a starting point, then uses the CBOR absolute OID encoding for the IANA PEN OID (1.3.6.1.4.1):</t>

<figure><artwork><![CDATA[
D8 6F                # tag(111)
   45                # bytes(5)
# Absolute OID encoding of IANA Private Enterprise Number:
#    1.3. 6. 1. 4. 1
      2B 06 01 04 01 # X.690 Clause 8.19
]]></artwork></figure>

<t>Computing a type 5 UUID from these produces:</t>

<figure><artwork><![CDATA[
NAMESPACE_CBOR_PEN = UUID5(NAMESPACE_OID, h'D86F452B06010401')
NAMESPACE_CBOR_PEN = 47fbdabb-f2e4-55f0-bb39-3620c2f6df4e
]]></artwork></figure>

</section>
<section anchor="uuid-identifiers"><name>Constructing UUIDs</name>

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient MAY match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They MUST NOT be used as assertions of identity. They are evaluated by identifier conditions (<xref target="identifier-conditions"/>).</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module's firmware has a proprietary update mechanism and doesn't support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:</t>

<figure><artwork><![CDATA[
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)
]]></artwork></figure>

<t>If the Vendor ID is a UUID, the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(Vendor ID, Class-Specific-Information)
]]></artwork></figure>

<t>If the Vendor ID is a CBOR PEN (see <xref target="suit-parameter-vendor-identifier"/>), the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(
    UUID5(NAMESPACE_CBOR_PEN, CBOR_PEN),
    Class-Specific-Information)
]]></artwork></figure>

<t>Class-specific-information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier"><name>suit-parameter-vendor-identifier</name>

<t>suit-parameter-vendor-identifier may be presented in one of two ways:</t>

<t><list style="symbols">
  <t>A Private Enterprise Number</t>
  <t>A byte string containing a UUID (<xref target="RFC4122"/>)</t>
</list></t>

<t>Private Enterprise Numbers are encoded as a relative OID, according to the definition in <xref target="I-D.ietf-cbor-tags-oid"/>. All PENs are relative to the IANA PEN: 1.3.6.1.4.1.</t>

</section>
<section anchor="suit-parameter-class-identifier"><name>suit-parameter-class-identifier</name>

<t>A RFC 4122 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier"><name>suit-parameter-device-identifier</name>

<t>A RFC 4122 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest"><name>suit-parameter-image-digest</name>

<t>A fingerprint computed over the component itself, encoded in the SUIT_Digest <xref target="SUIT_Digest"/> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size"><name>suit-parameter-image-size</name>

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-component-slot"><name>suit-parameter-component-slot</name>

<t>This parameter sets the slot index of a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its index into the component's storage area. This slot MUST be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-uri"><name>suit-parameter-uri</name>

<t>A URI Reference (<xref target="RFC3986"/>) from which to fetch a resource, encoded as a text string. CBOR Tag 32 is not used because the meaning of the text string is unambiguous in this context.</t>

</section>
<section anchor="suit-parameter-source-component"><name>suit-parameter-source-component</name>

<t>This parameter sets the source component to be used with either suit-directive-copy (<xref target="suit-directive-copy"/>) or with suit-directive-swap (<xref target="suit-directive-swap"/>). The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-run-args"><name>suit-parameter-run-args</name>

<t>This parameter contains an encoded set of arguments for suit-directive-run (<xref target="suit-directive-run"/>). The arguments MUST be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-fetch-arguments"><name>suit-parameter-fetch-arguments</name>

<t>An implementation-defined set of arguments to suit-directive-fetch (<xref target="suit-directive-fetch"/>). Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order"><name>suit-parameter-strict-order</name>

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure"><name>suit-parameter-soft-failure</name>

<t>When executing a command sequence inside suit-directive-try-each (<xref target="suit-directive-try-each"/>) or suit-directive-run-sequence (<xref target="suit-directive-run-sequence"/>) and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates. It MUST NOT be set outside of suit-directive-try-each or suit-directive-run-sequence.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom"><name>suit-parameter-custom</name>

<t>This parameter is an extension point for any proprietary, application specific conditions and directives. It MUST NOT be used in the common sequence. This effectively scopes each custom command to a particular Vendor Identifier/Class Identifier pair.</t>

</section>
</section>
<section anchor="suitcondition"><name>SUIT_Condition</name>

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Component Slot</c>
      <c>suit-condition-component-slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>Abort</c>
      <c>suit-condition-abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>Custom Condition</c>
      <c>suit-condition-custom</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition MUST report a result code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. A subsequent command or command sequence MAY continue executing if suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is set. If a condition requires additional information, this MUST be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it MUST report a failure. If a Recipient encounters an unknown condition, it MUST report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary definition by the author of a manifest processor. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions"><name>suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier</name>

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing Recipient MUST match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. Each component MAY match more than one identifier. Care is needed to ensure that manifests correctly identify their targets using these conditions. Using only a generic class ID for a device-specific firmware could result in matching devices that are not compatible.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers MUST be known to the Manifest Processor in order to evaluate compatibility.</t>

</section>
<section anchor="suit-condition-image-match"><name>suit-condition-image-match</name>

<t>Verify that the current component matches the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>) for the current component. The digest is verified against the digest specified in the Component's parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-component-slot"><name>suit-condition-component-slot</name>

<t>Verify that the slot index of the current component matches the slot index set in suit-parameter-component-slot (<xref target="suit-parameter-component-slot"/>). This condition allows a manifest to select between several images to match a target slot.</t>

</section>
<section anchor="suit-condition-abort"><name>suit-condition-abort</name>

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each (<xref target="suit-directive-try-each"/>).</t>

</section>
<section anchor="SUIT_Condition_Custom"><name>suit-condition-custom</name>

<t>suit-condition-custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="suitdirective"><name>SUIT_Directive</name>
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Run</c>
      <c>suit-directive-run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it MUST report a result code. If the Directive reports failure, then the current Command Sequence MUST be terminated.</t>

<section anchor="suit-directive-set-component-index"><name>suit-directive-set-component-index</name>

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be one of three types:</t>

<t><list style="numbers">
  <t>An unsigned integer (REQUIRED to implement in parser)</t>
  <t>A boolean (REQUIRED to implement in parser ONLY IF 2 or more components supported)</t>
  <t>An array of unsigned integers (REQUIRED to implement in parser ONLY IF 3 or more components supported)</t>
</list></t>

<t>If the following commands apply to ONE component, an unsigned integer index into the component list is used. If the following commands apply to ALL components, then the boolean value "True" is used instead of an index. If the following commands apply to more than one, but not all components, then an array of unsigned integer indices into the component list is used.
See <xref target="index-true"/> for more details.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-try-each"><name>suit-directive-try-each</name>

<t>This command runs several SUIT_Command_Sequence instances, one after another, in a strict order. Use this command to implement a "try/catch-try/catch" sequence. Manifest processors MAY implement this command.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters"><name>suit-directive-override-parameters</name>

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch"><name>suit-directive-fetch</name>

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more payloads. suit-directive-fetch retrieves each component listed in component-index. If component-index is True, instead of an integer, then all current manifest components are fetched. If component-index is an array, then all listed components are fetched.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

</section>
<section anchor="suit-directive-copy"><name>suit-directive-copy</name>

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. As described in <xref target="index-true"/> component index may be a single integer, a list of integers, or True. suit-directive-copy retrieves each component specified by the current component-index, respectively.</t>

<t>suit-directive-copy reads its source from suit-parameter-source-component (<xref target="suit-parameter-source-component"/>).</t>

<t>If either the source component parameter or the source component itself is absent, this command fails.</t>

</section>
<section anchor="suit-directive-run"><name>suit-directive-run</name>

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-run through suit-parameter-run-arguments (<xref target="suit-parameter-run-args"/>) and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-run-sequence"><name>suit-directive-run-sequence</name>

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap"><name>suit-directive-swap</name>

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. As with suit-directive-copy, if the source component is missing, this command fails.</t>

<t>If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they MUST be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="integrity-checks"><name>Integrity Check Values</name>

<t>When the Text section or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope. The keys for the envelope elements have the same values as the keys for the manifest elements.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="severable-fields"><name>Severable Elements</name>

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or "Severed" without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD NOT be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists"><name>Access Control Lists</name>

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or Component Identifier prefixes to the listed identities or identity groups. Any identity can verify an image digest, but fetching into or fetching from a Component Identifier requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the Component Identifier or Component Identifier prefix that an identity can use, and also lists the commands and parameters that the identity can use in combination with that Component Identifier.</t>

</section>
<section anchor="SUIT_Digest"><name>SUIT Digest Container</name>

<t>The SUIT digest is a CBOR List containing two elements: an algorithm identifier and a bstr containing the bytes of the digest. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The values of the algorithm identifier are defined by <xref target="I-D.ietf-cose-hash-algs"/>. The following algorithms MUST be implemented by all Manifest Processors:</t>

<t><list style="symbols">
  <t>SHA-256 (-16)</t>
</list></t>

<t>The following algorithms MAY be implemented in a Manifest Processor:</t>

<t><list style="symbols">
  <t>SHAKE128 (-18)</t>
  <t>SHA-384 (-43)</t>
  <t>SHA-512 (-44)</t>
  <t>SHAKE256 (-45)</t>
</list></t>

</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate CBOR tag 107 in the CBOR Tags registry for the SUIT Envelope.</t>
  <t>allocate CBOR tag 1070 in the CBOR Tags registry for the SUIT Manifest.</t>
  <t>allocate media type application/suit-envelope in the Media Types registry.</t>
  <t>setup several registries as described below.</t>
</list></t>

<t>IANA is requested to setup a registry for SUIT manifests.
Several registries defined in the subsections below need to be created.</t>

<t>For each registry, values 0-23 are Standards Action, 24-255 are IETF Review, 256-65535 are Expert Review, and 65536 or greater are First Come First Served.</t>

<t>Negative values -23 to 0 are Experimental Use, -24 and lower are Private Use.</t>

<section anchor="suit-commands"><name>SUIT Commands</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>2</c>
      <c>Class Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>3</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>12</c>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>13</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>14</c>
      <c>Abort</c>
      <c>&#160;</c>
      <c>15</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>16</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>17</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>18</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>21</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>22</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>23</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>24</c>
      <c>Device Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>25</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>31</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>32</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>33</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

</section>
<section anchor="suit-parameters"><name>SUIT Parameters</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>2</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>3</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>12</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>13</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>14</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>18</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>21</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>22</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>23</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>24</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

</section>
<section anchor="suit-text-values"><name>SUIT Text Values</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Manifest Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Update Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Manifest JSON Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Manifest YAML Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-component-text-values"><name>Â SUIT Component Text Values</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Model Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Vendor Domain</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Model Info</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>5</c>
      <c>Component Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>6</c>
      <c>Component Version</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>7</c>
      <c>Component Version Required</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Ãyvind RÃ¸nningstad</t>
  <t>Frank Audun KvamtrÃ¸</t>
  <t>Krzysztof ChruÅciÅski</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC4122' target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author fullname='P. Leach' initials='P.' surname='Leach'><organization/></author>
<author fullname='M. Mealling' initials='M.' surname='Mealling'><organization/></author>
<author fullname='R. Salz' initials='R.' surname='Salz'><organization/></author>
<date month='July' year='2005'/>
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC3986' target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'><organization/></author>
<author fullname='R. Fielding' initials='R.' surname='Fielding'><organization/></author>
<author fullname='L. Masinter' initials='L.' surname='Masinter'><organization/></author>
<date month='January' year='2005'/>
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference anchor='RFC8949' target='https://www.rfc-editor.org/info/rfc8949'>
<front>
<title>Concise Binary Object Representation (CBOR)</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='P. Hoffman' initials='P.' surname='Hoffman'><organization/></author>
<date month='December' year='2020'/>
<abstract><t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t><t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t></abstract>
</front>
<seriesInfo name='STD' value='94'/>
<seriesInfo name='RFC' value='8949'/>
<seriesInfo name='DOI' value='10.17487/RFC8949'/>
</reference>



<reference anchor='RFC9019' target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>



<reference anchor='RFC9124' target='https://www.rfc-editor.org/info/rfc9124'>
<front>
<title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<date month='January' year='2022'/>
<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t><t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9124'/>
<seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>


<reference anchor='I-D.moran-suit-mti'>
   <front>
      <title>Mandatory-to-Implement Algorithms for Creators and Consumers of Software Update for the Internet of Things manifests</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   This document specifies algorithm profiles for SUIT manifest parsers
   and authors to ensure better interoperability.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-moran-suit-mti-00'/>
   <format target='https://www.ietf.org/archive/id/draft-moran-suit-mti-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-cose-hash-algs'>
   <front>
      <title>CBOR Object Signing and Encryption (COSE): Hash Algorithms</title>
      <author fullname='Jim Schaad'>
	 <organization>August Cellars</organization>
      </author>
      <date day='14' month='September' year='2020'/>
      <abstract>
	 <t>   The CBOR Object Signing and Encryption (COSE) syntax
   [I-D.ietf-cose-rfc8152bis-struct] does not define any direct methods
   for using hash algorithms.  There are, however, circumstances where
   hash algorithms are used, such as indirect signatures where the hash
   of one or more contents are signed, and X.509 certificate or other
   object identification by the use of a fingerprint.  This document
   defines a set of hash algorithms that are identified by COSE
   Algorithm Identifiers.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cose-hash-algs-09'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cose-hash-algs-09.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-teep-architecture'>
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname='Mingliang Pei'>
	 <organization>Broadcom</organization>
      </author>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Dave Thaler'>
	 <organization>Microsoft</organization>
      </author>
      <author fullname='David Wheeler'>
	 <organization>Amazon</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-18'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-teep-architecture-18.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-cbor-tags-oid'>
   <front>
      <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
      <author fullname='Carsten Bormann'>
	 <organization>UniversitÃ¤t Bremen TZI</organization>
      </author>
      <date day='21' month='May' year='2021'/>
      <abstract>
	 <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.

 This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cbor-tags-oid-08'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Firmware Encryption with SUIT Manifests</title>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   This document specifies a firmware update mechanism where the
   firmware image is encrypted.  Firmware encryption uses the IETF SUIT
   manifest with key establishment provided by hybrid public-key
   encryption (HPKE) and AES Key Wrap (AES-KW).  HPKE uses public key
   cryptography while AES-KW uses a pre-shared key-encryption key.
   Encryption of the firmware image is accomplished with convential
   symmetric key cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-06'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-firmware-encryption-06.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-update-management'>
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to IoT
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-update-management-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-update-management-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-trust-domains'>
   <front>
      <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   (as defined in [I-D.ietf-suit-manifest]) for use in deployments with
   multiple trust domains.  A device has more than one trust domain when
   it uses different trust anchors for different purposes or components
   in the context of firmware update.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-trust-domains-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-trust-domains-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-report'>
   <front>
      <title>Secure Reporting of Update Status</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz'>
	 <organization>Fraunhofer SIT</organization>
      </author>
      <date day='12' month='January' year='2022'/>
      <abstract>
	 <t>   The Software Update for the Internet of Things (SUIT) manifest
   provides a way for many different update and boot workflows to be
   described by a common format.  However, this does not provide a
   feedback mechanism for developers in the event that an update or boot
   fails.

   This specification describes a lightweight feedback mechanism that
   allows a developer in possession of a manifest to reconstruct the
   decisions made and actions performed by a manifest processor.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-report-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-report-01.txt' type='TXT'/>
</reference>



<reference anchor='RFC7228' target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='M. Ersue' initials='M.' surname='Ersue'><organization/></author>
<author fullname='A. Keranen' initials='A.' surname='Keranen'><organization/></author>
<date month='May' year='2014'/>
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>


<reference anchor="YAML" target="https://yaml.org/">
  <front>
    <title>YAML Ain't Markup Language</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<t>To be valid, the following CDDL MUST have the COSE CDDL appended to it. The COSE CDDL can be obtained by following the directions in <xref target="RFC8152"/>, Section 1.3.</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Envelope_Tagged = #6.107(SUIT_Envelope)
SUIT_Envelope = {
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * SUIT_Integrated_Payload,
  * $$SUIT_Envelope_Extensions,
}

SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]

SUIT_Digest = [
  suit-digest-algorithm-id : suit-cose-hash-algs,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

SUIT_Severable_Manifest_Members = (
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  * $$SUIT_severable-members-extensions,
)

SUIT_Integrated_Payload = (suit-integrated-payload-key => bstr)
suit-integrated-payload-key = tstr

SUIT_Manifest_Tagged = #6.1070(SUIT_Manifest)

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Unseverable_Members,
    SUIT_Severable_Members_Choice,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-run => bstr .cbor SUIT_Command_Sequence,
  * $$unseverable-manifest-member-extensions,
)

SUIT_Severable_Members_Choice = (
  ? suit-payload-fetch => SUIT_Digest / 
      bstr .cbor SUIT_Command_Sequence,
  ? suit-install => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
  ? suit-text => SUIT_Digest / bstr .cbor SUIT_Text_Map,
  * $$severable-manifest-members-choice-extensions
)

SUIT_Common = {
    ? suit-components             => SUIT_Components,
    ? suit-common-sequence        => bstr .cbor SUIT_Common_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Components           = [ + SUIT_Component_Identifier ]

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
    * $$SUIT_Dependency-extensions,
}

;REQUIRED to implement:
suit-cose-hash-algs /= cose-alg-sha-256

;OPTIONAL to implement:
suit-cose-hash-algs /= cose-alg-shake128
suit-cose-hash-algs /= cose-alg-sha-384
suit-cose-hash-algs /= cose-alg-sha-512
suit-cose-hash-algs /= cose-alg-shake256

SUIT_Component_Identifier =  [* bstr]

SUIT_Common_Sequence = [
    + ( SUIT_Condition // SUIT_Common_Commands )
]

SUIT_Common_Commands //= (suit-directive-set-component-index,  IndexArg)
SUIT_Common_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Common_Sequence)
SUIT_Common_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument_Common)
SUIT_Common_Commands //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})

IndexArg /= uint
IndexArg /= bool
IndexArg /= [+uint]


SUIT_Directive_Try_Each_Argument_Common = [
    2* bstr .cbor SUIT_Common_Sequence,
    ?nil
]

SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-component-slot,    SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-abort,             SUIT_Rep_Policy)

SUIT_Directive //= (suit-directive-set-component-index,  IndexArg)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-copy,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-swap,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-run,               SUIT_Rep_Policy)

SUIT_Directive_Try_Each_Argument = [
    2* bstr .cbor SUIT_Command_Sequence,
    ?nil
]

SUIT_Rep_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

SUIT_Parameters //= (suit-parameter-vendor-identifier =>
    (RFC4122_UUID / cbor-pen))
cbor-pen = #6.112(bstr)

SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-component-slot => uint)

SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-run-args => bstr)

SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)

SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)

RFC4122_UUID = bstr .size 16

SUIT_Text_Map = {
    SUIT_Text_Keys,
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    }
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

suit-authentication-wrapper = 2
suit-manifest = 3

;REQUIRED to implement:
cose-alg-sha-256 = -16

;OPTIONAL to implement:
cose-alg-shake128 = -18
cose-alg-sha-384 = -43
cose-alg-sha-512 = -44
cose-alg-shake256 = -45

;Unseverable, recipient-necessary
suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-validate = 7
suit-load = 8
suit-run = 9
;Severable, recipient-necessary
suit-payload-fetch = 16
suit-install = 17
;Severable, recipient-unnecessary
suit-text = 23

suit-components = 2
suit-common-sequence = 4

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-component-slot    = 5

suit-condition-abort                    = 14
suit-condition-device-identifier        = 24

suit-directive-set-component-index      = 12
suit-directive-try-each                 = 15
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-swap                     = 31
suit-directive-run-sequence             = 32

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-component-slot    = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14

suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-run-args          = 23

suit-parameter-device-identifier = 24

suit-parameter-custom = nint

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
]]></sourcecode></figure>

</section>
<section anchor="examples"><name>B. Examples</name>

<t>The following examples demonstrate a small subset of the functionality of the manifest. Even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<t>Note that reporting policies are declared for each non-flow-control command in these examples. The reporting policies used in the examples are described in the following tables.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Label</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Rec-Pass</c>
      <c>suit-send-record-on-failure</c>
      <c>Rec-Fail</c>
      <c>suit-send-sysinfo-success</c>
      <c>Sys-Pass</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Sys-Fail</c>
</texttable>

<texttable>
      <ttcol align='left'>Command</ttcol>
      <ttcol align='left'>Sys-Fail</ttcol>
      <ttcol align='left'>Sys-Pass</ttcol>
      <ttcol align='left'>Rec-Fail</ttcol>
      <ttcol align='left'>Rec-Pass</ttcol>
      <c>suit-condition-vendor-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-class-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-image-match</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-component-slot</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>1</c>
      <c>suit-directive-fetch</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-copy</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-run</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
</texttable>

<section anchor="example-0-secure-boot"><name>Example 0: Secure Boot</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
</list></t>

<t>It also serves as the minimum example.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'6658ea560262696dd1f13b782239a064da7c6c5cbaf52fded428a6fc83c7e5af'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'01d9cbf51b1ccadf839ec867da85735118
ba4c1b513f5df60583e8dd7f8ce4274cd2e2a0f70f8832bfea63983172e77a951e9a36
e74cada19321b903a097e4e7'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:0,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / validate / 7:<<[
                / condition-image-match / 3,15
            ]>>,
            / run / 9:<<[
                / directive-run / 23,2
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  161</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af035871a50101020003585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f0943821702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  237</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af584ad28443a10126a0f6584001d9cb
f51b1ccadf839ec867da85735118ba4c1b513f5df60583e8dd7f8ce4274c
d2e2a0f70f8832bfea63983172e77a951e9a36e74cada19321b903a097e4
e7035871a50101020003585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f0943821702
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload"><name>Example 1: Simultaneous Download and Installation of Payload</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Simultaneous download and installation of payload. No secure boot is present in this example to demonstrate a download-only manifest.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'176653ec03837a8d32b1eb0b91ea5e8a2256bc2e7c02e5bb7f45f431fa926f3e'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'a78dbd584dbdea66ab024179dac2f4b244
940e9dfe1337bb833e3e3df2562a0fceb77e64980e0ddcc24b8abb63b78aad9ad42fd2
44b684dd39859f84740239e8'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:1,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / validate / 7:<<[
                / condition-image-match / 3,15
            ]>>,
            / install / 17:<<[
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  196</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820176653ec03837a8d32b1eb0b91ea5e8a22
56bc2e7c02e5bb7f45f431fa926f3e035894a50101020103585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f1158258613a115781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  272</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820176653ec03837a8d32b1eb0b91ea5e8a22
56bc2e7c02e5bb7f45f431fa926f3e584ad28443a10126a0f65840a78dbd
584dbdea66ab024179dac2f4b244940e9dfe1337bb833e3e3df2562a0fce
b77e64980e0ddcc24b8abb63b78aad9ad42fd244b684dd39859f84740239
e8035894a50101020103585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f1158258613a11578
1b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502
030f
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-secure-boot-severed-fields"><name>Example 2: Simultaneous Download, Installation, Secure Boot, Severed Fields</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>This example also demonstrates severable elements (<xref target="ovr-severable"/>), and text (<xref target="manifest-digest-text"/>).</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'a85153c05f709e681877ee23c0de3e2f92bcc66c1ad6f41b39157ac7cb6a5a62'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'4ba6e9c4bdd65212e2e4775b7f5bb32faf
14209f88d9f8b198e21c338770aa542dde07e31fa17ca9dadee4d94c43dfba81819d35
88d7fde5eff010b8c7c89277'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:2,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / validate / 7:<<[
                / condition-image-match / 3,15
            ]>>,
            / run / 9:<<[
                / directive-run / 23,2
            ]>>,
            / install / 17:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'3ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d2'
            ],
            / text / 23:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'2bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918'
            ],
        }>>,
        / install / 17:<<[
            / directive-set-parameters / 19,{
                / uri /
21:'http://example.com/very/long/path/to/file/file.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ]>>,
        / text / 13:<<{
            [h'00']:{
                    / vendor-domain / 3:'arm.com',
                    / component-description / 5:'This component is a
demonstration. The digest is a sample pattern, not a real one.',
                }
        }>>,
    })
]]></artwork></figure>

<t>Total size of the Envelope without COSE authentication object or Severable Elements:  235</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820a85153c05f709e681877ee23c0de3e2f92
bcc66c1ad6f41b39157ac7cb6a5a620358bba70101020203585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f094382170211822f58203ee96dc79641970ae46b929ccf0b
72ba9536dd846020dbdc9f949d84ea0e18d217822f58202bfc4d0cc6680b
e7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918
]]></artwork></figure>
<t>Total size of the Envelope with COSE authentication object but without Severable Elements:  311</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820a85153c05f709e681877ee23c0de3e2f92
bcc66c1ad6f41b39157ac7cb6a5a62584ad28443a10126a0f658404ba6e9
c4bdd65212e2e4775b7f5bb32faf14209f88d9f8b198e21c338770aa542d
de07e31fa17ca9dadee4d94c43dfba81819d3588d7fde5eff010b8c7c892
770358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f094382170211822f
58203ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc9f949d84
ea0e18d217822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf918
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object and Severable Elements:  894</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba4025873825824822f5820a85153c05f709e681877ee23c0de3e2f92
bcc66c1ad6f41b39157ac7cb6a5a62584ad28443a10126a0f658404ba6e9
c4bdd65212e2e4775b7f5bb32faf14209f88d9f8b198e21c338770aa542d
de07e31fa17ca9dadee4d94c43dfba81819d3588d7fde5eff010b8c7c892
770358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f094382170211822f
58203ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc9f949d84
ea0e18d217822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf9180d590204a20179019d2323204578616d706c65
20323a2053696d756c74616e656f757320446f776e6c6f61642c20496e73
74616c6c6174696f6e2c2053656375726520426f6f742c20536576657265
64204669656c64730a0a2020202054686973206578616d706c6520636f76
6572732074686520666f6c6c6f77696e672074656d706c617465733a0a20
2020200a202020202a20436f6d7061746962696c69747920436865636b20
287b7b74656d706c6174652d636f6d7061746962696c6974792d63686563
6b7d7d290a202020202a2053656375726520426f6f7420287b7b74656d70
6c6174652d7365637572652d626f6f747d7d290a202020202a204669726d
7761726520446f776e6c6f616420287b7b6669726d776172652d646f776e
6c6f61642d74656d706c6174657d7d290a202020200a2020202054686973
206578616d706c6520616c736f2064656d6f6e7374726174657320736576
657261626c6520656c656d656e747320287b7b6f76722d73657665726162
6c657d7d292c20616e64207465787420287b7b6d616e69666573742d6469
676573742d746578747d7d292e814100a2036761726d2e636f6d05785254
68697320636f6d706f6e656e7420697320612064656d6f6e737472617469
6f6e2e205468652064696765737420697320612073616d706c6520706174
7465726e2c206e6f742061207265616c206f6e652e11583c8613a1157832
687474703a2f2f6578616d706c652e636f6d2f766572792f6c6f6e672f70
6174682f746f2f66696c652f66696c652e62696e1502030f
]]></artwork></figure>

</section>
<section anchor="example-3-ab-images"><name>Example 3: A/B images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>A/B Image Template (<xref target="a-b-template"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'c98d9240343ee1ac12ba833c04fb9006e70f62c7e4c36edb0b2a356d59c2f86c'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'451b3099c7914ef4c54b633688471b8d0f
940d09eeca41c159927a9f044bddec536f83da5f1b1047bc415be013d71524ad82e4ac
792a61f93dbdc875a7a6adeb'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:3,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    } ,
                    / directive-try-each / 15,[
                        <<[
                            / directive-override-parameters / 20,{
                                / slot / 5:0,
                            } ,
                            / condition-component-slot / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<<[
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                                ]>>,
                                / image-size / 14:34768,
                            }
                        ]>> ,
                        <<[
                            / directive-override-parameters / 20,{
                                / slot / 5:1,
                            } ,
                            / condition-component-slot / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<<[
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                                ]>>,
                                / image-size / 14:76834,
                            }
                        ]>>
                    ] ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / validate / 7:<<[
                / condition-image-match / 3,15
            ]>>,
            / install / 17:<<[
                / directive-try-each / 15,[
                    <<[
                        / directive-set-parameters / 19,{
                            / slot / 5:0,
                        } ,
                        / condition-component-slot / 5,5 ,
                        / directive-set-parameters / 19,{
                            / uri / 21:'http://example.com/file1.bin',
                        }
                    ]>> ,
                    <<[
                        / directive-set-parameters / 19,{
                            / slot / 5:1,
                        } ,
                        / condition-component-slot / 5,5 ,
                        / directive-set-parameters / 19,{
                            / uri / 21:'http://example.com/file2.bin',
                        }
                    ]>>
                ] ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  320</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820c98d9240343ee1ac12ba833c04fb9006e7
0f62c7e4c36edb0b2a356d59c2f86c0359010fa5010102030358a4a20281
81410004589b8814a20150fa6b4a53d5ad5fdfbe9de663e4d41ffe025014
92af1425695e48bf429b2d51f2ab450f8258348614a10500050514a20358
24822f582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d058368614a10501050514a2035824822f582001
23456789abcdeffedcba987654321000112233445566778899aabbccddee
ff0e1a00012c22010f020f074382030f11585b860f8258288613a1050005
0513a115781c687474703a2f2f6578616d706c652e636f6d2f66696c6531
2e62696e58288613a10501050513a115781c687474703a2f2f6578616d70
6c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  396</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820c98d9240343ee1ac12ba833c04fb9006e7
0f62c7e4c36edb0b2a356d59c2f86c584ad28443a10126a0f65840451b30
99c7914ef4c54b633688471b8d0f940d09eeca41c159927a9f044bddec53
6f83da5f1b1047bc415be013d71524ad82e4ac792a61f93dbdc875a7a6ad
eb0359010fa5010102030358a4a2028181410004589b8814a20150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450f8258348614a10500050514a2035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0583686
14a10501050514a2035824822f58200123456789abcdeffedcba98765432
1000112233445566778899aabbccddeeff0e1a00012c22010f020f074382
030f11585b860f8258288613a10500050513a115781c687474703a2f2f65
78616d706c652e636f6d2f66696c65312e62696e58288613a10501050513
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

</section>
<section anchor="example-4-load-from-external-storage"><name>Example 4: Load from External Storage</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>Install (<xref target="template-install"/>)</t>
  <t>Load (<xref target="template-load-ext"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'601ebc1bb2e12cbaf408b1bca72fae0d9987498acfa16130ce4cf5cc9ea74c7c'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'2e263599b0f3613fd3feb0cec1ff55c6b3
7c521339ef2680dc63de3a5cdfb0e3f44237313e1c17c35f7fa84af82234f50cea551c
fdd8179a40dac5136167cd5e'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:4,
            / common / 3:<<{
                / components / 2:[
                    [h'00'] ,
                    [h'02'] ,
                    [h'01']
                ],
                / common-sequence / 4:<<[
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / validate / 7:<<[
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15
            ]>>,
            / load / 8:<<[
                / directive-set-component-index / 12,2 ,
                / directive-set-parameters / 19,{
                    / image-digest / 3:<<[
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ]>>,
                    / image-size / 14:76834,
                    / source-component / 22:0 / [h'00'] /,
                    / compression-info / 19:<<{
                        / compression-algorithm / 1:1 / "zlib" /,
                    }>>,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ]>>,
            / run / 9:<<[
                / directive-set-component-index / 12,2 ,
                / directive-run / 23,2
            ]>>,
            / payload-fetch / 16:<<[
                / directive-set-component-index / 12,1 ,
                / directive-set-parameters / 19,{
                    / image-digest / 3:<<[
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ]>>,
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
            / install / 17:<<[
                / directive-set-component-index / 12,0 ,
                / directive-set-parameters / 19,{
                    / source-component / 22:1 / [h'02'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  332</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820601ebc1bb2e12cbaf408b1bca72fae0d99
87498acfa16130ce4cf5cc9ea74c7c0359011ba801010204035867a20283
814100814102814101045858880c0014a40150fa6b4a53d5ad5fdfbe9de6
63e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820
00112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100e1987d0010f020f0745840c00030f08583d880c0213a4035824822f
58200123456789abcdeffedcba987654321000112233445566778899aabb
ccddeeff0e1a00012c221343a1010116001602030f0945840c0217021058
4e880c0113a2035824822f582000112233445566778899aabbccddeeff01
23456789abcdeffedcba987654321015781b687474703a2f2f6578616d70
6c652e636f6d2f66696c652e62696e1502030f114b880c0013a116011602
030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  408</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820601ebc1bb2e12cbaf408b1bca72fae0d99
87498acfa16130ce4cf5cc9ea74c7c584ad28443a10126a0f658402e2635
99b0f3613fd3feb0cec1ff55c6b37c521339ef2680dc63de3a5cdfb0e3f4
4237313e1c17c35f7fa84af82234f50cea551cfdd8179a40dac5136167cd
5e0359011ba801010204035867a20283814100814102814101045858880c
0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e
48bf429b2d51f2ab45035824822f582000112233445566778899aabbccdd
eeff0123456789abcdeffedcba98765432100e1987d0010f020f0745840c
00030f08583d880c0213a4035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c221343a101
0116001602030f0945840c02170210584e880c0113a2035824822f582000
112233445566778899aabbccddeeff0123456789abcdeffedcba98765432
1015781b687474703a2f2f6578616d706c652e636f6d2f66696c652e6269
6e1502030f114b880c0013a116011602030f
]]></artwork></figure>

</section>
<section anchor="example-5-two-images"><name>Example 5: Two Images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Furthermore, it shows using these templates with two images.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'a4c6d5f5c3800c19c4af55aacc1c2dc6e37e2bf10b2aab335f70226961e310d3'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'91d95d3bb2eaae7b31ff11f4761056e491
bcb07470119f9c69388982c3238eabfcb477ec7887f36c31e7d957fe8830b3ae8b9d7d
71372de2e71a9a3b67444c4a'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:5,
            / common / 3:<<{
                / components / 2:[
                    [h'00'] ,
                    [h'01']
                ],
                / common-sequence / 4:<<[
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15 ,
                    / directive-set-component-index / 12,1 ,
                    / directive-override-parameters / 20,{
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                        ]>>,
                        / image-size / 14:76834,
                    }
                ]>>,
            }>>,
            / validate / 7:<<[
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / condition-image-match / 3,15
            ]>>,
            / run / 9:<<[
                / directive-set-component-index / 12,0 ,
                / directive-run / 23,2
            ]>>,
            / install / 17:<<[
                / directive-set-component-index / 12,0 ,
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file1.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file2.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  306</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820a4c6d5f5c3800c19c4af55aacc1c2dc6e3
7e2bf10b2aab335f70226961e310d303590101a601010205035895a20282
8141008141010458898c0c0014a40150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820001122
33445566778899aabbccddeeff0123456789abcdeffedcba98765432100e
1987d0010f020f0c0114a2035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c220749880c
00030f0c01030f0945840c00170211584f900c0013a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65312e62696e1502030f0c0113
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  382</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820a4c6d5f5c3800c19c4af55aacc1c2dc6e3
7e2bf10b2aab335f70226961e310d3584ad28443a10126a0f6584091d95d
3bb2eaae7b31ff11f4761056e491bcb07470119f9c69388982c3238eabfc
b477ec7887f36c31e7d957fe8830b3ae8b9d7d71372de2e71a9a3b67444c
4a03590101a601010205035895a202828141008141010458898c0c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab45035824822f582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d0010f020f0c0114a2035824
822f58200123456789abcdeffedcba987654321000112233445566778899
aabbccddeeff0e1a00012c220749880c00030f0c01030f0945840c001702
11584f900c0013a115781c687474703a2f2f6578616d706c652e636f6d2f
66696c65312e62696e1502030f0c0113a115781c687474703a2f2f657861
6d706c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

</section>
</section>
<section anchor="design-rationale"><name>C. Design Rational</name>

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted invocation operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted invocation of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency's commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope"><name>C.1 Design Rationale: Envelope</name>

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of Severable Elements (<xref target="severable-fields"/>)</t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers"><name>C.2 Byte String Wrappers</name>

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the common sequence. The common sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>
<section anchor="implementation-matrix"><name>D. Implementation Conformance Matrix</name>

<t>This section summarizes the functionality a minimal manifest processor
implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Class Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Device Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>OPTIONAL</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>REQUIRED</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>Abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>OPTIONAL</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>REQUIRED if more than one component</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>OPTIONAL</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>REQUIRED</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>REQUIRED for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>OPTIONAL</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>REQUIRED for Bootloader</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>OPTIONAL</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>REQUIRED</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>REQUIRED</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>REQUIRED</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>REQUIRED</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>REQUIRED for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>OPTIONAL</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>OPTIONAL</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>OPTIONAL</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>OPTIONAL</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>OPTIONAL</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c>OPTIONAL</c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
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
tG3lokR/AbR/kf6MROLSkclvbSABBgpgI3iisBQkvL5hwPCK4lPoFkEI8MoU
f5NRzutGUm0JmEMH9nCo0ByeOR9vtoqV9J4mSYGMm9UVIioS+dHl/DYJvzTT
IzvQvQs9B7p5g7J1u4D7OEpS+rHXNXFbcMWDbg9/44tV92xCHUDTtYnHamEA
HBWnQAxWP4RcxoQK78wxqwNmrsfwGsorxF5CvjGns2/hJdg43FgCi6UclTte
Ta8SMYxgaHnZcWCEOsqUlK3CoXhuS+7CnXmoSjK22UBZ/zqkliKzosEeGf2G
TS24XpeW1Tpv1Y1Tbd5qQoquVimqXTP2OjjT1Cov3J1stScf2XaSQ5NYTSQ7
hQlCCWOUmPcVc5vRN6YBNiFCHfSz96DebMSx0rlpVlRNZB5k6eXMjpqHWEOn
vIrHZx8+odiiAvmV18Y/ArGk/fstoCb0w2OdIUaGOXeFVy+ff8fL86/QrBN9
VvQpW6UfkYtWHxbDm28ZW0cfp+1TKmpY3228JIsox9zpxrdbgNFHq5F0sDJk
jBZIeZx4A+pmXqNunrCSrNBH2EEkj8ODmI7Jt8ie0QH/VDcixHdFworiTFLu
Y6KvOEhNNEvnbCJRmLDv21s3RNMaPTOhrK+d/o6B3mhkVTVFSnxNs8ApYbRg
A9C5cyNPqcGCWfNU9FKUrY4qVXAaqj5nJmSIhbWuXfZltUdVaG1FWmgGb8sc
fJ95MhHZp5qtbd8OS6x2vDDgiFpQjar3uS/dM5I5XL9wyZhV9/yEJTpGPz65
YE0O0ID6klKZ3ebRljDE2y75pEHRPgMHZbPjNKdshJMVkOezUXCUrhwLLS36
M2c+jSsWOUrCteY6o/3oOp9PS+Ea3sAXmEPc4J6mZbEikzaAZ+nVXGnmdBj7
lFeQdTX8gNjQw9UsmPra6UY+LwRFHRdYTU1KP1G1DH4lqAyRqa1FiwmTU0gV
5nFAN9fB/WXt+CpadEscGgZdyCFUkfO1mcUAAWXo5ShuJ4SvC3dufc2f4mNL
G2rWmjBIeVtC5IsqiBh2Qfr1cwL1E3x2p7AS1vbswNPJiR10OdBd8if1MXDH
6BPRIC8nmiONN3BUlzAXPUBP7DiTgzjpmaHVQdSl0Ejd+yydE03DnhHPb+N1
KQ/KZcsJsECQBpCe7Wn0Q76iVBhGwWGT86flxryH5jjcqv1qvQgdz1kb2+i/
WmKloZSdRZZ56vUfGKhLyVYEJJlE6HIZQAJFEjnHSiYVHsClgMP3Gv2wsgxq
RcF/+hBE1tPRmSsPTP2YBpGulFN/SgeOhan7RuMdLNwCTAYmj6rUo8FtWXcJ
2ODl0x5Grv+ZrZKOWooyhc+ZnsfYulgkFKThsiCmcuhlgE/FylDecnVNDVcn
TnbAHpjAoFXxtjMY8ZtdLWhCShx5g8SNypyxV4XHnJ7/Ib4WK4itQ32AJJ30
Kh9APbfkSqq5DDFuRBOOeQ8ajOSQ8oHwgDC3KVar8YEiH76QuUPrchJdJ3FR
NY5fxEvj0yxOnUIMCnd5iZQObLLPg0HsyrEZEq9eZU12W4CEslkkjMw1uY2W
RoQV0t7U9152SipqCdBT255kU6yn1OTHWCRSv42Xb1xT3zpTNxJIkBfDtLN9
qtrpUvvbexT48ayrVp5zDdWMWjEr7zng7aFhZr0nX6w18ZarKoAfzTrla3RQ
krxIVKgRJaTwSGro0yeXUoQSj1Ythx6OguzXZFVZZalAgCkPxmmw+bZ4OIGC
zLmtGQ0HOf2p4onatRnWRF1tXObTzL+XsBPqbP6+fRSuQVgUiOlh2WMud4yS
CHo0sVKjNpIkaU353xoBQGPgEK3TkKusk1/u8n33NhpOmKE02TK+CLmrCSfV
LEKUbvloRzBIKkBtAZHSfFZFz4Qzmc3jK5QTKU2d07QOMDfSQMYlH7WSGGyx
BPgU3oyxS4NvDfCgbNCoBaPMqbffEPbtN/ZIL4RYZBJQJZmsAb/6br38Q3oR
D8b1VWIGzLiYziUnaeuZcBJRQihqw2HHhJo/o9chLjB6byJcNMd1RQ9k2Q80
XIWsgi5tkvfTlkcUAH6oLyPoO+FAeT2Mky+NZvFvf3X/HhB4/u17juU8ZQ8r
ZGT6bQpNdt/SbG5Y96Z9eHi7f/teeFJTmELSqnZ5G1lN6zB6QNdePqifQU3H
33HjL/LSRwYIynI6PU/efFDyS5SAMFKdL0dv+5Uiu95Hjnql/4P9OlTjHzGF
EBDqLUYRmCp0cr0lK+zrUoe8ub/99YYGGKTTv32/ve2GbWjVP3NUqtvkB5W0
NxwW0D4Ua2d1xO3mkNxABmwDjY8bgQE6tehbfCc3z/u/fY8D3ODlDggi3vdv
iKkurmTm+/WHh4347D0lg6SPHUOiUgcGKlaZ2z78yvqVj8yE+5Om1Ftb9UlX
RSon8w3Q5CfsaupPOstvt7aj3+F85o69fnsO6/StdfASfubnGX35ZdhX6gX+
cgBhcdVDCONCN8gu/qaqL1xaBUPiyQ2myEzC0aJmaAtEoG1naqSs3O6E4ZM/
Yaqi1jjK+prKYjJwcAPrwtsGdhk7wv/5rH6Bnu4jL1YOED+RCu5UovHL8O77
fNLI+F4iIwMc31ks1WbqII9Of/B/MRNswkFhwWfkZDD7dZRnEiEccSAUcX+s
ciJP3aRA+fRUOYOUfyspJw4MjY66/IvmjiKBM0hkOV63GqB40NKO6qSLuzor
E9Bivdo35V1dHhta668x+l7r6LVo6KVk0BavkpYoSS6V3RJ+4s6TwgY0GIml
INKJkEM0pxg2mUsD2dhFcGLVkPrFWZLlAzgDAg5sesuhbPsKQPyKMCcs1UHw
ll4pC0Q8DUX78bnDlChFNuQrZ1Sb+jS/pJbB/CnNU+PaXjbyqemqEUjGvnIJ
upey/hLgun4/mziXYJUKGbH7q9QStVcJ60HhraRVMINyDq1TxMENTVPOFw3j
7DfHId2TGWgmvKYshDiWPAexOqNTF3Ex4IpkU8attExW0xwFHeHJUnPgAz82
jHdCGTkEE5HDSmRpaS+Zl4R9W7rTFlv7/9WM8Nd0+tP3xDfBP0QSCkb6nua4
e5xav++hIxXhExYARza9ZbzF1FNY4jcdiWkYV0jcUkOqVVKjriUuw7Dl8gS/
ryUMjDXkVDDDeXO4HKNnnkWUKHvnyMrOaS7OVuX52NEJeJubF4yims5PD62O
874kqEHHiEJxzjrswZAqr5Ue+dr7OQQt0xCHMUKwUtE8z5dibCUlFQVQeZdz
DZdukR1ccLjKrlG1KjLWBl2S/wvVRXzt1WxWuPrwRdNHhmJNMBffvLUyo+bM
tJ5Dhs+nap+UZnmjBxgIwlSiLQv0XFR6IV0kFNZMjsh1zXWFNDmEl7rjEynJ
OcAf3nFTAk2v4ErJy80rfbz17NZVnWygOmaeOsVW0nT6eu85qaDmkVPm6oHZ
wvbWIUpzQOcexAmS6DjJENfhPUaPoSXNQRC8wUpI8gg1Oc19+vN6TmyivN7W
oFJZ2jjalgsWaM7CvKrefyRw01bfHRLK13w7QUiKS5bcOHW9EvXZ80Sv9JDf
omS0kRWNa8bSifTw08prWhhmApDhVByq18UC9qI1ai5TTwJehZoV8Hm+1gzW
nY9Tc1yHz/NUy0FYOyG8KTLjGFX3JdveX9EdesUMu8WTfO9yaIdaeAo0aw/u
lZitImHIaG8Jr8FXYGqZQ0okbVijKKYwd1w8LwXSPPtJIQJluZLYcAdYyuug
Ew/fAnn5qOmkezI4cMCa/CaJRRNtRX1rcHCSnoqDbG9jKjAl/ou0JF+gWbS1
HK0vMY2onU2zlYSwmDP3YGXOLl9Vg3w24LO25xe79LvuUYsqqk+OpMt6Kk1X
sFD8LMUrj4ydn3kP5NRWEvevLlMueAw91SuKxBZ/XFp6P9IqZvROYAkykJxG
UprN6SPuwC1BVNTaCxku9tQpnuqATdIOFrUSiGi7MdJr6p1NueJqoMXAEIoW
5chQGgbHyByEfmr6G5qLJglKKrG5tXvlfT+Io6DiD/QGJGtNe3U8tm4GjI9T
2DEAJ4GY5geRWA/MHCIKGVyPiHXOlioCGIF5274RkNMSqZ9LsC09ybBnMtp4
Ridsdy/HTW8BMQKTY+j5MaRY9dHREUfORQTSB98QPtR5okO7SlpkVP6eAiBq
btqNKxSBng2S6AA/9lZSCbyucyvi6VniI2m7S8YyoY+yuKvNTQUfKU7Oz5cw
p2Wh2aPDAZ6v+UbFuX4iBCAcG3Zjn4lp4uJOnTcwBrm2eKx9+KLFYa3Xq1n5
CzaNi/8ciG6lKxbOKXrQne/V5bmpVdWHs5yj4wlHsQaJAE1KI3zR6ZxrPZbE
ewX2XsJbYfV6Y923/BraGoHU8FGLh8vb67AW2oblOi83t2p2UGldeL32kEuK
xzlafvmGxGqH4YQIwRSWhgm2EJ+itkpTCs8jjXAu1drL7h3skUrU7UYkO66n
PpAS528JofjeMuNEg8eY86UcXU53hNU+1MIg5gjBdOxuZZLMBIFCpdI2MUI7
5UvBKXJMqQWpKyoVfAUVsgdBl/RXtQieHVMHzudCbG4SjSqpvMDi5dpGcDeF
JNDNsRrKnSA9BH1Y3seucdKYGiR2/g1hNimblInockguKJeOi5EzwB4zVE3J
gco5m73KnKMRvwZm6llmiTVg3zD4bZiRo0sjNiLyU2VQyTnqwM32m9+cqld6
Xa+aqMttG13+zW+I1T4LcpmxYv6tHBpgJxfJP7HtOCBMfCTIecxoBmuZ0dwV
BIBqGHRRCnDmMOMPrTV5eiq0uoG4Qo8vrkD4oJamxzn4qmaj4UVrcYDnDJhX
JHfyzSRVwrPIjux+xZh5r8ZnrdKnT9swWJvd6K7Bcunj7dTkzIwQ7wJ9OYpF
gn3dOMkk6ALzd8feqGlb+q5W6XSQemO+7d4SJ3OP3ghmLb6ibVDGGdEGmBGt
BbpaBnEwkTYSbvFzk8rvia9SLfqnv3fOi+wzif2eSI1qMfu3lKcmLY5UaGFS
8vb8vGEjDjCHS5uhUnAImf+/BzU2uD71gS/8wyXqVbrgjc5DCK93pW6Jzapa
z+3XPxOGX175i5idzmugS0O5XweEftgCqTuSWAjk/v/jdoKs7l2dYYUDXSEt
XjE9r+BpfptR4JJ5gq7u5VQ+DvRptTzElqFqDzGeSKi21I8zySD/67G0PJZM
tbFMBv/jwOtXPg9Mv2s7eY8ryoeLM7KPwl1zkMvCr/iWG9NKKkL4gms23lq5
8lK1tMWJmFudkzfmfEC2kAvj2IK283W/4Z9KsQM6hteIllhsk2Zkv2lK8KJl
+Mj9mnMr8zKZ85GfKROVSuWt1+dV+HYl3YN0QpWGsDC0tlFygeQW5KG9ahjD
JowFDg84+unaOI/jJ28Q9edFstZy7QU7vPXAO+ptwDs2s/463cgGrNbHYjWU
RicW11jlP9QmYcZXsfika1QjcbKvrcIMdahlcw1UEfY7A7BRMPxvjEYu2fHb
L68dp7B/uF+R4AvKFnzH5AhEvxZ6ac1d1/FKGvnR2h5MY6za23EllFxIsoZB
S7qgZu1Ol7NNKkjx45pwnrm7aPzWhw8b+AXK33iamZpyRT1MmEIFGtn4ko5s
fKRHkqauDdYbUzedWHyYw6bOicebvLi0HTRWHaBwI5olPjbzUDUPnzgXTfai
/k1+okq16oU/K+IrHGtAEofz0a47oZCeav/x8VGYaOaAAgynWq85b5xVIcTP
LI60OFTrrlGsTs+nb6JtcXfiLQ+nxribCgYSznlpwmouxRLbBqt0yZLltQah
mwerAavsQDC9ZGPC0meuozU8ElZvfgmCa7SEJt5FUF5c9Olar/cZiK/XPOab
0xefx4jOubLyfxI2tBNftigGPgc7om91vqrmHqYn9cAZzu1cH5a5q1gjeDjU
wDIh7TyONG9yKPWD33JUvIv52XYqoH8v7xNFHFG080SohHkt8WC8SXBq6RPI
S31X6FUr6lByK/W7vM1d6KpLPxtTwMw9gdnKVBRZ/+tDsjoXkbPUAIuil5Wz
zZy4Yk2/Isj3WwCbXwG6JJ+aKZm0089nd9B0vzf0YMat/S9YeYvMeFqXGk87
3y4v5pI53v/AE37yn+uEn9RP+MlmNda93hRTaHpSHA7JDBn98F9P7PMBoFOE
/UUaiP8j39Cve4Tdj0Q0OJQlqkVDv2XSQVv1PgfZsWOOSxIUqFZTcsNjo2hg
AEKXOHWTqtt5MNg+X6IFWb2YTcf/onafBUf/Wz0M0pyr0RT9UihXai30XlIP
ayZkZbZaJzYl7ELzpCmjSFHCom/iCVlsIZfagQmaJwfirvrhbWXDtTK3tqYD
wwQDLjl8WI1LA78507n4L6cVRWVIlS58TudOfKwl0rrw9tZ+UMNy2lLDUrIv
xq4+svrf6mrdNrTw4aa66J+GUp9T8jCfBSlXNWfI0kWH1LUJLoFzTKGwosod
ebcD7Izyg3ro20rqqSY3fZ8kS3WS4nCbUjLxxKXzzGephTj+Zi90oZXyhz5v
/3iNl7VF1RwxXxi9HheCMxrs7W+z3x9lToC9rBaB8pARaKUe9pRkJqE0iqPQ
fcplk7fQoNgzn1UkNVP8mwkbIECecjJVyVhLepSbuEgpg8Yweq2LZidsOv7G
KvHUixtJj31x+vIUQ5JTqpUtWdqv4mAQW69H9L7r9szeWiusHuj04UMaZzEB
zylcUr2qiYMOTS2jdSW9igiTtnGqPq+klzKlzt1hKsZmzYAmEc6B11IjIZr6
n5FA6ozWLtuKqKti5xvuB2ik/Jfic7xHAiIAZvcEfP6YbNpUEfkEWfhArCbc
F0ikIcklhh5QU6F1/PjgsX+hroJurXqu++IU0cbDUnwdOzGT89pG9KaIQuo9
Emhz5tJ6pdpG2g7MFKk7sXECgi5+WnKcDvsUQ+fA8zbYBeX15DMjDSCd0ot4
KY6ger+NgjBloFZkMHNZQ3gvuLBV5UxEWBSrLKk2iNgUJd/x+yy/BdKVrzLJ
EGURtnHuRxfDtrKoYqJHqln7zA+h8FcVt9esVcob1KzdbtSspb5tWRkl2Mem
ApzEwB7IG5LUXhLT4ZODEfqlLV6jNi+eX+XwNK4XPkaINuWhXRS9IASUWia3
XurBJq5u6+xOvbqu5y40CStJAX3avWH1jGWd+NTVX/YFdPuN+rn9+yWstJ6U
9IrrRXVbECQ83gjdJmsOlM/s+Oxd5GbTvChY0cglnPSJ77bQqgaDQ9t37tdt
a8IUR9Y8cxGi7CQrFUYBxtMqGNxfr8sVhDiT2QajREc4sdWRubwW5zFmMhgU
vvOBPsFaZZlegIhLEf/LE6y3cJ04ZfK7GFXeVJ/E2xkqdhf+OSnywTzJruAi
ghwr0VY6BB6h0lKA6OCnymkTcRQmFEVsR1UcrG2DZw7MehYuG8SMrn8pD6Se
0r92jgoYQyIqjJy5UpPiyvDQSBtijywAs+5LAmB7nr5PblMMn9BmR8P9+l2G
uTbUFZQdoBUzxJTQ1jn58Wq1jtfpmVktaqLr98yYqFjNE63SYS5ZBw2Ovi2q
GgQYIvlYHRqdQ7EYsSsFwLlDHWd5N/plf3iMIjKllluxU7+W38VTb8f5Ytg/
0CgyNRGc+LJhXMFNU5VP65k3rZ8lS+NcCKZKyVuT4M8vrWMvbqGYxIgZp4yS
1XsDHoXnyni04iBvsKvzjafmcIIXwKhRDefGlMqcuRUJZwaKTnWygqj6Dx8u
Bk+HQKti4CrpfKtUORrHQIEI1qywXUtXqK+RtAyxKxcjwYlCLd0wro70NrWu
FxaqN5cC09zY2Ritf41rWqs5zV2U03fvQMJv/e2qybi8ppNRGVj9tn0QTH2+
iZa5hYks5Z9r0jEfkKGO4iZfwnW+mvsaSm1jczXS+s7FLkcZANwV3OMoqCbk
oNASlhTE0VWzcYbslUN6wbupzxRUZRTNsa3dJ7lP183AOcFSjVq9W6yiljq/
Wg3X1zfZdtm/OVhH2FB/wySB2+eD4b9hZJPUzGuyNRTPIPF7kSvY55mpy/pP
LLLZ2iAouSm3Uyv2wjO23YSkhB8nflLV9i1ySiFNkWDU1ot0k8lquWag42qc
UvLF7Ilxj1bFzRJb8ddBoy8oak8jdSw+JzehMFEOx6odgmnKRJdVQBQofnVd
DeA4QcyeyrH6R1D3LOP7zNywpgYHhb0wvUIPCEKAHbfkIqAx44AF4kAsbIVu
n5fTBErigqgQqpfIGZez3MoF40Pdi9abuHeB2YDAKY602FfRpiGgjeYqIvD2
9VdSe1jRWvULLMoFLx8raXGvkZ6ir8oX0H3MmpFPVgzkHcsp4V386ZuLN/VH
0bZlRbMDoQOW8BAJaNt4vROBIeDkvGJGgAIskPkuOS10lQ58qToOGhXR1SS6
5vzKP3D4iUkZ6ziGJtGaUxJgzuVX+bxqjeJ3zzh47SbJJDFv3PQWIn/A6Ju3
Z5T3ANDeAjV84uBXqj9LY+g7D+bOqwhohj3/kJj0ei2tWd9LaJ8ZflYOEYDh
JyTXt5KYlSiXAU4OqHLMBON2okBeD+kOrdLQarZMLuolZFnFeI3BaNeJoo1A
CWbiZiX+E8YXn1LOH6hxYx4mgsKvPl5fDq7iatCtJFFOq4bjW0mLb8hgHC8t
X4g+ENN0Rode+QykyzgtKChZE4p8+Xu6BwwxlsITrO95Z6JXoA2M3usR5N/V
DPPFs3ZKtSL4o8+XpDOKQnIYofDUOWhQk9vvWCK4ShZPai2EhdtqY72G9oAb
ZbRrlLbB9XkJC186KRk5kNAr33TKPoexsyy0JVlc8SdYLDnrbGG+VkRRQaHs
wO3WkHYLwaKvYtnMOcSJXjIXyaGiep7MESTZdJDRy5Ia6K7MAzSSogZJnIkA
RCSb5eYw1RHGbA4FCnS94uknV0B1nuTf/TB3h5NgzJBGn63AcfG0RRHeqs+2
MHSf3JPUXmRSV2MxgCp4F2dPnz43BqWPNvtxT/JBegDy+HNqkiR/jJ5R2jfP
MC/biriYYdgU9TmDcI+2lfxQ4iGxO9hHuto/Xr56OWBAJjWJUGGG6Nu4dPTd
JPVuWaSbYR0v5uEM352+eI7PDf8vvLFfPNm/5xadgaqWDqwbtQw/+7olfWfG
yUP9BfHvlNPZHhhmoG42pp/rbWXkaU6lBPhU5Y+WA3NpRL3HdWNexF0ykEVj
LaNp+tDWwbx9+J7QWU/OlnXBkx9ZaftHrA3gxnVZ9WIL+H5k6WXxOaCrV6/f
Xrx6efq8k2sR4mDIr9AGGUi+O1ZEKMM9FADWUtNQBvTFwxzg+sQtxGfhw6Z+
dseODYM1b2DKaiMyR6D5/v7a+QS+3/oi7GlCUrfZKUtjswntNjL4GTrNLzzl
oJxaVSynx9LjEYbXixEtG7hrr/ageMOudBac57tLEw6ilXmW7RW6g/RytjCd
OCTEUu8kZDDM5Bw84JKsOROZ5wj5pMQyyT7XzPb57FRrrVTh9NvtziGanRVk
Qxzsw4fAl9YIjBZmOROHG9nB5fawY0vlJh1FFdyP5E3MAQcsRGZs2JiDMm2f
HJxw6mtXezs28WR54fPv6dWYoCGErLCKX11h1CfXQydcBCO7ATtuNCjvQd4L
UrR5ylbOLxCfdHPCH7qfFWbfCvOP/fL0+G/zaAY7nKeUsoO9WNLKucn0rfW2
mT/fIwhWxKyrRFPcN2ytmpCEEfE17CMuJtf0OExInrOt/Z+Quf+0vbK33liR
3qTx3Ff+IfFSylDQ0H/76/XD3d2Hf/ue3hMVtUF5xpE9CtKYJxIcvozRRrb2
lgphrq+sAZ0aSfUiVW35hLmsTnB1VlyHBzurstiBk9pJspsH0S3pmVXXk8M6
H8L3h/2H0AL+F9o8lGzvcG41SDBgIqATt1KL0FsFMPBSyofE6jzS51pWAwNd
dBBCytsxfY2okz7cWXIardnmUUquPxaPFdO3KOBJgKEEzxSGMJHMN2HtKspv
IilVqNRYYF2px5YxBtI69aNhGLIofIKIkBLbdD86l9q8i2MyPbmgKKn64eVI
SoUnFIy13YbeOYuVD5UUQRX+TjAkbca0y6R3JLe1JKYCFVYHQqyv19H4Y6No
sHlyE4u6piVnaFCTu1kZeMblh67UMqEYsv0Eu5jEvWE9qDTmxF/BCXz+FTTC
DttYC74A9rBgS60aUn1wb2PjfQrq5ea4f+/IIHGyzQ4IdKtsGU/eB7MMG5vs
OqX9oRhZvnUJK+SENCbnFxyR6+penvdrIdtweLMmJVnbWd7k8xsNbTMVCpur
7OIxD3SPzzliTjbIQZifvTnA6EuiS2ElXM2R1g0N7nKDKECsyBsLxWXw11C9
PjFhHEnvBQ43rNKiaUKOd0TN0f0DcRkGavoz0o12wcDhkPJrQG9MBSOnQ9n+
PvtwsJfLeeEH8lowo0kUX9DU0xn2xn0APR7YyDO7nq49/IHw86i/x/Wl2myL
w4gbHfQP+0e+mfHa901FMdYwW4pfDBLeSSW2ei7AaL1pbEIecZIoxUBROr7B
+M+iS0jdalwvdMcY4DaP4KWzl4dwBUxsTOkhmlY1dJia3BUS1co4lLI8UceV
2BcwtPqoHQSbHV+YDhGqrRllZ9F0yXpuE+svbhyyea2njmPn7ESOk6BSCiLh
csk4AJF3r/N5OlmDdFvoT4Ml/bQts3kH/M+fLXNJwn0cU/xZSzgN+vuLozxw
5NABnB5W3xpoKS5TybbXng2Uf91piTZAjyiNvvhNkAGy13PrjWhxaeJKMMKW
rtOsGTft86hyYg4SnZEjmk6FWaiXn3J83UL8eBGupKIfq1Kq6Aorc6Mlckg5
HdceHJhpN/kvnadQHF3BDyapfV9dkJD5ogERfVDtdVJ6XdFiiT0ryFWob/z0
zPrIP81oKaw2S+QFTWSo3IyTIyLy6CZn5kCcaJUVVMHJ3KG8fMpWqrr4wNZK
+V6NwKe43hyW3ZE7s37UoUFw9b3alAvb/XCjWJ9qhUREXOKz5NZ6rugKdvxV
9Uksl3KoGSlZ+sZl3mWiY4nFPSpXNdJh8ydrTRVLngJxyYmIxfJeAzNFI+Iw
Q7m3xc7dibc8yhL3hzCBsUtbiey0PjCyA7p0k2S/31Ar7e5Saq58rb5IxiAg
1NQxyKc6INTl8zdS1iywWW18nfySHDHrh6koYaPcIG4sz7PzvmwHSN0V249o
AUoArV6UJR/1PrjtdHea5t7ZHj4C00BkLKiCPDEpieVNMEoFKFnEheazIOuB
1PNkQ5Yc8Aatf4mWs4LmHaB6SE7vo67FJ5ZX3SG2SKZla3c98e7u2ML2BZkX
lXhm4tPp1NdN9uq9+yxEB/PLuO9gvKweBoNJnnLnGOXIBkqRFCKBR0zILOds
O6eukDymxK5ZCXD4fmvdT7Isqh9Q4Fw5zp1zpCcpBjDPM0CgiaqwSGVYLjEU
Cu9+RrVVtelY8hhq4QR4TSspTg3Pu+DSwGuGrPoEHKWApdGR11a+ko2UgtIl
DV5IY9dap8A/4FLgO5zgYclpnGex9+ILqx27wxpqCXR/TM6FwSKvtmnwqZAn
5tuWtbqfVRYz5y7fJNcw+Ra0ZrVtdmmBua4OgOmYbPcF4AI3OvGjj+VBIedG
5J6RIP4kphCpJkyxtzUThpJu8UpvpPK+7SyCpCnFMScLurI3Tk+yZbeeurgN
TRJkQpFOCk5o5vjtK/Zikckn1ZGfjaqVFbpF6xZpNy5fcODk74pUMNyGKi2+
I3uiMIFQmNaQAWJgVbmGPGTZCXozyiGasj8V35ZD/fHVFbpray5q37/jOYbZ
gKTcBsMML0Lraa3JDQOjguQ9iipLywasXNhRm5xn37TiKJYKx3GZSuHwCK3f
ZaUhFLzqcPAsEDbL8q5x8agCp+H8ijxt0qS0OlETZIyVeWy08J2ctXqFmAgL
80Tx2KlMV0c+YQkMNUjAWjDwdUmtdCqyjHB5G6/D0MsikdojZpCaezWd00rq
5Fh/GKpfg9IDer+a/sQITHKWADrqFddrQ6kdz7KBev7+WYWZp/Na9VpXQt4Z
F/1sUpbHVRYoXeCDVoxuoYd+5JOwWAJpG0yZWiEGKlZ4yS08lKZjjxRFbThF
vFGbjDJHxCD5zMof64yv809wks7HZg66RqNPn3ouP3NjSHVS2DRivQ0MqKUz
W0Z0RTE3DdloBGMGSVIaw3KOu6l+bYxov7vBKL1Kx1Alf+sYCL/iwTmopOD7
5vEFYf6th1dLBNBDF8fGOOi72dKZggZ6jWRaje71vINtYzVzE/ZQZ3FaXJXN
ATGBb8xfGgPpNxiAU0DaGqC1tmQaGMSmQWO4WhPcr32Fzb3SV6m807ZP850O
zxSabjk4I0q2HpqVJXtnq7LKFy1goL83r5++fMK6pk9evRlo1K6Uq67jUwpq
asTOeVnQZHZwdkDRaKrzjJJ34pYMzcht6Mq1K5gtrJYogJc5ccas7+E6bzSZ
GolWWFoE6G829UIiOaCUfo0pWkYqNTlJWLS6vDNlvEnV59iJEJywX2gdbGrF
/p+l6JVYszuxiRc8d+U0V0YnqicF664zt0H9P9hDWpjqhOkCmOUU+If5Wt0R
yIr/+vxl9M03gO8QmXOMh1c4MWG4u50QdqdIttGdvQsKLmGR5VUwALu6Y2IF
ZoHTTOvFuA40dzwu8zmaAbC7M2hreW/KeoDLw69bo+H+8Gg4Gh4MR9tSUPPp
cXT0LKr99wXI9ldbo9GIMrIcHDa/UwKJrcPt3hfRaesC4Jp57iK9QcbsnGvo
pHAvL8kr/gS6wn+4pOhoiHkjDuB/Je/K3pNo9yjaHUW7B/i/X0R/GR493sVK
AHi9x8PRYy6CeWZCMdErOzrke9C0tmWihU1K2e/L0xfnl69Pz87f4em9w6P5
kvocbvlPsJN+dP3w6fHRs4PDvSe7R7uj3YPd0cPt9u4Hj2bjaTweD2Z7ycHg
8HC2OxiP9x8P9o/2did7s6Pp7CDh9TJo2Yo0ODVyl40SBr3epUuX4XhMQgPW
Taw1hMdzKZQdlqzyrHLyKiH0sMwrta6nNZ8PZXfYKxpDcw9GexKzjf/69IkX
rv15FxrnVHP81uovlWqKffzQAmuaZMmA8wraLAoZPcVT6zJAJfUoJSkwgr74
Is+No4nnKNq8ifXxu1KulNUqzjyO1sTrdUnWQrR5a0ISwl/oeBP4eASxUy4c
JYteXTbSDxgfa5gVo7BEmoQ2ntXTR9o2gJcaXPvSdbDDy9ZMMT6ajtxfqOBN
7At10Ko19QjDxnTTKrRjx8yAvmpw4y520izJoiVZSVbHcq+aAQlPkWqn02lh
bIO495karprphFQahss0b2Prwwf/wSdlKiUzsK1shGVh+FZPyDLNYjqzp5w4
IHCddjDiPcBO2LJ1jfLRi7Nv2HD25/RZKrCjmgEkYMG46JFbhzMeLNMM3Vgl
hnQ6jVGNCmsKeBVo0D6b0PytANrAwj+lsX6aAR6WPlctB1PBmwOsnFTo1SCK
u0UyuQYEUi6YcAPBzR76ekJ125UkQKbgBtonyqgiec+A+5S3CEDE5sCv4mKq
m0/mO1gUvBTr5qtL3I/db60NUIhTu9V6obZXl33bve+0FCZx+ljtFKQzT5bw
uhKsS0kOgHDBY/Ru1JLHaWYBOdWoVXgquitXSwuODB1GSNuEsWPakI+ZP0dS
j/H09YXqjly9SMfaCRZDIZYcFYOkwxS7ErjxhPole3j8VR0cjQqXosTXXFcW
41rdhfdDN6Jbp2MhjyBMo4evWXJ9wQ4Y9aoRWvNsoDtXwbxi3ko7hoKzJSQL
iZr4n5fRfj86oKjlw9bcITiAC5MsoxHd8J5G4nhrK7CiVymbJzKgZRXnaVHf
+APBZ5rdY6JRZaQLM566wEdf59bF310P3HyqPIXH6MpKPH15+e71m/NnF3/p
awcJQMBQBangLdrTb82AGKz3DTIf1d0LcVjdrcP9ostwQ/e59eBS9DUDk1ht
42oce9ue+r5F7bD9ay2eWME6Z6ZcVz/Sf233qeGd++MJXMTToKF681nrYso0
lnDqLHQfDp4g+Qy84LgTDv+Evx1WU1yFP6I3D5Vt8pC3RZm1FouVGM9ci3Jb
JY871T/iD73pFsSvf9MowguJfyw/MJPxGcu5kSFjAwtPX42ns42YZEBGouye
/Xav1zkUsw9Beivg0jiajbjxAKlUqpETHxdNpwF3NhtMxrBRkF/KQZ5OEdlg
SCQAiobCyagyjApIJ5ERjjquoqE2a9xEQ2lGLKyiQDoR55LshGkCfLEGCQ3N
GzpO6lvPADY64uPnsH8br4ra7/hW8vxprgcYgjwPHMIOpdJakEGzqFr7qTRV
f41jaSr+7nEuTrf8n/BMAr1l4zgCrSWeBEDyFb0H8Y8he5jLLGZsT1WZzGd9
t2GbRUFUqLXMaGFayUaGifaMTS4qhPZcy5La8TaMerVjv6RclTwC2ExuoFY7
AaakC1JjGLasX3E9Y2XXcw3VtM3HGipphSHzRooyqSTSYJ6bavSxBUPy/jaB
IY5LRn/7JSnXhJVEVTIIKflsRuNq5SDxOYUDiLdlz34FYbQm7jbDQyCtNBcv
6teCQdLK+U+ZYma8uodlMJ2eMA5Wz8n4OcfM+QpadNgI2aj3dhYPoQZcjWSb
lTSSjy2PtNqIRnT3w8WY9AZD5krexlfR/h4nNKuYTfX6vyAGu9JQVyFTmEMX
+LBxerXKV6XLqCHFlTu22dC2N/bc0LVvgChW7vvBRDBxlaEku07Nn4xqTjXd
zKROBtWQxM71NNK38bKlF/6MsjHhBfXOM3bymK34AFR3p6V2FmqmYa7ShQnG
3HCStjN/7LgDZ6BonL0zTzTO3Ds8Zw6ipJyvVwCTfBPuEv2dm4cGv7oz8931
+TjvEFYMtfuxsHa/fYM1s0hY0CgcpbEH9LUMF8tPqrkJrWo3NEYcy355G0TH
UzDGFkbogfHGWc29TOvTuOTRFRI28Ysy9nJNK6XuIPkKZpjxJKFhmy7LljoW
NRcwD4SwUEZF30LNqKq5qVH+EJcG5//hSjNXTtOkrtSc6hWz6dl8r6Sbu4kp
ps4kPcHDwVrtkrU3Lbg+uyAglZjDcxIvzFIdZZgP4RQQ4j/zDBaQeBcytyVT
y80ZRChJQCGeEZjS9Ib4cNYBJdk09BwuXVzn6fPn3uvd18lWTdm0nuiPXim7
zM5qbhLveH/vXvGlXWz8LsULV4UomrnAN65miZ4806D2heYlZOWdyU2YceqR
hjvREPXnKLHqzQy8vkrCetXdFL17w7B7e02d5MDbCMXVxYRBN44Z3WJQM/GL
fIejVuzk42tb0ZQtxSqhmt6d17mrTgDxi1KrxSk9Hovna2LiuJ81V6Nr7WMA
W2B7hRvRwu1yV+ZEfEhy6gok99nFA9Nzdh4WeVCavNGNbU0oNO4i23RqnWsV
197u4xaPw+sY3y6tIsNUvNNkwN4rpUve2eJ4guQozVaJWX+j1Is5g/6dq7nf
YTQUAoENHNlA59XD6AITRuOSWqOPEFOV7KtIWW3ScgIIIhEf3I6AJbJSMRpU
eUusAETKVhU9EMyX1nHtm1+BOpx19bYgFlx7Ew2fOneyUyrkTboS7w2Hyw1G
cIhawzed7xddQmKSgUhEp4niAkxEpcmi0zE7VbbtIrjxe+2EFnTnVhYYgStQ
UJJdwlvjN591q8BFbg8NDozd2TG7bUY6MLJlcyoiDFb2Boh+oKs3vmUdPnYN
QFoZR85JWKJFWAh+odAZE0IhyEtOePHlCJygjVq9UcF+p1GUHnOBhfHUmv+l
Z2LDbIUB8Q/FCWOQy/go0Awm0dPes1cIPx+ZmmlYZJDs1GIqEyYKqzeaU0N/
t7ysgp/Ync5HbpGCXwO3bdQJm0jYJutrB69bqlFxWDyVBPATaaqTZrBDqF75
8KERmPEpiKrzod3RL3Ots65pklBC67a0u9h1WBN7jatvjNfqX9c1nHrVbRiv
3buua0BbRLYxlKka6z2XOorKdjjCddW7aRuv4QhHWK45Uiw/NwagD94JyxfC
aS7Gu2OFD/DdmXPHIrENJZt40pYJrEwssklrdScmjaKTw+Btk6mwCLxWNYN/
+LIr57Wv/hPmu+jl2SLOUy/4qWr6QVTNBxmQJvEc0ZT4iwO0MBPh6peGqvJF
AlIM4FryqJ7Yj6YaTZMZ7Jv4aKkDMVd/bqUZEnjsmzpigllj9UfeejDeqywZ
vE0XyQAYJSzdsyDriK6Utlrq8uPyffTm1Ys+V7zTL2IywPIuLNZdi0VGdHTu
gp2rgZilGCdfzfMxeWgzVfCZRmI3kBsdPuKINV9oTgAL4v/KOgr4gZzqDQPi
aucXnB2JDTRBY6Vh6mVZs9WLD2T1rk5nqDxohgdL4ATpLGONTOHMOZmJMiJZ
zgoQhQTFCe9gYjMa6VdtUDWn/VBOkKpjrMbc0ktxeTN7FMcjCOtsBK109u8L
E5RQlZbtSaGGdu/9PisMXQkG5lSMDU00BYHnvRNZg+Bso26YhVlPK0w3wcyc
PMJgiZzjlXJjdS1T5JBanIGm3ZfUzhwFGsKBHFBjTaggory9xNGtMgZjt6YN
IxlEGc3jcTJ3+VCWYSWnqCBHibvLN6HeZq6unjJWpgkw/SCOsXNoOhjWur8Y
TChxUzHzzGHeWocRXZppqvhUTy1dBkzyBl6jfxf3EGS062YJPnzRzhAQ1ZOC
Gex/ZNoxovCtT/6/Wq5kfm6ju+Lk1+12GPncB6z6m6Ov4dpBtJgv9PENJW8j
5WJBrFFLQ8TzGZMjnAibFk1iDfVCDqkjZT/pcqIU4jBeB9FjwQBDl5FNvnsn
xzAdmz24s1jquHA6+Vq+C5+KSFK61DKnp4X4FZW+Vntw/sPoG+eCiY6jGPuP
Upj6Z3Ded7lQJ6Q5M96E4s2EkhC9rtDH88o5LbmYdURC6l4110AbfzfOzRnm
9MKkd7ysX7qvPN9Vg5TwWZbjgCa3fdV35h+jOSmHdzL1LWDeFCS4PkFbXpy7
X/SGdCusNWvxg1QuVCPEC3a2JwEutdKqO9A8iMxyfKdoglpUWM36BdYNVIki
04buUezjUu/O0G20A4EaEaUHwp3U0Iq7skyoC7TTo3VY6Zu8QhhctO18YBtz
MIKZOqs6pZ1CLGILeMnngFeobMDpw9LyCyxMM7z6kV3vfouyrwmyVtjbnIS+
ccqh4NY86NAmfo+j9+0lenGztb55HXVRUs3l/hBazU214qqacIOLrLIOjMkN
Y0VaaMeZsJDq0lGGImqv901mkoLOOduPrNHZa8KU5Kqvgn4/rLKJk6V+mZmg
6yaZA/rwRbtU7FLA1tqH2dk/Q0vng4ICA35WS07eRzVkmTheyxEQwINUxYMN
SB2crTqx1+PxQ15Ugp/HNdOm7NAjvS1YHixru8Xjp+79ErWe4l3JksXtRi6t
Z0KWWhSCFKYsOgZ9XIVHtqaz14l9nkqsrRj1x/uY+Z2C5o4i1T1n2WkM62C5
ZSwPzL22Qs+NsVoqO7cN21oAWsIYG2POkqp9cWI1B0FmuW52m/CvHb4ZFHTZ
6FPQj+0+Bj2bWqq1qzcItI9hDIC9S3QBad4w/9rhGXI/bZkI9vfSlbFl2sqT
LPwienBQ3SJEGrUE4QR8EK79PVQRjSxyLjmbaiKmAe7c/AYE/29+Ab3WN2Yd
XQLfH/ZBkMQ0uCmboiuzAhone6bgR4mRXEl9SpfySXen3rwk81HNEknIhqI7
Fruky+IkQ1utvEHEKQiAI9zmWJRxns8TEEnuah69evn8u+jiWbTndCFNJ7lk
uq3xK5oeuL6u8v4z7d8xkzq4N6ytJgnaq5fnYQK05kF1OddxfFdaShLue0wm
fhcubb0DWz1ktq8+QJvkA1P3nTPFcmYMWs29ZgvESc7LRVG083lzEfGGG4l8
vfPNR9DTGlywwgFmQWxXkVzM7kof00wZ46yfVT23ElvDOOlQbWdB2he2YC2X
SVw4VpQNhiZtvrjSdMovuIjSrEwVUnclxCEMRwyMZvC0W8g5zaXkrXHuo7Uh
+yzzu3zsdgTJg8NoJkgjZIXBSoqt1QbuQISOajewn6PZYvd1q7Dp7dpdAkgl
w/UcWnLbae5j9MQRL7BvykRldWen9Tghjh7AYnYmyM8P3L8eGBPwi4YOrySN
ix/Djn6H08S9lMu2fL0CdFtqQklA7twrZnQijsKLI850xfmym14exsEGgQ3D
xgUNoW+KDqMOVD4BdPtA3V4U7LDFBv2iyIVHt6ZyKxyglFNqzTBTyxPdHmA6
1qC4mq6o2/cYCJXfa7/0rSydu9qTXBJW8I9jNdWZUQu2mhSIG5xCfOL+DleX
rr7O8c6buOspqzoeUxvb2nhXbUyrAOTmkWARaJZnuQ33RmmswzxClD9ZFGiI
mZz7kOQfc42cfJVycT091NAjM5S4lwW8+qzShWhOfeAeK4qi9YvBuFxXdqiR
Ucewk80YhHscxC+/IJYBGlfCEkBjbsmELnEjZZcznc8eb01EXl1LWYlM2XSv
KRIJ2Y0pKciIL6xRBUTw6uDSPCVeKT4iUXaExiqevAHx3AtefpEmN85hJqD6
rsCEZYIJN9S5Z+cQWGdkRCnAzx8xQq2qjWXrED5oVYLjWiZRHsaMKAvtGKfj
sLyyBqsVUI4q73K9ytgpNqvp4xf5FOGNR/BZTS9mQWpW18UzBIDbGiE5jCVb
dWY1d/GuPeA7Z7DEcIxA9QtvbGojEjQoh0G60grJZcdDIam38U5I5m2shdr+
wley+WHUWZjotKHGCdjQOnumLhc+I7oAo6cNKo/0uZLOqkkXaHudj6S55rq2
dHCvFyyzxJTcr9Rbo0iau6Is2viVenKobebIxcGgNVLFg0/e0YKj1OgRjrl2
YcCzzRrG0VAj0gAn1Ic0DgJb8l+bQKkq4qycJaY8gFMU1gNeWER3PL+kNTKS
RtsU4q0PeACDeDkTr5/K+/rWdf06WRh/YZWZLdsFQT5fXV13BMXIOM1b9pm7
tl0qFkkFaxx+adExSxrThF1T+PHUlRjsrNJaRZJyENbq4tDNoxbWpWB8Dmfy
U/R1UmTJ3OlmnlMS2BlFRLMLPTdjq5jPNVpfaNzUstTyLRHaJA0/LC/SHOmO
OeC763R6ciJmy+0j3kDd1CIxl85STGOpwniHfFM34DLg0VXTANfJfMluF3Rl
N2qNSRbMu3HwpDHidr4vrzZse2heaUhpsTkBcWTsGk610Ne10F6cpMcC23zN
IlsyDbn+rgCfRlL1YKF3nparhGE4VLY6dPD0gXzQSXm9ytL6XusG+kFJh1q+
dIpDNInFnKrRq0+jOzzXgyNwAES8gjxfPpJ5jGZFTrYsJcUxw+yEMJwzMway
JRnJred44KxdFasOMTBYEvkHSPQBn5KpA8GTuiMOoxX+3YJ1w9GdV7BptSRt
l5sDFzb1N+ELHapiVKY3dcOoSm8QL2p7H1Zokd8klsi63AcuwtLFmtjfpJl0
KlOMRo6zJF+VqDUmYwB5gSWU5oXdAiZUyHCBZdonbcGExHlwklWGsLY9OdnT
TO9DUxzLw9kDfc4Dv/ImcVE5kGjLadlqH8W19bVyYpMfwRRcFPjVwYk049TO
fA2fd5hKBHmdWpPzTMv+cAsm4IkyPJroapxwJKDilXINKAFxJG4IPUmNSZ0X
TqaUiSyAFa/3u3XJYlLvJhG1bCywU+DyP3P8JGv00uFbQXyzVfQCmWpKKXSG
CcKwBBYySx++SPXDgDOHfRIMSeoeW+BbYkgaBh7N7lCrQESgEE8TWws8ZQDJ
bzwzdJ6xBTpibapEOUiyJZNBoTWlQjN/Q0J57VmW84FVgVo5cepH8W4i36TW
RYnLWNCjsS2XANFPgSE5QbiGHxB38T5Z+yxviR6AS6FJfnZ03WhoFi2RJEoL
ui5qWyrVWan1suG0blgpVfdVcndwrtrdFtO87HbAJawlN0V06U7hXJeP2btr
jXu9JzZbgNMysIaR0wlYr/t4UqG6GGuAuN8wz1cp7uDLtrr1OlyR8F3CIT2g
5SXTB74IH8ckwaax5iyX3vOBAnMYaLKezNGRHXuKwriWvgjzKCY3vOYS66PF
lbMN2KYOLsSqoxnHC4eJaKnkLWaYZF6i6xhrQpEw07czSbj3S+F87jrajyhl
z31yuKabVlCSJZLGrlnx3RyHOf8FKWlSk8IN/SqYzHfMb/wRQezBRCxAGJEE
x4UpyOIT3DbT8dJixb1fASecgjjfK0x+RdUZMSHptCYpweycowJDyOfpIhWh
ULRKSNxEu6/A5O7S8A5SkXmazFPK8abWgloFSHyUNjtuDXuM1x4MSMZoTNX3
mV6pgU0gA0hTawUH6FJPnhBhPc7EEEIOY2O7wJidsJlBqSTOLRg0KG3HpYwO
JMePt3kyOPmkM5gHiL3qiFZLWlKH7bRGMfXdkomewI1s7xxHv4XxJXOdi1+V
gxt6jDNHBeuGEVycvyNEbD50a3BguUDh9a7hZEHBYjyGo12nZV+NokFsRdm4
i9ZcEPaGCilKKfoykjqo+q0Aq1p8GlMhgo5OufzOmVRj49J7H76I6Wct0jag
algshcIY+LSwUmNalqkppurBsar5uFPmyLBqApule8/SQjpIKUDMk0vp3FzU
B589bMBr58liYiGRiz7LCQAjT7plIIWKFvFMNJUoZYxArC6yGXtWF3lu1Nt4
dCojBxP1cRKWggnxox1Q0lZSrSAizVr+XDzCHJEP5nD1SsJtu8wbkl4INzal
p41RW9CCPPfENREJFkEkzAT4jGMvWDr9iX12T5E7AypeP1QMcT57Ljv0aedc
NRJxCuq3HbOeL2JwKpskVVzzLOwsh4/zXBUxYTcGtgKT4krqkEbNCspwC1+M
Isl4SgNySH9KXNkVNXdwjlqK6Ct8QXoqmFOiU8va/4gHLBobV3tUsQ86YpC2
XegmiRruB8K7cfvC/MFiClFgyTyWhv3TRXDZJb4HZ6ozSYxzlzETLXaML1Ha
GlwJtZDHWJ4Q2sVj5SJ1NWWmX9TmU5SHlYVHQ2msSDOJ2Vb8BN6JJWtaMLFB
fRQBxbEKLCJ5hipCH0iBuIhrQAlCPXPMkDjLPtUUbUp0jCu25MZE7KVcFFHD
29zh8BOSZedXObBC14uoFjogaLWWoS7ITjcVMYMiGMkOw9HZV5zb2yQa8F6y
xroqcSmB0dz7CJkJeIO+9hThrNZ1G8MsPEybdTEvkwHgu+sBdCRH2beBR5Ib
zkcIOHFQXjngt6afjZTo/Op0sHd4FG0NRkfbvNr2oZmq2pGJgDXH1WG/Ph/t
HeO4x9syz/7xAfx9sK9/H4728O+Dbe3ACzk43CYAosC0M1ujgCRYjAnr9ehj
yhn1kpLRHc2Mr5GKKBIQAWmIRruPnJlA0puVGvC2djwxAaGT3LoG2r3vSC8c
ZTAjkcqS0+kbRcwOCfhOMpQJXlDbt+hc6KbAwcqkWi2dUli+pCwzNmvltB2T
DBGHK6dVO6o8dDnyzQy1+vAUYColm2k+orRChiRlMXIF6nGl0/X1PewO9vYJ
8C+xBAapXU8n7GK+dwBQeUgfL87fPgPUepMmt/D74dHg6PBwnz+d/4Sx3e4j
vn38eITIkmQCeVjEmCCq0n9eUpwi1hJS33lZEq4INrDrh08pxneOHlJ9+HxA
s8wxwTO10byr8FlkZDxHUZuUvd5zDMmMPmpmhXav8RF8aUum0J2JYA9d0pvZ
Ero77MPXMH3BHRkKDmi1HNDZO8Tp6ikL7k5JMMJltrvE39PbfbRvlzHCRVGe
g94Il2R84Td5vI+OgkEeBX8dB389tn/t7cJf7e7y9/SE38ObfXaX3/se3eZm
N/c9OohNbu17B1QitJnyYgMUHQbbDY5pLzimveCY9oJj2t8N/sItX272f9/f
k80YN/y7HO33A0jAoBI8tGbuig05KvR1+pv8Be/z6X2LhJkn2tqnpQyYf6RP
71uY697PdEMJLX6mYZWou+pA0cOsFYO6q9wTPd+gktjmamF3vk3/F94QVwLr
KPpFb6yl8td96nq5t3d6dwmv4BW23ntbrbZf5+mFj2Jj9Sx9CqTzZ+vAZ7wF
x/SZisQ0n/IPAp8DVKzJUxCLwT177NtZ/nj56qXe3YY+B7bPd6cvnt+jT/PI
OhrCif3rvyhtF+j5ZYcniETabTwzzoV/V8t9P+hTLoVw1yHRsGRb29AyRCb3
vLejoJNUk9jU4VFrhzeaJ/vXuToQRrXERihPiNpmmk+c4yDXbTZ+t1JYFuT5
SowJlCuNWW388xo4X6oHxx5qfU2I0Jfy4eRvEibjliqvJfvPsKEMNTDs7CAq
SSr+RaYFLHLBemdSXehQJv3qRf5W0wBgNBFHgZCPiOy7QnaY9ihC6yxfZVPv
TjC5TnF7iMgpKcTj3dHjT59kB6wTsEGiBEHccLR3AA31CFURiUHqsICrRNLt
/jmJbslZaZ6+F2t7nL2ngU05ILh+lCZEkkoLl/Ub1gAnnl6JNE/WESmtwlUj
0nlewlG+gCOKJ/DDHxJUtFTR89VsBn8+hU2/yUv41x/z62zwOl7NSeqAmaZY
ZGJ1lUffojIwq+DPs7jA0q/RE9xwlsEv//Z/r2/QofPNv/0PiiyAC8Z+zwrc
xOlqCsTh65t4URX/9j/g56+Ln9flzxVc5tl1sfqf/88k/Z//vXyfwpfTbFr8
nPwQvV79PC3yW/7xRQpbgfN8g/8XpKA8oxXfpNPoCTTCv85RnlhBmyeodpvP
0x7ilWgcT97TeQ+jZ1jij6JUP3wxg38PJtPp/FPvwmbacJVWMLlGrUi3ewNs
c9FAV1dL25oQSfhdoCHnSkL+4innr8trN0oLwkIfJgfMkFTP44SX0W/r4TOQ
kKz96vKcf0c3okyc61KxEvuvAtns5cqqj7pSplCBleycAL7Ho8O9T5/6iCAI
srFWBZVNoSF7xEuqVuAdyPtYiejL6Iuj4Wj30VbwdTtsDK0+9CI23hu9K8pJ
7A5VRF/+nhVVQyyswaaX06BlXwdwyKitj14htqYfnJnWfXr3IqFaINjkN9yI
rcYoo797zT7A/PG//bdwz+eaXRI6Y/Blc5Ww079SpZj6wpiJ5Soyv7ljq++e
zHOA5e9lBuF/eWQRDAinO5UUMFCRy6ljNWT9Wg/W+52wDc1ukecYuPSZpZu9
bWnRzpcEanCmEwGEezS+BJR1/9Yw9O7njT3S5r07bh6OEuv+/IP6uNKNixd7
C0zVHfv6vq9Qt8/sRSbWli7IQ8Fil8HNeJeCBa/eXFK/ty2bbUIwblLWqJ/c
VtHiIvNv9zY2iipoI3O4Y6w9/d2t4PN2rbk8/trrHWitIv0P1jPqt7RTsXcg
mbug3QqrlPqmkoO1+V/HrTAucbfhatdSjQnbuZJXIqjkm6z0IOVxSBPR8Ld3
Z9d5yvdurtMdYhsuaZkhhFWiEki3Pg/gGB4+qwu6gt+zB+5tlRk41atjgG2F
167TuuNpWny4E0kZ11/2XsOhfsHr3TxA/S13Hk85mNDOLe7VU2JodQ/oHxy8
a2hRDdq1k4Yj13ph4LFzNb3rjQRbNwDMX4NL/eSX21wYkK3ot7WVvTM6OUfl
1Nq8DhGGs0KvNYdSePbBJk1jsQU2TsXMXduZX0F9d3/fmh7gpNdCcZEi0S/w
x6C8jtGgBAO0Oijea4D3yWjv+F4z7R8f3Kvd4WjvfhPT0rtv7sso+iuzMt8H
8OpDr5UZ+m20VctoE+3sBMCmRoJou1cbzH3Z2VGKtlFR3o9Yr35aXG3ff6Ag
Z38rA1fb22eM7eoWeGLh8oq8e1us36Ha/p0G6ciQnzF+i7qdp/rw25o7cYnV
8fR08L6RkgY/YFaI4Ie//hbbwJ307rlwd+l7TTa3FbP8Q5bOg0sPovcZfWz5
o2uCkE/SYoEKR2F9SG87qg8vihI9S/EBEJ1gn9a9g9R/B/a+gzHhvcbcvu+G
JJbU602yfMfJyO81TDPT5S8apqFa/WWrMYawvmD0X7SpQM/e/6XDUIYCXUfH
anoNoPiFeGPzEPfDGBaW7zXs5yGLew35efjhHgMSO3bHLdxjGI6n+HcPg3a0
X2EYuM/aKHeCVvM+7kJ+dZayhv38XBHj5mg4pgBcllO0cgH+JtE+4Y/Q6++2
POtUAkKCFljSdCBZn0D23+23t9DAqJNADqMW5bpEjacZZK+riR9l37Gxxlrs
T35T1dgvf0+jb0lC3neUJ3cnopqrwKNtb/f0nyKEjva2WJi914SNHKvAJNqp
tu81ijU+9jpYaWZRP2c88h8WGfd+/ULU6vveqzOKvCLp3m+2RsD3Z63VldZz
2od7dWsmrW3c2P2OSsj+79EHcgd5Habyn7EUa/qlXcAg9z05E33oevYCGP9S
IIigYKTct8qSTjDyv36drEsVYzZw6r+XjmFn3xaHoQafnDDX0kKE80AS1teL
FccN6gy0J7Y5WUvqrbuby+hS1vyeoyMiutfo/unYvIP3aG6VV0FzEvVbOrxP
1m0CvrvD1qP1Nrz7rI4tYEHbTSelY/9QolaAjcN3t17Hi3lr63Djze1u1P1H
IpAuvMpwv1vqrovX0How2iBkN6Rp6nDcqwvP+PPBfq8uK9PPB72GaEy/H8K0
RmvX9ylUBy68J9ybg50vo1HtS0PVGTlBXSSrfaX6VmX5ZSRyv9cORo96RvEX
if6AdHrR497fX95jvTXdG2KjUIUWjR51jLTKamOxyiza23dpgJ2iqLZHr5/C
XfkvXjqDD2jtbiQUbuEi9IA3ZFe387flsxYEogffWZSIGh02FsW5nFv+g7Ud
1Bs3qZxrvHfQjO5uSRqqQ+/VG7t0Yi3rOLxPlitdx2577p/WHe6NWvPKdDRu
rBmhtavxfnuwe3vr/cY6gpj7WuO9RtqADZC1gaf0kNWRCl4nbIy0AbI6+JDa
vXfwHNqqMaPhPD1YHDSmDMwjtTvewCCay21hBNtudSPj599Ck6+zmKGbgvrr
66ab/va6qaW/vG4aadDYJm4pWFAHixQsqIMvChfUzgwptdjEAUWHrW0Ctic6
QtcA9Lh4MozOOcAUgxIk1lRKwhivA/0QTZMFx4qSAwaFQbIDvQvenEme+ngu
4b1hTO75DedLISLfltRiEmcuXcsid0GhZWK9+ml5blFUS4VjgX2ND7/487On
lxRztgTSX4wwaO2EfCPQ92QweHL+h4uX0es3F9+evj2Pvj7/jn7tvbj4w1en
V+enL568+MOT9Y9/uHxx8Bj+/sPZmfz79vyrJ3/YvY1vL56c/ulPV6fLf/ru
h386++YPz18c7n775Kx39sN3l9Vffrv7+Ic/LLL1H18Xy6fP3/68c53+5dX1
m9OXZ6enl+fz/BxToPz44+M/Xn/7U5o8epkvbn788fnxm+qm9/q347T6858n
19Ob0+JtOfv6fVWefXf+0+3XL6vi5Vd/SR+/erL/8re32ek3Vfnz4s3e/ouD
6uv0z7yt85dPm5uiW3/bcIRZrsbzdELRfDa8PcgjVPoDbzm9b548vzgzh/fs
/e357XdffZ3/08XPP+yenf7puwv599PTP02ewnGdX/8xfvKHHw+e//jjzeV3
306+y1Y/x38sjn5Md87HvfHPO4uD4tt5dvGX8e3Xu4++Wi+fj08XT15Mzn4Y
xz+/GR3cvL2a/jwr/3j77Pn4xeH7afXzq+eX+fzqyy/N/mvLou1zdgTeCteQ
ufzqFJlCicUUHK9wjNEVeZVo7HuQHjJNNBUl0JBC4lqJWGeAa2YAfxqt6rMT
Z7XDZO+floFtrdIA1IMsByGoUy4ofB+iivoYkT+nOm/2GpojRImiGUJnz8ng
NdDC1mYz5x+NzdBb2jSra5k+Rpfrsj5WXc/EjWiknibo8L+ZMcycdpXGI/Vj
sMHNdTtH9v/fyWXe0T6slrl56HotzF1puetbN6sM7NqGrUzZHW24hkDYBP2m
Be1HuyfsVZpET3Ks48JVcOWjyb5hgCyBb+ixSS6LZ7Yij6Tu2PrwQRvRtt13
Ttfy6ROFyvlZgw7k65kMMM/bJzJ6VRz3Sd7hLqfIIs3SxWqhK2Vntx56s3l1
yU7UIbXuRHsnv/vdX3uWuPKzP4nqv8tA1l9rB4VW+N8HIE8C4ngQ7fRbugR+
Wzu964dHR4fHSXx4tLt3tHf0+Gg6Hc1G++NHx3t7+4/j3aODafxocjQ5nIzj
2eHebJpMD/aO46PZ5Hh/8ig5jGcPg0m+//3vw1ld3g3cw+h4q7kNXpd4ACe4
j9/97kNrK7dp+N/RyeARbvb8smuv+N+n+nL8MKvMTtk+4aeuziLLwr+e4ZFn
gAI6VrDjTwD+ff1wdzR9PBnPDkfj0WQST2fH+4+TyfHRo2l8fPho/3A0Ou6N
44PJaHw42p8dTmdHu4fH+8nxdPpodjxJDvYeHUyme8levDt7tDs7Pt7fG8+S
+Gj/8fH+6NFe8uhR/PhwlDyO9496CTSNp/Ho8f7eaPx4dz/effwoOUgePWys
8/vt3/8+vEX3V3CfO54z2on2T+rX5D87vg7vadTvalVXT+AD2K23FlVF24Su
gcr+OEA7gP0VTn734ffNrbe9kbrmYCc6aDxM33qznAtL2u1vAmdHDOA1jk6u
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

-->

</rfc>

