<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-20" category="std">

  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>
    <author initials="Ø." surname="Rønningstad" fullname="Øyvind Rønningstad">
      <organization>Nordic Semiconductor</organization>
      <address>
        <email>oyvind.ronningstad@gmail.com</email>
      </address>
    </author>

    <date year="2022" month="October" day="06"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about code/data obtained by a recipient (chiefly
the firmware for an IoT device), where to find the that code/data, the
devices to which it applies, and cryptographic information protecting
the manifest. Software updates and Trusted Invocation both tend to use
sequences of common operations, so the manifest encodes those sequences
of operations, rather than declaring the metadata.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata describing one or more code or data payloads and how to:</t>

<t><list style="symbols">
  <t>Obtain any dependencies</t>
  <t>Obtain the payload(s)</t>
  <t>Install them</t>
  <t>Verify them</t>
  <t>Load them into memory</t>
  <t>Invoke them</t>
</list></t>

<t>This specification defines the SUIT manifest format and it is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="RFC9124"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>a Firmware Author to reason about releasing a firmware.</t>
  <t>a Network Operator to reason about compatibility of a firmware.</t>
  <t>a Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>a Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>a device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>a device to reason about the applicability of a firmware.</t>
  <t>a device to reason about the installation of a firmware.</t>
  <t>a device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="RFC9019"/> and the threats, requirements, and user stories in <xref target="RFC9124"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or Trusted Invocation are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In this document, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the language is tailored to software updates and Trusted Invocation.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and Trusted Invocation use cases, there is nothing in the SUIT Information Model (<xref target="RFC9124"/>) that restricts its use to only those use cases. Other use cases include the management of trusted applications (TAs) in a Trusted Execution Environment (TEE), as discussed in <xref target="I-D.ietf-teep-architecture"/>.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient's storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document"><name>How to use this Document</name>

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rational is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> gives a summarize of the mandatory-to-implement features of this specification.</t>

<t>This specification covers the core features of SUIT. Additional specifications describe functionality of advanced use cases, such as:</t>

<t><list style="symbols">
  <t>Firmware Encryption is covered in <xref target="I-D.ietf-suit-firmware-encryption"/></t>
  <t>Update Management is covered in <xref target="I-D.ietf-suit-update-management"/></t>
  <t>Features, such as dependencies, key delegation, multiple processors, required by the use of multiple trust domains are covered in <xref target="I-D.ietf-suit-trust-domains"/></t>
  <t>Secure reporting of the update status is covered in <xref target="I-D.ietf-suit-report"/></t>
  <t>Compression of firmware images</t>
</list></t>

</section>
<section anchor="background"><name>Background</name>

<t>Distributing software updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="RFC9019"/>. The security aspects are described in <xref target="RFC9124"/>.</t>

<section anchor="iot-firmware-update-constraints"><name>IoT Firmware Update Constraints</name>

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivered to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model"><name>SUIT Workflow Model</name>

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Invocation Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and invoking images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Invoke image(s).</t>
</list></t>

<t>If verification and invocation is implemented in a bootloader, then the bootloader MUST also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader may add its own authentication, e.g. a Message Authentication Code (MAC), to the manifest in order to prevent further verifications.</t>

</section>
</section>
<section anchor="metadata-structure-overview"><name>Metadata Structure Overview</name>

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest..</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, such as affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable elements.</t>
    </list></t>
  <t>Severable elements (see <xref target="ovr-severable"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| Integrated Payloads     |          | Structure Version            |
+-------------------------+          | Sequence Number              |
                                     | Reference to Full Manifest   |
                               +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Components IDs          |      +-> +-----------------------+
| Common Command Sequence ---------> | Command Sequence      |
+-------------------------+          +-----------------------+
                                     | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope"><name>Envelope</name>

<t>The SUIT Envelope is a container that encloses the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that would add substantial complexity with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-auth"><name>Authentication Block</name>

<t>The Authentication Block contains a bstr-wrapped SUIT Digest Container, see <xref target="SUIT_Digest"/>, and one or more <xref target="RFC8152"/> CBOR Object Signing and Encryption (COSE) authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>Each of these objects is used in detached payload mode. The payload is the bstr-wrapped SUIT_Digest.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest"><name>Manifest</name>

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical"><name>Critical Metadata</name>

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which manifest is newest and whether the structure version is supported. It also MAY provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, and <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common"><name>Common</name>

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of two parts: a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence MUST NOT have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/> for more detail.</t>

</section>
<section anchor="ovr-commands"><name>Command Sequences</name>

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Payload Fetch, and Payload Installation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Invocation Command Sequences are: System Validation, Image Loading, and Image Invocation. An Invocation Procedure is the complete set of each Invocation Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command (dependencies are not defined in this specification).</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity"><name>Integrity Check Values</name>

<t>To enable <xref target="ovr-severable"/>, there needs to be a mechanism to verify integrity of any metadata outside the manifest. Integrity Check Values are used to verify the integrity of metadata that is not contained in the manifest. This MAY include Severable Command Sequences, or Text data. Integrated Payloads are integrity-checked using Command Sequences, so they do not have Integrity Check Values present in the Manifest.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text"><name>Human-Readable Text</name>

<t>Text is typically a Severable Element (<xref target="ovr-severable"/>). It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable"><name> Severable Elements</name>

<t>Severable Elements are elements of the Envelope (<xref target="ovr-envelope"/>) that have Integrity Check Values (<xref target="ovr-integrity"/>) in the Manifest (<xref target="ovr-manifest"/>).</t>

<t>Because of this organisation, these elements can be discarded or "Severed" from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system severs the Text sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated"><name>Integrated Payloads</name>

<t>In some cases, it is beneficial to include a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest's envelope.</t>
</list></t>

<t>See <xref target="template-integrated-payload"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior"><name>Manifest Processor Behavior</name>

<t>This section describes the behavior of the manifest processor and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the manifest processor: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup"><name>Manifest Processor Setup</name>

<t>Prior to executing any command sequence, the manifest processor or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the manifest processor or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the manifest processor can choose between several manifests, it MUST select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest, according to application-specific policy.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported Component Identifier encountered.</t>
  <t>Payload not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Payload verification failed.</t>
  <t>Missing required component from a Component Set.</t>
  <t>Required parameter not supplied.</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Selecting an older manifest in the event of failure of the latest valid manifest is a robustness mechanism that is necessary for supporting the requirements in <xref target="RFC9019"/>, section 3.5. It may not be appropriate for all applications. In particular Trusted Execution Environments MAY require a failure to invoke a new installation, rather than a rollback approach. See <xref target="RFC9124"/>, Section 4.2.1 for more discussion on the security considerations that apply to rollback.</t>

<t>Following these initial tests, the manifest processor clears all parameter storage. This ensures that the manifest processor begins without any leaked data.</t>

</section>
<section anchor="required-checks"><name> Required Checks</name>

<t>The RECOMMENDED process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a Recipient receives an incompatible manifest.</t>

<t>When validating authenticity of manifests, the manifest processor MAY use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity.</t>

<t>Once a valid, authentic manifest has been selected, the manifest processor MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component is supported.</t>

<t>For each listed component, the manifest processor MUST provide storage for the supported parameters. If the manifest processor does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The manifest processor SHOULD check that the shared sequence contains at least Check Vendor Identifier command and at least one Check Class Identifier command.</t>

<t>Because the shared sequence contains Check Vendor Identifier and Check Class Identifier command(s), no custom commands are permitted in the shared sequence. This ensures that any custom commands are only executed by devices that understand them.</t>

<t>If the manifest contains more than one component, each command sequence MUST begin with a Set Component Index.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by one update, that is the manifest:</t>

<t><list style="numbers">
  <t>has sufficient permissions imparted by its signatures</t>
  <t>specifies a digest and a payload for every Component in the Component Set.</t>
</list></t>

<section anchor="minimal-sigs"><name>Minimizing Signature Verifications</name>

<t>Signature verification can be energy and time expensive on a constrained device. MAC verification is typically unaffected by these concerns. A Recipient MAY choose to parse and execute only the SUIT_Common section of the manifest prior to signature verification, if all of the below apply:</t>

<t><list style="symbols">
  <t>The Authentication Block contains a COSE_Sign_Tagged or COSE_Sign1_Tagged</t>
  <t>The Recipient receives manifests over an unauthenticated channel, exposing it to more inauthentic or incompatible manifests, and</t>
  <t>The Recipient has a power budget that makes signature verification undesirable</t>
</list></t>

<t>When executing Common prior to authenticity validation, the Manifest Processor MUST first evaluate the integrity of the manifest using the SUIT_Digest present in the authentication block.</t>

<t>The guidelines in Creating Manifests (<xref target="creating-manifests"/>) require that the common section contains the applicability checks, so this section is sufficient for applicability verification. The parser MUST restrict acceptable commands to conditions and the following directives: Override Parameters, Set Parameters, Try Each, and Run Sequence ONLY. The manifest parser MUST NOT execute any command with side-effects outside the parser (for example, Run, Copy, Swap, or Fetch commands) prior to authentication and any such command MUST Abort. The Shared sequence MUST be executed again, in its entirety, after authenticity validation.</t>

<t>A Recipient MAY rely on network infrastructure to filter inapplicable manifests.</t>

</section>
</section>
<section anchor="interpreter-fundamental-properties"><name>Interpreter Fundamental Properties</name>

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a Trusted Invocation MUST either result in an error, or an invoked image.</t>
  <t>Executing the same manifest on multiple Recipients MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

<section anchor="resilience-to-disruption"><name>Resilience to Disruption</name>

<t>As required in Section 3 of RFC9019 and as an extension of design goal 1, devices must remain operable after a disruption, such as a power failure or network interruption, interrupts the update process.</t>

<t>The manifest processor must be resilient to these faults. In order to enable this resilience, systems implementing the manifest processor MUST make the following guarantees:</t>

<t>Either:
1. A fallback/recovery image is provided so that a disrupted system can apply the SUIT Manifest again.
2. Manifests are constructed so that repeated partial invocations of any manifest sequence always results in a correct system configuration.
3. A journal of manifest operations is stored in nonvolatile memory so that a repeated invocation does not alter nonvolatile memory up until the point of the previous failure. The journal enables the parser to recreate the processor state just prior to the disruption. This journal can be, for example, a SUIT Report. This report can be used to resume processing of the manifest from the point of failure.</t>

<t>AND</t>

<t><list style="numbers">
  <t>Where a command is not repeatable because of the way in which it alters system state (e.g. swapping images or in-place delta) it MUST be resumable or revertible. This applies to commands that modify at least one source component as well as the destination component.</t>
</list></t>

</section>
</section>
<section anchor="command-behavior"><name>Abstract Machine Description</name>

<t>The heart of the manifest is the list of commands, which are processed by a Manifest Processor--a form of interpreter. This Manifest Processor can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>Conditions MUST NOT have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag (<xref target="suit-parameter-soft-failure"/>) is set when a Condition reports failure.</t>

<t>Directives MAY have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter MUST Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>To simplify the logic describing the command semantics, the object "current" is used. It represents the component identified by the Component Index:</t>

<figure><artwork><![CDATA[
current := components\[component-index\]
]]></artwork></figure>

<t>As a result, Set Component Index is described as current := components[arg].</t>

<t>The following table describes the behavior of each command. "params" represents the parameters for the current component. Most commands operate on a component.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Check Content</c>
      <c>assert(binary-match(current, current.params[content]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for-each k,v in arg</c>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in params for-each k,v in arg</c>
      <c>Invoke</c>
      <c>invoke(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Write</c>
      <c>store(current, current.params[content])</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Slot</c>
      <c>assert(current.slot-index == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>try-each-done if exec(seq) is not error for-each seq in arg</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Invoke with Arguments</c>
      <c>invoke(current, arg)</c>
</texttable>

</section>
<section anchor="index-true"><name>Special Cases of Component Index</name>

<t>Component Index can take on one of three types:</t>

<t><list style="numbers">
  <t>Integer</t>
  <t>Array of integers</t>
  <t>True</t>
</list></t>

<t>Integers MUST always be supported by Set Component Index. Arrays of integers MUST be supported by Set Component Index if the Recipient supports 3 or more components. True MUST be supported by Set Component Index if the Recipient supports 2 or more components. Each of these operates on the list of components declared in the manifest.</t>

<t>Integer indices are the default case as described in the previous section. An array of integers represents a list of the components (Set Component Index) to which each subsequent command applies. The value True replaces the list of component indices with the full list of components, as defined in the manifest.</t>

<t>When a command is executed, it either 1. operates on the component identified by the component index if that index is an integer, or 2. it operates on each component identified by an array of indicies, or 3. it operates on every component if the index is the boolean True. This is described by the following pseudocode:</t>

<figure><artwork><![CDATA[
if component-index is true:
    current-list = components
else if component-index is array:
    current-list = [ components[idx] for idx in component-index ]
else:
    current-list = [ components[component-index] ]
for current in current-list:
    cmd(current)
]]></artwork></figure>

<t>Try Each and Run Sequence are affected in the same way as other commands: they are invoked once for each possible Component. This means that the sequences that are arguments to Try Each and Run Sequence are NOT invoked with Component Index = True, nor are they invoked with array indices. They are only invoked with integer indices. The interpreter loops over the whole sequence, setting the Component Index to each index in turn.</t>

</section>
<section anchor="serial-processing"><name>Serialized Processing Interpreter</name>

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor MAY handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

<t>When a serialized Manifest Processor encounters a component index of True, it does not ignore any commands. It applies them to the current component on each iteration.</t>

</section>
<section anchor="parallel-processing"><name>Parallel Processing Interpreter</name>

<t>Advanced Recipients MAY make use of the Strict Order parameter and enable parallel processing of some Command Sequences, or it may reorder some Command Sequences. To perform parallel processing, once the Strict Order parameter is set to False, the Recipient may issue each or every command concurrently until the Strict Order parameter is returned to True or the Command Sequence ends. Then, it waits for all issued commands to complete before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the Recipient consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>When the manifest processor encounters any of these scenarios the parallel processing MUST halt until all issued commands have completed:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, a manifest author may collect sequences of commands in a Run Sequence command. Then, each of these sequences MAY be run in parallel. There are several invocation options for Run Sequence:</t>

<t><list style="symbols">
  <t>Component Index is a positive integer, Strict Order is False: Strict Order is set to True before the sequence argument is run. The sequence argument MUST begin with set-component-index.</t>
  <t>Component Index is true or an array of positive integers, Strict Order is False: The sequence argument is run once for each component (or each component in the array); the manifest processor presets the component index and Strict Order = True before each iteration of the sequence argument.</t>
  <t>Component Index is a positive integer, Strict Order is True: No special considerations</t>
  <t>Component Index is True or an array of positive integers, Strict Order is True: The sequence argument is run once for each component (or each component in the array); the manifest processor presets the component index before each iteration of the sequence argument.</t>
</list></t>

<t>These rules isolate each sequence from each other sequence, ensuring that they operate as expected. When Strict Order = False, any further Set Component Index directives in the Run Sequence command sequence argument MUST cause an Abort. This allows the interpreter that issues Run Sequence commands to check that the first element is correct, then issue the sequence to a parallel execution context to handle the remainder of the sequence.</t>

</section>
</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC8152"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>The author MUST ensure that all parameters consumed by a command are set prior to invoking that command. Where Component Index = True, this means that the parameters consumed by each command MUST have been set for each Component.</t>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<t>NOTE: On systems that support only a single component, Set Component Index has no effect and can be omitted.</t>

<t>NOTE: <strong>A digest MUST always be set using Override Parameters.</strong></t>

<section anchor="template-compatibility-check"><name>Compatibility Check Template</name>

<t>The goal of the compatibility check template ensure that Recipients only install compatible images.</t>

<t>In this template all information is contained in the shared sequence and the following sequence of commands is used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="uuid-identifiers"/>)</t>
  <t>Check Class Identifier condition (see <xref target="uuid-identifiers"/>)</t>
</list></t>

</section>
<section anchor="template-secure-boot"><name>Trusted Invocation Template</name>

<t>The goal of the Trusted Invocation template is to ensure that only authorized code is invoked; such as in Secure Boot or when a Trusted Application is loaded into a TEE.</t>

<t>The following commands are placed into the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>The system validation sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>Then, the run sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Invoke directive (see <xref target="suit-directive-invoke"/>)</t>
</list></t>

</section>
<section anchor="firmware-download-template"><name>Component Download Template</name>

<t>The goal of the Component Download template is to acquire and store an image.</t>

<t>The following commands are placed into the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI (see <xref target="suit-parameter-uri"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-install"><name>Install Template</name>

<t>The goal of the Install template is to use an image already stored in an identified component to copy into a second component.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: the Component Download operations are moved from the Payload Install sequence to the Payload Fetch sequence.</t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="suit-parameter-source-component"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-integrated-payload"><name>Integrated Payload Template</name>

<t>The goal of the Integrated Payload template is to install a payload that is included in the manifest envelope. It is identical to the Component Download template (<xref target="firmware-download-template"/>).</t>

<t>An implementer MAY choose to place a payload in the envelope of a manifest. The payload envelope key MUST be a string. The payload MUST be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way MAY be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4.</t>

<t>A distributor MAY choose to pre-fetch a payload and add it to the manifest envelope, using the URI as the key.</t>

</section>
<section anchor="template-load-ext"><name>Load from Nonvolatile Storage Template</name>

<t>The goal of the Load from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="a-b-template"><name>A/B Image Template</name>

<t>The goal of the A/B Image Template is to acquire, validate, and invoke one of two images, based on a test.</t>

<t>The following commands are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following commands are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

<t>If Trusted Invocation (<xref target="template-secure-boot"/>) is used, only the run sequence is added to this template, since the shared sequence is populated by this template:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
    </list></t>
  <t>Invoke</t>
</list></t>

<t>NOTE: Any test can be used to select between images, Check Slot Condition is used in this template because it is a typical test for execute-in-place devices.</t>

</section>
</section>
<section anchor="metadata-structure"><name>Metadata Structure</name>

<t>The metadata for SUIT updates is composed of several primary constituent parts: the Envelope, Authentication Information, Manifest, and Severable Elements.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding-considerations"><name>Encoding Considerations</name>

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialized variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific values, as described in <xref target="iana"/>.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

<t>All CBOR maps in the Manifest and manifest envelope MUST be encoded with the canonical CBOR ordering as defined in <xref target="RFC8949"/>.</t>

</section>
<section anchor="envelope"><name>Envelope</name>

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="authentication-info"><name>Authenticated Manifests</name>

<t>The suit-authentication-wrapper contains a SUIT Digest Container (see <xref target="SUIT_Digest"/>) and one or more SUIT Authentication Blocks. The SUIT_Digest carries the result of computing the indicated hash algorithm over the suit-manifest element. A signing application MUST verify the suit-manifest element against the SUIT_Digest prior to signing. A SUIT Authentication Block is implemented as COSE_Mac_Tagged, COSE_Mac0_Tagged, COSE_Sign_Tagged or COSE_Sign1_Tagged structures with detached payloads, as described in RFC 8152 <xref target="RFC8152"/>.</t>

<t>For COSE_Sign and COSE_Sign1 a special signature structure (called Sig_structure) has to be created onto which the selected digital signature algorithm is applied to, see Section 4.4 of <xref target="RFC8152"/> for details. This specification requires Sig_structure to be populated as follows:
* The external_aad field MUST be set to a zero-length binary string (i.e. there is no external additional authenticated data).
* The payload field contains the SUIT_Digest wrapped in a bstr, as per the requirements in Section 4.4 of RFC 8152.
All other fields in the Sig_structure are populated as described in Section 4.4 of <xref target="RFC8152"/>.</t>

<t>Likewise, Section 6.3 of <xref target="RFC8152"/> describes the details for computing a MAC and the fields of the MAC_structure need to be populated. The rules for external_aad and the payload fields described in the paragraph above also apply to this structure.</t>

<t>The suit-authentication-wrapper MUST come before the suit-manifest element, regardless of canonical encoding of CBOR.</t>

<t>A SUIT_Envelope that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be a list containing only the SUIT_Digest.</t>

<t>The algorithms used in SUIT_Authentication are defined by the profiles declared in <xref target="I-D.moran-suit-mti"/>.</t>

</section>
<section anchor="manifest-structure"><name>Manifest</name>

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
</list></t>

<t>The Text section, or any Command Sequence of the Update Procedure (Image Fetch, Image Installation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable element. Severable elements are RECOMMENDED to implement. In particular, the human-readable text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version"><name>suit-manifest-version</name>

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED to implement.</t>

</section>
<section anchor="manifest-seqnr"><name>suit-manifest-sequence-number</name>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. Each Recipient MUST reject any manifest that has a sequence number lower than its current sequence number. For convenience, an implementer MAY use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED to implement.</t>

</section>
<section anchor="manifest-reference-uri"><name>suit-reference-uri</name>

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.</t>

</section>
<section anchor="manifest-digest-text"><name>suit-text</name>

<t>suit-text SHOULD be a severable element. suit-text is a map containing two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text</t>
  <t>SUIT_Component_Identifier =&gt; map</t>
</list></t>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text MUST also be present in suit-common (<xref target="manifest-common"/>).</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The YAML (<xref target="YAML"/>)-formatted document that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A free text representation of the component version</c>
</texttable>

<t>suit-text is OPTIONAL to implement.</t>

</section>
<section anchor="manifest-common"><name>suit-common</name>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-components, and suit-shared-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is REQUIRED to implement.</t>

<t>suit-shared-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-shared-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-shared-sequence is RECOMMENDED to implement. It is REQUIRED if the optimizations described in <xref target="minimal-sigs"/> will be used. Whenever a parameter or Try Each command is required by more than one Command Sequence, placing that parameter or command in suit-shared-sequence results in a smaller encoding.</t>

<section anchor="suit-component-identifier"><name>SUIT_Component_Identifier</name>

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>A Component Identifier can be trivial, such as the simple array [h'00']. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path "/usr/bin/env" would encode to ['usr','bin','env'].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands"><name>SUIT_Command_Sequence</name>

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL to implement.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation. suit-validate is REQUIRED to implement.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL to implement.</t>
  <t>Invoke or Boot: suit-invoke is a SUIT_Command_Sequence to execute in order to invoke an image. suit-invoke typically contains a single instruction: the "invoke" directive, but may also contain an image condition. suit-invoke is OPTIONAL to implement.</t>
</list></t>

<t>Goals 1,2 form the Update Procedure. Goals 4,5,6 form the Invocation Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true and any failure is treated as a failure of the update/load/invocation</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>Each condition is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>A <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided. This index is a numeric index into the Component Identifier table defined at the beginning of the manifest.</t>

<t>To facilitate optional conditions, a special directive, suit-directive-try-each (<xref target="suit-directive-try-each"/>), is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/invocation, but a parameter is provided to override this behavior. See suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>).</t>

</section>
<section anchor="reporting-policy"><name>Reporting Policy</name>

<t>To facilitate construction of Reports that describe the success or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>At the completion of each command, a Manifest Processor MAY forward information about the command to a Reporting Engine, which is responsible for reporting boot or update status to a third party. The Reporting Engine is entirely implementation-defined, the reporting policy simply facilitates the Reporting Engine's interface to the SUIT Manifest Processor.</t>

<t>The information elements provided to the Reporting Engine are:</t>

<t><list style="symbols">
  <t>The reporting policy</t>
  <t>The result of the command</t>
  <t>The values of parameters consumed by the command</t>
  <t>The system information consumed by the command</t>
</list></t>

<t>Together, these elements are called a Record. A group of Records is a Report.</t>

<t>If the component index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine MUST receive one Record for each Component, in the order expressed in the Components list or the component index array.</t>

<t>This specification does not define a particular format of Records or Reports. This specification only defines hints to the Reporting Engine for which Records it should aggregate into the Report. The Reporting Engine MAY choose to ignore these hints and apply its own policy instead.</t>

<t>When used in a Invocation Procedure, the report MAY form the basis of an attestation report. When used in an Update Process, the report MAY form the basis for one or more log entries.</t>

</section>
<section anchor="secparameters"><name>SUIT_Parameters</name>

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reuse of parameters between commands, thus reducing manifest size.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Content</c>
      <c>suit-parameter-content</c>
      <c><xref target="suit-parameter-content"/></c>
      <c>Component Slot</c>
      <c>suit-parameter-component-slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Invoke Args</c>
      <c>suit-parameter-invoke-args</c>
      <c><xref target="suit-parameter-invoke-args"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately.</t>

<section anchor="cbor-pen-uuid-namespace-identifier"><name>CBOR PEN UUID Namespace Identifier</name>

<t>The CBOR PEN UUID Namespace Identifier is constructed as follows:</t>

<t>It uses the OID Namespace as a starting point, then uses the CBOR absolute OID encoding for the IANA PEN OID (1.3.6.1.4.1):</t>

<figure><artwork><![CDATA[
D8 6F                # tag(111)
   45                # bytes(5)
# Absolute OID encoding of IANA Private Enterprise Number:
#    1.3. 6. 1. 4. 1
      2B 06 01 04 01 # X.690 Clause 8.19
]]></artwork></figure>

<t>Computing a type 5 UUID from these produces:</t>

<figure><artwork><![CDATA[
NAMESPACE_CBOR_PEN = UUID5(NAMESPACE_OID, h'D86F452B06010401')
NAMESPACE_CBOR_PEN = 47fbdabb-f2e4-55f0-bb39-3620c2f6df4e
]]></artwork></figure>

</section>
<section anchor="uuid-identifiers"><name>Constructing UUIDs</name>

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient MAY match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They MUST NOT be used as assertions of identity. They are evaluated by identifier conditions (<xref target="identifier-conditions"/>).</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module's firmware has a proprietary update mechanism and doesn't support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:</t>

<figure><artwork><![CDATA[
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)
]]></artwork></figure>

<t>If the Vendor ID is a UUID, the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(Vendor ID, Class-Specific-Information)
]]></artwork></figure>

<t>If the Vendor ID is a CBOR PEN (see <xref target="suit-parameter-vendor-identifier"/>), the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(
    UUID5(NAMESPACE_CBOR_PEN, CBOR_PEN),
    Class-Specific-Information)
]]></artwork></figure>

<t>Class-specific-information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier"><name>suit-parameter-vendor-identifier</name>

<t>suit-parameter-vendor-identifier may be presented in one of two ways:</t>

<t><list style="symbols">
  <t>A Private Enterprise Number</t>
  <t>A byte string containing a UUID (<xref target="RFC4122"/>)</t>
</list></t>

<t>Private Enterprise Numbers are encoded as a relative OID, according to the definition in <xref target="I-D.ietf-cbor-tags-oid"/>. All PENs are relative to the IANA PEN: 1.3.6.1.4.1.</t>

</section>
<section anchor="suit-parameter-class-identifier"><name>suit-parameter-class-identifier</name>

<t>A RFC 4122 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier"><name>suit-parameter-device-identifier</name>

<t>A RFC 4122 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest"><name>suit-parameter-image-digest</name>

<t>A fingerprint computed over the component itself, encoded in the SUIT_Digest <xref target="SUIT_Digest"/> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size"><name>suit-parameter-image-size</name>

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-component-slot"><name>suit-parameter-component-slot</name>

<t>This parameter sets the slot index of a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its index into the component's storage area. This slot MUST be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-content"><name>suit-parameter-content</name>

<t>A block of raw data for use with <xref target="suit-directive-write"/>. It contains a byte string of data to be written to a specified component ID in the same way as a fetch or a copy.</t>

<t>If data is encoded this way, it should be small. Large payloads written via this method will prevent the manifest from being held in memory during validation. Typical applications include small configuration parameters.</t>

<t>If suit-parameter-content is instantiated in a severable command sequence, then this becomes functionally very similar to an integrated payload, which may be a better choice.</t>

</section>
<section anchor="suit-parameter-uri"><name>suit-parameter-uri</name>

<t>A URI Reference (<xref target="RFC3986"/>) from which to fetch a resource, encoded as a text string. CBOR Tag 32 is not used because the meaning of the text string is unambiguous in this context.</t>

</section>
<section anchor="suit-parameter-source-component"><name>suit-parameter-source-component</name>

<t>This parameter sets the source component to be used with either suit-directive-copy (<xref target="suit-directive-copy"/>) or with suit-directive-swap (<xref target="suit-directive-swap"/>). The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-invoke-args"><name>suit-parameter-invoke-args</name>

<t>This parameter contains an encoded set of arguments for suit-directive-invoke (<xref target="suit-directive-invoke"/>). The arguments MUST be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-fetch-arguments"><name>suit-parameter-fetch-arguments</name>

<t>An implementation-defined set of arguments to suit-directive-fetch (<xref target="suit-directive-fetch"/>). Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order"><name>suit-parameter-strict-order</name>

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure"><name>suit-parameter-soft-failure</name>

<t>When executing a command sequence inside suit-directive-try-each (<xref target="suit-directive-try-each"/>) or suit-directive-run-sequence (<xref target="suit-directive-run-sequence"/>) and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates. It MUST NOT be set outside of suit-directive-try-each or suit-directive-run-sequence.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom"><name>suit-parameter-custom</name>

<t>This parameter is an extension point for any proprietary, application specific conditions and directives. It MUST NOT be used in the shared sequence. This effectively scopes each custom command to a particular Vendor Identifier/Class Identifier pair.</t>

</section>
</section>
<section anchor="suitcondition"><name>SUIT_Condition</name>

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Check Content</c>
      <c>suit-condition-check-content</c>
      <c><xref target="suit-condition-check-content"/></c>
      <c>Component Slot</c>
      <c>suit-condition-component-slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>Abort</c>
      <c>suit-condition-abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>Custom Condition</c>
      <c>suit-condition-custom</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition MUST report a result code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. A subsequent command or command sequence MAY continue executing if suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is set. If a condition requires additional information, this MUST be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it MUST report a failure. If a Recipient encounters an unknown condition, it MUST report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary definition by the author of a manifest processor. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions"><name>suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier</name>

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing Recipient MUST match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. Each component MAY match more than one identifier. Care is needed to ensure that manifests correctly identify their targets using these conditions. Using only a generic class ID for a device-specific firmware could result in matching devices that are not compatible.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers MUST be known to the Manifest Processor in order to evaluate compatibility.</t>

</section>
<section anchor="suit-condition-image-match"><name>suit-condition-image-match</name>

<t>Verify that the current component matches the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>) for the current component. The digest is verified against the digest specified in the Component's parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-check-content"><name>suit-condition-check-content</name>

<t>This directive compares the specified component identifier to the data indicated by suit-parameter-content. This functions similarly to suit-condition-image-match, however it does a direct, byte-by-byte comparison rather than a digest-based comparison. Because it is possible that an early stop to check-content could reveal information through timing, suit-condition-check-content MUST be constant time: no early exits. This MAY be implemented as follows:</t>

<t><spanx style="verb">
// content &amp; component must be same length
// returns 0 for match
bool check_content(content, component, length) {
    int residual = 0
    for (i = 0; i &lt; length; i++) {
        residual |= content[i] ^ component[i];
    }
    return residual;
}
</spanx></t>

</section>
<section anchor="suit-condition-component-slot"><name>suit-condition-component-slot</name>

<t>Verify that the slot index of the current component matches the slot index set in suit-parameter-component-slot (<xref target="suit-parameter-component-slot"/>). This condition allows a manifest to select between several images to match a target slot.</t>

</section>
<section anchor="suit-condition-abort"><name>suit-condition-abort</name>

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each (<xref target="suit-directive-try-each"/>).</t>

</section>
<section anchor="SUIT_Condition_Custom"><name>suit-condition-custom</name>

<t>suit-condition-custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="suitdirective"><name>SUIT_Directive</name>
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Write</c>
      <c>suit-directive-write</c>
      <c><xref target="suit-directive-write"/></c>
      <c>Invoke</c>
      <c>suit-directive-invoke</c>
      <c><xref target="suit-directive-invoke"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it MUST report a result code. If the Directive reports failure, then the current Command Sequence MUST be terminated.</t>

<section anchor="suit-directive-set-component-index"><name>suit-directive-set-component-index</name>

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be one of three types:</t>

<t><list style="numbers">
  <t>An unsigned integer (REQUIRED to implement in parser)</t>
  <t>A boolean (REQUIRED to implement in parser ONLY IF 2 or more components supported)</t>
  <t>An array of unsigned integers (REQUIRED to implement in parser ONLY IF 3 or more components supported)</t>
</list></t>

<t>If the following commands apply to ONE component, an unsigned integer index into the component list is used. If the following commands apply to ALL components, then the boolean value "True" is used instead of an index. If the following commands apply to more than one, but not all components, then an array of unsigned integer indices into the component list is used.
See <xref target="index-true"/> for more details.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-try-each"><name>suit-directive-try-each</name>

<t>This command runs several SUIT_Command_Sequence instances, one after another, in a strict order, until one succeeds or the list is exhausted. Use this command to implement a "try/catch-try/catch" sequence. Manifest processors MAY implement this command.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters"><name>suit-directive-override-parameters</name>

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch"><name>suit-directive-fetch</name>

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more payloads. suit-directive-fetch retrieves each component listed in component-index. If component-index is True, instead of an integer, then all current manifest components are fetched. If component-index is an array, then all listed components are fetched.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

</section>
<section anchor="suit-directive-copy"><name>suit-directive-copy</name>

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. As described in <xref target="index-true"/> component index may be a single integer, a list of integers, or True. suit-directive-copy retrieves each component specified by the current component-index, respectively.</t>

<t>suit-directive-copy reads its source from suit-parameter-source-component (<xref target="suit-parameter-source-component"/>).</t>

<t>If either the source component parameter or the source component itself is absent, this command fails.</t>

</section>
<section anchor="suit-directive-write"><name>suit-directive-write</name>

<t>This directive writes a small block of data, specified in <xref target="suit-parameter-content"/>, to a component.</t>

<t>Encoding Considerations: Careful consideration must be taken to determine whether it is more appropriate to use an integrated payload or to use <xref target="suit-parameter-content"/> for a particular application. While the encoding of suit-directive-write is smaller than an integrated payload, a large suit-parameter-content payload may prevent the manifest processor from holding the command sequence in memory while executing it.</t>

</section>
<section anchor="suit-directive-invoke"><name>suit-directive-invoke</name>

<t>suit-directive-invoke directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-invoke through suit-parameter-invoke-arguments (<xref target="suit-parameter-invoke-args"/>) and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-run-sequence"><name>suit-directive-run-sequence</name>

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr. This also allows a sequence of instructions to be iterated over, once for each current component index, when component-index = true or component-index = list. See <xref target="index-true"/>.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap"><name>suit-directive-swap</name>

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. As with suit-directive-copy, if the source component is missing, this command fails.</t>

<t>If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they MUST be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="integrity-checks"><name>Integrity Check Values</name>

<t>When the Text section or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope. The keys for the envelope elements have the same values as the keys for the manifest elements.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="severable-fields"><name>Severable Elements</name>

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or "Severed" without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD NOT be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists"><name>Access Control Lists</name>

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or Component Identifier prefixes to the listed identities or identity groups. Any identity can verify an image digest, but fetching into or fetching from a Component Identifier requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the Component Identifier or Component Identifier prefix that an identity can use, and also lists the commands and parameters that the identity can use in combination with that Component Identifier.</t>

</section>
<section anchor="SUIT_Digest"><name>SUIT Digest Container</name>

<t>The SUIT digest is a CBOR List containing two elements: an algorithm identifier and a bstr containing the bytes of the digest. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The values of the algorithm identifier are defined by <xref target="I-D.ietf-cose-hash-algs"/>. The following algorithms MUST be implemented by all Manifest Processors:</t>

<t><list style="symbols">
  <t>SHA-256 (-16)</t>
</list></t>

<t>The following algorithms MAY be implemented in a Manifest Processor:</t>

<t><list style="symbols">
  <t>SHAKE128 (-18)</t>
  <t>SHA-384 (-43)</t>
  <t>SHA-512 (-44)</t>
  <t>SHAKE256 (-45)</t>
</list></t>

</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate CBOR tag 107 (suggested) in the "CBOR Tags" registry for the SUIT Envelope.</t>
  <t>allocate CBOR tag 1070 (suggested) in the "CBOR Tags" registry for the SUIT Manifest.</t>
  <t>allocate media type application/suit-envelope in the "Media Types" registry, see below.</t>
  <t>setup several registries as described below.</t>
</list></t>

<t>IANA is requested to create a new category for Software Update for the Internet of Things (SUIT) 
and a page within this category for SUIT manifests.</t>

<t>IANA is also requested to create several registries defined in the subsections below.</t>

<t>For each registry, values 0-255 are Standards Action and 256 or greater are Expert Review. Negative values -255 to 0 are Standards Action, and -256 and lower are Private Use.</t>

<t>New entries to those registries need to provide a label, a name and a reference to a specification that describes the functionality. More guidance on the expert review can be found below.</t>

<section anchor="suit-envelope-elements"><name>SUIT Envelope Elements</name>

<t>IANA is requested to create a new registry for SUIT envelope elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>2</c>
      <c>Authentication Wrapper</c>
      <c><xref target="authentication-info"/></c>
      <c>3</c>
      <c>Manifest</c>
      <c><xref target="manifest-structure"/></c>
      <c>16</c>
      <c>Payload Fetch</c>
      <c><xref target="manifest-commands"/></c>
      <c>17</c>
      <c>Payload Installation</c>
      <c><xref target="manifest-commands"/></c>
      <c>23</c>
      <c>Text Description</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-manifest-elements"><name>SUIT Manifest Elements</name>

<t>IANA is requested to create a new registry for SUIT manifest elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Encoding Version</c>
      <c><xref target="manifest-version"/></c>
      <c>2</c>
      <c>Sequence Number</c>
      <c><xref target="manifest-seqnr"/></c>
      <c>3</c>
      <c>Common Data</c>
      <c><xref target="manifest-common"/></c>
      <c>4</c>
      <c>Reference URI</c>
      <c><xref target="manifest-reference-uri"/></c>
      <c>7</c>
      <c>Image Validation</c>
      <c><xref target="manifest-commands"/></c>
      <c>8</c>
      <c>Image Loading</c>
      <c><xref target="manifest-commands"/></c>
      <c>9</c>
      <c>Image Invocation</c>
      <c><xref target="manifest-commands"/></c>
      <c>16</c>
      <c>Payload Fetch</c>
      <c><xref target="manifest-commands"/></c>
      <c>17</c>
      <c>Payload Installation</c>
      <c><xref target="manifest-commands"/></c>
      <c>23</c>
      <c>Text Description</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-common-elements"><name>SUIT Common Elements</name>

<t>IANA is requested to create a new registry for SUIT common elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>2</c>
      <c>Component Identifiers</c>
      <c><xref target="manifest-common"/></c>
      <c>4</c>
      <c>Common Command Sequence</c>
      <c><xref target="manifest-common"/></c>
</texttable>

</section>
<section anchor="suit-commands"><name>SUIT Commands</name>

<t>IANA is requested to create a new registry for SUIT commands.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>2</c>
      <c>Class Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>3</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>6</c>
      <c>Check Content</c>
      <c><xref target="suit-condition-check-content"/></c>
      <c>12</c>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>13</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>14</c>
      <c>Abort</c>
      <c>&#160;</c>
      <c>15</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>16</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>17</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>18</c>
      <c>Write Content</c>
      <c><xref target="suit-directive-write"/></c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>21</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>22</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>23</c>
      <c>Invoke</c>
      <c><xref target="suit-directive-invoke"/></c>
      <c>24</c>
      <c>Device Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>25</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>31</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>32</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>33</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

</section>
<section anchor="suit-parameters"><name>SUIT Parameters</name>

<t>IANA is requested to create a new registry for SUIT parameters.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>2</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>3</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>12</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>13</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>14</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>18</c>
      <c>Content</c>
      <c><xref target="suit-parameter-content"/></c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>21</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>22</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>23</c>
      <c>Invoke Args</c>
      <c><xref target="suit-parameter-invoke-args"/></c>
      <c>24</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

</section>
<section anchor="suit-text-values"><name>SUIT Text Values</name>

<t>IANA is requested to create a new registry for SUIT text values.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Manifest Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Update Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Manifest JSON Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Manifest YAML Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-component-text-values"><name> SUIT Component Text Values</name>

<t>IANA is requested to create a new registry for SUIT component text values.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Model Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Vendor Domain</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Model Info</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>5</c>
      <c>Component Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>6</c>
      <c>Component Version</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>7</c>
      <c>Component Version Required</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="expert-review-instructions"><name>Expert Review Instructions</name>

<t>The IANA registries established in this document allow values to be added
based on expert review. This section gives some general guidelines for
what the experts should be looking for, but they are being designated
as experts for a reason, so they should be given substantial
latitude.</t>

<t>Expert reviewers should take into consideration the following points:</t>

<t><list style="symbols">
  <t>Point squatting should be discouraged.  Reviewers are encouraged
   to get sufficient information for registration requests to ensure
   that the usage is not going to duplicate one that is already
   registered, and that the point is likely to be used in
   deployments.  The zones tagged as private use 
   are intended for testing purposes and closed environments; 
   code points in other ranges should not be assigned for testing.</t>
  <t>Specifications are required for the standards track range of point
   assignment.  Specifications should exist for  all other ranges,
   but early assignment before a specification is
   available is considered to be permissible.
   When specifications are not provided, the description provided
   needs to have sufficient information to identify what the point is
   being used for.</t>
  <t>Experts should take into account the expected usage of fields when
   approving point assignment.  The fact that there is a range for
   standards track documents does not mean that a standards track
   document cannot have points assigned outside of that range.  The
   length of the encoded value should be weighed against how many
   code points of that length are left, the size of device it will be
   used on, and the number of code points left that encode to that
   size.</t>
</list></t>

</section>
<section anchor="media-type-registration"><name>Media Type Registration</name>

<t>This section registers the 'application/suit-envelope' media type in the
"Media Types" registry.  This media type are used to indicate that
the content is a SUIT envelope.</t>

<t>```
      Type name: application</t>

<figure><artwork><![CDATA[
  Subtype name: suit-envelope

  Required parameters: N/A

  Optional parameters: N/A

  Encoding considerations: binary

  Security considerations: See the Security Considerations section
  of [[This RFC]].

  Interoperability considerations: N/A

  Published specification: [[This RFC]]

  Applications that use this media type: Primarily used for 
    Firmware and software updates although the content may
    also contain configuration data and other information
    related to software and firmware.

  Fragment identifier considerations: N/A

  Additional information:

  *  Deprecated alias names for this type: N/A

  *  Magic number(s): N/A

  *  File extension(s): cbor

  *  Macintosh file type code(s): N/A

  Person & email address to contact for further information:
  iesg@ietf.org

  Intended usage: COMMON

  Restrictions on usage: N/A

  Author: Brendan Moran, <brendan.moran.ietf@gmail.com>

  Change Controller: IESG

  Provisional registration?  No ```
]]></artwork></figure>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC4122' target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author fullname='P. Leach' initials='P.' surname='Leach'><organization/></author>
<author fullname='M. Mealling' initials='M.' surname='Mealling'><organization/></author>
<author fullname='R. Salz' initials='R.' surname='Salz'><organization/></author>
<date month='July' year='2005'/>
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC3986' target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'><organization/></author>
<author fullname='R. Fielding' initials='R.' surname='Fielding'><organization/></author>
<author fullname='L. Masinter' initials='L.' surname='Masinter'><organization/></author>
<date month='January' year='2005'/>
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference anchor='RFC8949' target='https://www.rfc-editor.org/info/rfc8949'>
<front>
<title>Concise Binary Object Representation (CBOR)</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='P. Hoffman' initials='P.' surname='Hoffman'><organization/></author>
<date month='December' year='2020'/>
<abstract><t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t><t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t></abstract>
</front>
<seriesInfo name='STD' value='94'/>
<seriesInfo name='RFC' value='8949'/>
<seriesInfo name='DOI' value='10.17487/RFC8949'/>
</reference>



<reference anchor='RFC9019' target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>



<reference anchor='RFC9124' target='https://www.rfc-editor.org/info/rfc9124'>
<front>
<title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<date month='January' year='2022'/>
<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t><t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9124'/>
<seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.moran-suit-mti'>
   <front>
      <title>Mandatory-to-Implement Algorithms for Creators and Consumers of Software Update for the Internet of Things manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <date day='27' month='July' year='2022'/>
      <abstract>
	 <t>   This document specifies algorithm profiles for SUIT manifest parsers
   and authors to ensure better interoperability.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-moran-suit-mti-01'/>
   <format target='https://www.ietf.org/archive/id/draft-moran-suit-mti-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-cose-hash-algs'>
   <front>
      <title>CBOR Object Signing and Encryption (COSE): Hash Algorithms</title>
      <author fullname='Jim Schaad' initials='J.' surname='Schaad'>
         <organization>August Cellars</organization>
      </author>
      <date day='14' month='September' year='2020'/>
      <abstract>
	 <t>The CBOR Object Signing and Encryption (COSE) syntax (see RFC 9052) does not define any direct methods for using hash algorithms.  There are, however, circumstances where hash algorithms are used, such as indirect signatures, where the hash of one or more contents are signed, and identification of an X.509 certificate or other object by the use of a fingerprint.  This document defines hash algorithms that are identified by COSE algorithm identifiers.
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cose-hash-algs-09'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cose-hash-algs-09.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-teep-architecture'>
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname='Mingliang Pei' initials='M.' surname='Pei'>
         <organization>Broadcom</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Dave Thaler' initials='D.' surname='Thaler'>
         <organization>Microsoft</organization>
      </author>
      <author fullname='Dave Wheeler' initials='D. M.' surname='Wheeler'>
         <organization>Amazon</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-18'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-teep-architecture-18.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-cbor-tags-oid'>
   <front>
      <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
      <author fullname='Carsten Bormann' initials='C.' surname='Bormann'>
         <organization>Universität Bremen TZI</organization>
      </author>
      <date day='21' month='May' year='2021'/>
      <abstract>
	 <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.

 This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cbor-tags-oid-08'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Encrypted Payloads in SUIT Manifests</title>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Russ Housley' initials='R.' surname='Housley'>
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='David Brown' initials='D.' surname='Brown'>
         <organization>Linaro</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='6' month='October' year='2022'/>
      <abstract>
	 <t>   This document specifies techniques for encrypting software, firmware
   and personalization data by utilizing the IETF SUIT manifest.  Key
   establishment is provided by hybrid public-key encryption (HPKE) and
   AES Key Wrap (AES-KW).  HPKE uses public key cryptography while AES-
   KW uses a pre-shared key-encryption key.  Encryption of the plaintext
   is accomplished with conventional symmetric key cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-08'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-firmware-encryption-08.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-update-management'>
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to IoT
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-update-management-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-update-management-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-trust-domains'>
   <front>
      <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   (as defined in [I-D.ietf-suit-manifest]) for use in deployments with
   multiple trust domains.  A device has more than one trust domain when
   it uses different trust anchors for different purposes or components
   in the context of firmware update.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-trust-domains-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-trust-domains-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-report'>
   <front>
      <title>Secure Reporting of Update Status</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   The Software Update for the Internet of Things (SUIT) manifest
   provides a way for many different update and boot workflows to be
   described by a common format.  However, this does not provide a
   feedback mechanism for developers in the event that an update or boot
   fails.

   This specification describes a lightweight feedback mechanism that
   allows a developer in possession of a manifest to reconstruct the
   decisions made and actions performed by a manifest processor.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-report-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-report-02.txt' type='TXT'/>
</reference>



<reference anchor='RFC7228' target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='M. Ersue' initials='M.' surname='Ersue'><organization/></author>
<author fullname='A. Keranen' initials='A.' surname='Keranen'><organization/></author>
<date month='May' year='2014'/>
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>


<reference anchor="YAML" target="https://yaml.org/">
  <front>
    <title>YAML Ain't Markup Language</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<t>To be valid, the following CDDL MUST have the COSE CDDL appended to it. The COSE CDDL can be obtained by following the directions in <xref target="RFC8152"/>, Section 1.3.</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Envelope_Tagged = #6.107(SUIT_Envelope)
SUIT_Envelope = {
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * SUIT_Integrated_Payload,
  * $$SUIT_Envelope_Extensions,
}

SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]

SUIT_Digest = [
  suit-digest-algorithm-id : suit-cose-hash-algs,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

SUIT_Severable_Manifest_Members = (
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  * $$SUIT_severable-members-extensions,
)

SUIT_Integrated_Payload = (suit-integrated-payload-key => bstr)
suit-integrated-payload-key = tstr

SUIT_Manifest_Tagged = #6.1070(SUIT_Manifest)

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Unseverable_Members,
    SUIT_Severable_Members_Choice,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-invoke => bstr .cbor SUIT_Command_Sequence,
  * $$unseverable-manifest-member-extensions,
)

SUIT_Severable_Members_Choice = (
  ? suit-payload-fetch => SUIT_Digest / 
      bstr .cbor SUIT_Command_Sequence,
  ? suit-install => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
  ? suit-text => SUIT_Digest / bstr .cbor SUIT_Text_Map,
  * $$severable-manifest-members-choice-extensions
)

SUIT_Common = {
    ? suit-components             => SUIT_Components,
    ? suit-shared-sequence        => bstr .cbor SUIT_Shared_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Components           = [ + SUIT_Component_Identifier ]

;REQUIRED to implement:
suit-cose-hash-algs /= cose-alg-sha-256

;OPTIONAL to implement:
suit-cose-hash-algs /= cose-alg-shake128
suit-cose-hash-algs /= cose-alg-sha-384
suit-cose-hash-algs /= cose-alg-sha-512
suit-cose-hash-algs /= cose-alg-shake256

SUIT_Component_Identifier =  [* bstr]

SUIT_Shared_Sequence = [
    + ( SUIT_Condition // SUIT_Shared_Commands )
]

SUIT_Shared_Commands //= (suit-directive-set-component-index,  IndexArg)
SUIT_Shared_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Shared_Sequence)
SUIT_Shared_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument_Shared)
SUIT_Shared_Commands //= (suit-directive-override-parameters,
    {+ $$SUIT_Parameters})

IndexArg /= uint
IndexArg /= true
IndexArg /= [+uint]


SUIT_Directive_Try_Each_Argument_Shared = [
    2* bstr .cbor SUIT_Shared_Sequence,
    ?nil
]

SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-component-slot,    SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-check-content,     SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-abort,             SUIT_Rep_Policy)

SUIT_Directive //= (suit-directive-write,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-component-index,  IndexArg)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-override-parameters,
    {+ $$SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-copy,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-swap,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-invoke,            SUIT_Rep_Policy)

SUIT_Directive_Try_Each_Argument = [
    2* bstr .cbor SUIT_Command_Sequence,
    ?nil
]

SUIT_Rep_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

$$SUIT_Parameters //= (suit-parameter-vendor-identifier =>
    (RFC4122_UUID / cbor-pen))

cbor-pen = #6.112(bstr)

$$SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
$$SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
$$SUIT_Parameters //= (suit-parameter-image-size => uint)
$$SUIT_Parameters //= (suit-parameter-component-slot => uint)

$$SUIT_Parameters //= (suit-parameter-uri => tstr)
$$SUIT_Parameters //= (suit-parameter-source-component => uint)
$$SUIT_Parameters //= (suit-parameter-invoke-args => bstr)

$$SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)

$$SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

$$SUIT_Parameters //= (suit-parameter-content => bstr)
$$SUIT_Parameters //= (suit-parameter-strict-order => bool)
$$SUIT_Parameters //= (suit-parameter-soft-failure => bool)

RFC4122_UUID = bstr .size 16

SUIT_Text_Map = {
    SUIT_Text_Keys,
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    }
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

suit-authentication-wrapper = 2
suit-manifest = 3

;REQUIRED to implement:
cose-alg-sha-256 = -16

;OPTIONAL to implement:
cose-alg-shake128 = -18
cose-alg-sha-384 = -43
cose-alg-sha-512 = -44
cose-alg-shake256 = -45

;Unseverable, recipient-necessary
suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-validate = 7
suit-load = 8
suit-invoke = 9
;Severable, recipient-necessary
suit-payload-fetch = 16
suit-install = 17
;Severable, recipient-unnecessary
suit-text = 23

suit-components = 2
suit-shared-sequence = 4

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-component-slot    = 5
suit-condition-check-content     = 6

suit-condition-abort                    = 14
suit-condition-device-identifier        = 24

suit-directive-set-component-index      = 12
suit-directive-try-each                 = 15
suit-directive-write                    = 18
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-invoke                   = 23

suit-directive-swap                     = 31
suit-directive-run-sequence             = 32

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-component-slot    = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14
suit-parameter-content           = 18

suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-invoke-args       = 23

suit-parameter-device-identifier = 24

suit-parameter-custom = nint

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
]]></sourcecode></figure>

</section>
<section anchor="examples"><name>B. Examples</name>

<t>The following examples demonstrate a small subset of the functionality of the manifest. Even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<t>Note that reporting policies are declared for each non-flow-control command in these examples. The reporting policies used in the examples are described in the following tables.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Label</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Rec-Pass</c>
      <c>suit-send-record-on-failure</c>
      <c>Rec-Fail</c>
      <c>suit-send-sysinfo-success</c>
      <c>Sys-Pass</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Sys-Fail</c>
</texttable>

<texttable>
      <ttcol align='left'>Command</ttcol>
      <ttcol align='left'>Sys-Fail</ttcol>
      <ttcol align='left'>Sys-Pass</ttcol>
      <ttcol align='left'>Rec-Fail</ttcol>
      <ttcol align='left'>Rec-Pass</ttcol>
      <c>suit-condition-vendor-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-class-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-image-match</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-component-slot</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>1</c>
      <c>suit-directive-fetch</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-copy</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-invoke</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
</texttable>

<section anchor="example-0-secure-boot"><name>Example 0: Secure Boot</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
</list></t>

<t>It also serves as the minimum example.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'6658ea560262696dd1f13b782239a064da7c6c5cbaf52fded428a6fc83c7e5af'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'e3505f7ab70bd3a0e04916f37b0d7251aa
6f52ca12c7edaa886a4129a298ca6a1ecc2a57955c6bf4ccb9f01d684d5d1c4774dffb
e508a034431feafa60848a2c'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:0,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-run / 23,2
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  161</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af035871a50101020003585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f0943821702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  237</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af584ad28443a10126a0f65840e3505f
7ab70bd3a0e04916f37b0d7251aa6f52ca12c7edaa886a4129a298ca6a1e
cc2a57955c6bf4ccb9f01d684d5d1c4774dffbe508a034431feafa60848a
2c035871a50101020003585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f0943821702
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload"><name>Example 1: Simultaneous Download and Installation of Payload</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Simultaneous download and installation of payload. No secure boot is present in this example to demonstrate a download-only manifest.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'ef14b7091e8adae8aa3bb6fca1d64fb37e19dcf8b35714cfdddc5968c80ff50e'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'e95d9bb4926c7c82138fc81b968fdc42d9
bc8cfadf9e35dde8cba7bd44b91af0427a13dff4e6bcf5f2d5577f8f3bcaed55983e43
e984d14d6bdb2c762d9378b5'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:1,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  196</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820ef14b7091e8adae8aa3bb6fca1d64fb37e
19dcf8b35714cfdddc5968c80ff50e035894a50101020103585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f1158258614a115781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  272</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820ef14b7091e8adae8aa3bb6fca1d64fb37e
19dcf8b35714cfdddc5968c80ff50e584ad28443a10126a0f65840e95d9b
b4926c7c82138fc81b968fdc42d9bc8cfadf9e35dde8cba7bd44b91af042
7a13dff4e6bcf5f2d5577f8f3bcaed55983e43e984d14d6bdb2c762d9378
b5035894a50101020103585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f1158258614a11578
1b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502
030f
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-secure-boot-severed-fields"><name>Example 2: Simultaneous Download, Installation, Secure Boot, Severed Fields</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>This example also demonstrates severable elements (<xref target="ovr-severable"/>), and text (<xref target="manifest-digest-text"/>).</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'86bbcc8823f3a4441956f02b001302f503487461fb77fab086efe31530881f97'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'3a2d25bdff0d7aaee88549c14f0f1ee881
e3c92d2e51231f3e7bce213adbddefecf8a0ea98859b6d1a69a01c961858e99aacd520
dd59bb0bd8016a66de777b34'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:2,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-run / 23,2
            ] >>,
            / install / 17:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'cfa90c5c58595e7f5119a72f803fd0370b3e6abbec6315cd38f63135281bc498'
            ],
            / text / 23:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'2bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918'
            ],
        } >>,
    })
]]></artwork></figure>

<t>Total size of the Envelope without COSE authentication object or Severable Elements:  235</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f582086bbcc8823f3a4441956f02b001302f503
487461fb77fab086efe31530881f970358bba70101020203585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f094382170211822f5820cfa90c5c58595e7f5119a72f803f
d0370b3e6abbec6315cd38f63135281bc49817822f58202bfc4d0cc6680b
e7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918
]]></artwork></figure>
<t>Total size of the Envelope with COSE authentication object but without Severable Elements:  311</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f582086bbcc8823f3a4441956f02b001302f503
487461fb77fab086efe31530881f97584ad28443a10126a0f658403a2d25
bdff0d7aaee88549c14f0f1ee881e3c92d2e51231f3e7bce213adbddefec
f8a0ea98859b6d1a69a01c961858e99aacd520dd59bb0bd8016a66de777b
340358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f094382170211822f
5820cfa90c5c58595e7f5119a72f803fd0370b3e6abbec6315cd38f63135
281bc49817822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf918
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object and Severable Elements:  894</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba4025873825824822f582086bbcc8823f3a4441956f02b001302f503
487461fb77fab086efe31530881f97584ad28443a10126a0f658403a2d25
bdff0d7aaee88549c14f0f1ee881e3c92d2e51231f3e7bce213adbddefec
f8a0ea98859b6d1a69a01c961858e99aacd520dd59bb0bd8016a66de777b
340358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f094382170211822f
5820cfa90c5c58595e7f5119a72f803fd0370b3e6abbec6315cd38f63135
281bc49817822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf91811583c8614a1157832687474703a2f2f657861
6d706c652e636f6d2f766572792f6c6f6e672f706174682f746f2f66696c
652f66696c652e62696e1502030f17590204a20179019d2323204578616d
706c6520323a2053696d756c74616e656f757320446f776e6c6f61642c20
496e7374616c6c6174696f6e2c2053656375726520426f6f742c20536576
65726564204669656c64730a0a2020202054686973206578616d706c6520
636f766572732074686520666f6c6c6f77696e672074656d706c61746573
3a0a202020200a202020202a20436f6d7061746962696c69747920436865
636b20287b7b74656d706c6174652d636f6d7061746962696c6974792d63
6865636b7d7d290a202020202a2053656375726520426f6f7420287b7b74
656d706c6174652d7365637572652d626f6f747d7d290a202020202a2046
69726d7761726520446f776e6c6f616420287b7b6669726d776172652d64
6f776e6c6f61642d74656d706c6174657d7d290a202020200a2020202054
686973206578616d706c6520616c736f2064656d6f6e7374726174657320
736576657261626c6520656c656d656e747320287b7b6f76722d73657665
7261626c657d7d292c20616e64207465787420287b7b6d616e6966657374
2d6469676573742d746578747d7d292e814100a2036761726d2e636f6d05
78525468697320636f6d706f6e656e7420697320612064656d6f6e737472
6174696f6e2e205468652064696765737420697320612073616d706c6520
7061747465726e2c206e6f742061207265616c206f6e652e
]]></artwork></figure>

</section>
<section anchor="example-3-ab-images"><name>Example 3: A/B images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>A/B Image Template (<xref target="a-b-template"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'b3e6a52776bf3ed218feba031c609c98260e1a52fc1f019683edb6d1c5c4a379'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'3a4c404585cf111bb5556a0ce269aa56e7
56d998f09a1179640933c44230f6a7d2ea2331f9d904d84f39496721cf2f76ee85f06b
b71ab2179c833292f0d227bb'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:3,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    } ,
                    / directive-try-each / 15,[
                        << [
                            / directive-override-parameters / 20,{
                                / slot / 5:0,
                            } ,
                            / condition-component-slot / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<< [
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                                ] >>,
                                / image-size / 14:34768,
                            }
                        ] >> ,
                        << [
                            / directive-override-parameters / 20,{
                                / slot / 5:1,
                            } ,
                            / condition-component-slot / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<< [
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                                ] >>,
                                / image-size / 14:76834,
                            }
                        ] >>
                    ] ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-try-each / 15,[
                    << [
                        / directive-override-parameters / 20,{
                            / slot / 5:0,
                        } ,
                        / condition-component-slot / 5,5 ,
                        / directive-override-parameters / 20,{
                            / uri / 21:'http://example.com/file1.bin',
                        }
                    ] >> ,
                    << [
                        / directive-override-parameters / 20,{
                            / slot / 5:1,
                        } ,
                        / condition-component-slot / 5,5 ,
                        / directive-override-parameters / 20,{
                            / uri / 21:'http://example.com/file2.bin',
                        }
                    ] >>
                ] ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  320</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820b3e6a52776bf3ed218feba031c609c9826
0e1a52fc1f019683edb6d1c5c4a3790359010fa5010102030358a4a20281
81410004589b8814a20150fa6b4a53d5ad5fdfbe9de663e4d41ffe025014
92af1425695e48bf429b2d51f2ab450f8258348614a10500050514a20358
24822f582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d058368614a10501050514a2035824822f582001
23456789abcdeffedcba987654321000112233445566778899aabbccddee
ff0e1a00012c22010f020f074382030f11585b860f8258288614a1050005
0514a115781c687474703a2f2f6578616d706c652e636f6d2f66696c6531
2e62696e58288614a10501050514a115781c687474703a2f2f6578616d70
6c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  396</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820b3e6a52776bf3ed218feba031c609c9826
0e1a52fc1f019683edb6d1c5c4a379584ad28443a10126a0f658403a4c40
4585cf111bb5556a0ce269aa56e756d998f09a1179640933c44230f6a7d2
ea2331f9d904d84f39496721cf2f76ee85f06bb71ab2179c833292f0d227
bb0359010fa5010102030358a4a2028181410004589b8814a20150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450f8258348614a10500050514a2035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0583686
14a10501050514a2035824822f58200123456789abcdeffedcba98765432
1000112233445566778899aabbccddeeff0e1a00012c22010f020f074382
030f11585b860f8258288614a10500050514a115781c687474703a2f2f65
78616d706c652e636f6d2f66696c65312e62696e58288614a10501050514
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

</section>
<section anchor="example-4-load-from-external-storage"><name>Example 4: Load from External Storage</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>Install (<xref target="template-install"/>)</t>
  <t>Load (<xref target="template-load-ext"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'838eb848698c9d9dd29b5930102ea1f29743857d975f52ed4d19589b821e82cf'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'8ea1abc44569f3acea130558a1b1f6a23b
f509cc1f3ac7afe5a3d9bfbdf752b0fbdddb12a64fa0f83faa2d1580d35458cf17dbc4
0c21d6601436e4a39d261c02'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:4,
            / common / 3:<< {
                / components / 2:[
                    [h'00'] ,
                    [h'02'] ,
                    [h'01']
                ],
                / shared-sequence / 4:<< [
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15
            ] >>,
            / load / 8:<< [
                / directive-set-component-index / 12,2 ,
                / directive-override-parameters / 20,{
                    / image-digest / 3:<< [
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ] >>,
                    / image-size / 14:76834,
                    / source-component / 22:0 / [h'00'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-set-component-index / 12,2 ,
                / directive-run / 23,2
            ] >>,
            / payload-fetch / 16:<< [
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / image-digest / 3:<< [
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ] >>,
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / source-component / 22:1 / [h'02'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  327</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820838eb848698c9d9dd29b5930102ea1f297
43857d975f52ed4d19589b821e82cf03590116a801010204035867a20283
814100814102814101045858880c0014a40150fa6b4a53d5ad5fdfbe9de6
63e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820
00112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100e1987d0010f020f0745840c00030f085838880c0214a3035824822f
58200123456789abcdeffedcba987654321000112233445566778899aabb
ccddeeff0e1a00012c2216001602030f0945840c02170210584e880c0114
a2035824822f582000112233445566778899aabbccddeeff0123456789ab
cdeffedcba987654321015781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e1502030f114b880c0014a116011602030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  403</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820838eb848698c9d9dd29b5930102ea1f297
43857d975f52ed4d19589b821e82cf584ad28443a10126a0f658408ea1ab
c44569f3acea130558a1b1f6a23bf509cc1f3ac7afe5a3d9bfbdf752b0fb
dddb12a64fa0f83faa2d1580d35458cf17dbc40c21d6601436e4a39d261c
0203590116a801010204035867a20283814100814102814101045858880c
0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e
48bf429b2d51f2ab45035824822f582000112233445566778899aabbccdd
eeff0123456789abcdeffedcba98765432100e1987d0010f020f0745840c
00030f085838880c0214a3035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c2216001602
030f0945840c02170210584e880c0114a2035824822f5820001122334455
66778899aabbccddeeff0123456789abcdeffedcba987654321015781b68
7474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502030f
114b880c0014a116011602030f
]]></artwork></figure>

</section>
<section anchor="example-5-two-images"><name>Example 5: Two Images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Furthermore, it shows using these templates with two images.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'264dc89eb4a39ae7a8ed05e4d6232153bce4fb9a111a31310b90627d1edfc3bb'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'82a7c80c7544a744e7da857164b5a11b87
ab33e1ef29fa9e5c0e37870829bb3790a94f2536900185c3a361e619355a154f9220ba
00e8248cd18cd2ffcb0efc99'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:5,
            / common / 3:<< {
                / components / 2:[
                    [h'00'] ,
                    [h'01']
                ],
                / shared-sequence / 4:<< [
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15 ,
                    / directive-set-component-index / 12,1 ,
                    / directive-override-parameters / 20,{
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                        ] >>,
                        / image-size / 14:76834,
                    }
                ] >>,
            } >>,
            / validate / 7:<< [
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-set-component-index / 12,0 ,
                / directive-run / 23,2
            ] >>,
            / install / 17:<< [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file1.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file2.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  306</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820264dc89eb4a39ae7a8ed05e4d6232153bc
e4fb9a111a31310b90627d1edfc3bb03590101a601010205035895a20282
8141008141010458898c0c0014a40150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820001122
33445566778899aabbccddeeff0123456789abcdeffedcba98765432100e
1987d0010f020f0c0114a2035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c220749880c
00030f0c01030f0945840c00170211584f900c0014a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65312e62696e1502030f0c0114
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  382</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820264dc89eb4a39ae7a8ed05e4d6232153bc
e4fb9a111a31310b90627d1edfc3bb584ad28443a10126a0f6584082a7c8
0c7544a744e7da857164b5a11b87ab33e1ef29fa9e5c0e37870829bb3790
a94f2536900185c3a361e619355a154f9220ba00e8248cd18cd2ffcb0efc
9903590101a601010205035895a202828141008141010458898c0c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab45035824822f582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d0010f020f0c0114a2035824
822f58200123456789abcdeffedcba987654321000112233445566778899
aabbccddeeff0e1a00012c220749880c00030f0c01030f0945840c001702
11584f900c0014a115781c687474703a2f2f6578616d706c652e636f6d2f
66696c65312e62696e1502030f0c0114a115781c687474703a2f2f657861
6d706c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

</section>
</section>
<section anchor="design-rationale"><name>C. Design Rational</name>

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted invocation operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted invocation of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency's commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope"><name>C.1 Design Rationale: Envelope</name>

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of Severable Elements (<xref target="severable-fields"/>)</t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers"><name>C.2 Byte String Wrappers</name>

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the shared sequence. The shared sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>
<section anchor="implementation-matrix"><name>D. Implementation Conformance Matrix</name>

<t>This section summarizes the functionality a minimal manifest processor
implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Class Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Device Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>OPTIONAL</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>REQUIRED</c>
      <c>Check Content</c>
      <c><xref target="suit-condition-check-content"/></c>
      <c>OPTIONAL</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>Abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>OPTIONAL</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>REQUIRED if more than one component</c>
      <c>Write Content</c>
      <c><xref target="suit-directive-write"/></c>
      <c>OPTIONAL</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>OPTIONAL</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>REQUIRED</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>REQUIRED for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>OPTIONAL</c>
      <c>Invoke</c>
      <c><xref target="suit-directive-invoke"/></c>
      <c>REQUIRED for Bootloader</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>OPTIONAL</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>REQUIRED</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>REQUIRED</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>REQUIRED</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>REQUIRED</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>Content</c>
      <c><xref target="suit-parameter-content"/></c>
      <c>OPTIONAL</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>REQUIRED for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>OPTIONAL</c>
      <c>Invoke Args</c>
      <c><xref target="suit-parameter-invoke-args"/></c>
      <c>OPTIONAL</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>OPTIONAL</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>OPTIONAL</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>OPTIONAL</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c>OPTIONAL</c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
H4sIACHxPmMAA+y96XYc2XUm+j+fIi7ZywVUZSYJkKwBcskCJ4sWpyZYUqtL
delAZiARYmZEKiISqCyS+tUP4bXuHz+Gf1ur3+vu+ewTQwKkqtt2t2stW0RG
xBn32WeP355MJqMmb5bZUXKcPCiLWV5nyf28SKtt8uL0j9msSV5l6yqrs6JJ
m7wskr0H91+82p+cpnU2T06yKk+X+U/86HFZrdImOSurpDnPkpPyrLlMqyz5
bj1Pm6ymB0+KJquKrEnKs+T1eV4s6mTv5Lsnr/eTZ2mRn2V1M0pPT6vs4ijB
jrQfeCO8MC9nRbqCIc+r9KyZ5FlzNqk3eTNZyRuTw9ujGXS5KKvtUVI389Eo
X1dHSVNt6ubw9u1vbh+OYGDpEUxgtqnyZju6LKu3i6rcrI+os9HbbAs/zY9s
wJOH2NloVDdpMX+TLssCBrDN6tE6PxolSXU2y+Z1s13Kr0nSlDP3z7yYwxLq
D3VZNVV2Vtvf21X0Z1PlM3t5Vq5W8K09zYtlXoRush+byTKHSUMjp+USXpuU
n38BT2CZVul6DWvsxvFmmV1k+NLd0SjdNOdlBaOfwDP8Ly/gwf1p8qys0kJ+
45W+X2XFPC2iJ2W1gPXmvQfyqVbJ03yVN9lcnmerNF8eJaf86XSFn05xs361
wCdTmNeo1fevp8nrenZenmVFvogG8Ou0KICEOk+vOYhz+nza2Ocwhh+nsK09
I7ifV2/Py+VPcf9Z8bb9JO77cZVuCmy9Sk6AgOLu4evpqXz9qzpvpmf29nSe
tQfxm2ny34HKTrMqXoTflFnRfhIP4kkBBzLu+y18NP1JPvpVji9A7+0u//JP
0+TVX/6lKPBINuk86vcv/7S9AALueyHu/jkcmXwGp2qVz8pivpk1ZRWPpqSW
plVpDXlqKIiD5BcZHqlXjx/cPTg8lH9+fXBP/3nnm6+/1F+/ufuN/POb2wf2
z4PDu0cjOPTFmW/wyeQhU6FwiybXX4mFzMo6m5yn9fkkXS7q6FGTZetJWs3O
gbJmzabK4g9Py2rSpIt6Uubz6An1c5ZXK+SDk6yYVds1rVTnpQ3xSORg6SLD
4959hbjXZF7CchV193GVrYGryAp8dXj4Nf7z98fPnh7RDgiXv4G/JMd58VkD
DLV6u1knT9NisYFeb9B7xhTgPxzSUXJ4G9gpNZFWiwzY0nnTrOujW7e26Wo5
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
SV6ERbsynOrDhyBNPQtmqN3tdCKuqJXHMutgc/Uiz5gUwDkooQu5alGtQI4b
GFJwaJAy6CI37F0SyxOJ5BJnweA4o7AvGuMJy+sc8CUOJOqGVwAu72ZTXzF7
/piaY19trVErrTgCvPbu2+WUvLvpbqrR6KH5DZGzt43f6DzMOX7EB17Yj7wO
QB+ge9dsF5yVGEJYsNImPgkOPwYuxrEOIL2BcFKQAPNQmiUDvxqCa7YiRRcm
bwmJzKZr2KWlwS4gz4FaV5F/eg4EjktCLCkjy8IWNcoV6gwpBjbSiNcW/kRK
vIgvY/a2wSAuz8sVed3IZ2JeTRi5X7mw5oXQHRPLhGNfMmcatdUIESfRipDT
kD8TMqxjV+HmVNaHIrpATFaXEU6wKEltRuetSHUo5oLQiy0Sf36mRIyMTDiE
LI2RPXkj5Avdce1flyAw+6Zco5koIlcOMcrW8Km5/8h7yBb8EGYkclVKrzvz
aOwxvHmTdseYjfCKB4FC+H7QqC9HOrhSPnJI7/YebwOHLWVsHfJuB73vWgQa
uV8p6kjuk3F0XIhPLjmqWdkMh0FdZhXrJSJ54z5Io3hZsAupiuP3nWUR5ZxT
+P4yn6PVzs3ZN2S0OfN8gsOyMIBHuQ5PltoEDR/VCfLj4Rh+xK0aal89XcBU
+RydZs1lBjcsGg1axgJsnZUwkpPoJuqZO2g58UM3OGPCq3wGa1liACMcnioe
lGdD6uk9o4PgHRrY3hKDYq0jdbvCnFt3oW8d3VjQ59I1TWzFGOgsMh7BdKo0
sqPSUQ2EZlGFYq4LJmX+O0urZU4edYoMk+tC9AqLEoCWzkrSl9HrQywhR2ZG
hwuZ1XoNXaAbodVJHSzqxC56nGJwBk94D9T2G0Ur5RJGGq7M6ATGsXvG1kiv
QOqSQA6KuRBiJ57Ht4ycNtNTlfzH5M2VYDdrUgxOFpwBs3sLfEjIlHkJO9d+
V1Zvz9A+QZ41YiASRKpyLVDAPCVxbslhFWsXX+CUoxW55mCMbYsQ+TywD4kS
8PFBauIk/y4uHO8e0hHHTZoLnoRbNipkc7YCyXXkaHkcoua0ZbIyZWwpuwAq
ZlPqQMjNzzF99gN1LVT/i5bhmO611qR7Jiq2Lf2EWJtavnZ9Z/YHWJ37Go/C
Pm+3HOPOaTJ9ho4TxYzRJZom6w1fxXVWqceHBA3Vl9oRQOqJQrFCrJB8gVpY
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
OUQCAA==

-->

</rfc>

