<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-14" category="std">

  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>

    <date year="2021" month="October" day="22"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about code/data obtained by a recipient (chiefly
the firmware for an IoT device), where to find the that code/data, the
devices to which it applies, and cryptographic information protecting
the manifest. Software updates and Trusted Invocation both tend to use
sequences of common operations, so the manifest encodes those sequences
of operations, rather than declaring the metadata.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata describing one or more code or data payloads and how to:</t>

<t><list style="symbols">
  <t>Obtain any dependencies</t>
  <t>Obtain the payload(s)</t>
  <t>Install them</t>
  <t>Verify them</t>
  <t>Load them into memory</t>
  <t>Invoke them</t>
</list></t>

<t>This specification defines the SUIT manifest format and it is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="I-D.ietf-suit-information-model"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>a Firmware Author to reason about releasing a firmware.</t>
  <t>a Network Operator to reason about compatibility of a firmware.</t>
  <t>a Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>a Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>a device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>a device to reason about the applicability of a firmware.</t>
  <t>a device to reason about the installation of a firmware.</t>
  <t>a device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="RFC9019"/> and the threats, requirements, and user stories in <xref target="I-D.ietf-suit-information-model"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or Trusted Invocation are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In this document, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the language is tailored to software updates and Trusted Invocation.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and Trusted Invocation use cases, there is nothing in the SUIT Information Model (<xref target="I-D.ietf-suit-information-model"/>) that restricts its use to only those use cases. Other use cases include the management of trusted applications (TAs) in a Trusted Execution Environment (TEE), as discussed in <xref target="I-D.ietf-teep-architecture"/>.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements (see: TBD).</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient’s storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document" title="How to use this Document">

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rational is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> gives a summarize of the mandatory-to-implement features of this specification.</t>

<t>This specification covers the core features of SUIT. Additional specifications will cover advanced use cases and update management needs:</t>

<t><list style="symbols">
  <t>Firmware Encryption is covered in <xref target="I-D.ietf-suit-firmware-encryption"/></t>
  <t>Update Management is covered in (TBD) <!--{{I-D.moran-suit-update-management}}--></t>
  <t>Multiple Trust Domains (dependencies, key delegation, multiple processors, TEEs, etc.) are covered in (TBD) <!--{{I-D.moran-suit-trust-domains}}--></t>
  <t>Update Compression is covered in (TBD) <!--{{I-D.moran-suit-payload-compression}}--></t>
</list></t>

</section>
<section anchor="background" title="Background">

<t>Distributing software updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="RFC9019"/>. The security aspects are described in <xref target="I-D.ietf-suit-information-model"/>.</t>

<section anchor="iot-firmware-update-constraints" title="IoT Firmware Update Constraints">

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivered to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model" title="SUIT Workflow Model">

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Invocation Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Run image(s).</t>
</list></t>

<t>If verification and running is implemented in a bootloader, then the bootloader MUST also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader may add its own authentication, e.g. a Message Authentication Code (MAC), to the manifest in order to prevent further verifications.</t>

</section>
</section>
<section anchor="metadata-structure-overview" title="Metadata Structure Overview">

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest..</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, such as affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable elements.</t>
    </list></t>
  <t>Severable elements (see <xref target="ovr-severable"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| COSWID                  |          | Structure Version            |
| Integrated Payloads     |          | Sequence Number              |
+-------------------------+          | Reference to Full Manifest   |
                               +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Components IDs          |      +-> +-----------------------+
| Common Command Sequence ---------> | Command Sequence      |
+-------------------------+          +-----------------------+
                                     | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope" title="Envelope">

<t>The SUIT Envelope is a container that encloses the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that would add substantial complexity with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-auth" title="Authentication Block">

<t>The Authentication Block contains a bstr-wrapped SUIT Digest Container, see <xref target="SUIT_Digest"/>, and one or more <xref target="RFC8152"/> CBOR Object Signing and Encryption (COSE) authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>Each of these objects is used in detached payload mode. The payload is the bstr-wrapped SUIT_Digest.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest" title="Manifest">

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical" title="Critical Metadata">

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which manifest is newest and whether the structure version is supported. It also MAY provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, and <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common" title="Common">

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of two parts: a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence MUST NOT have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/> for more detail.</t>

</section>
<section anchor="ovr-commands" title="Command Sequences">

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Payload Fetch, and Payload Installation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Invocation Command Sequences are: System Validation, Image Loading, and Image Invocation. An Invocation Procedure is the complete set of each Invocation Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command (dependencies are not defined in this specification).</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity" title="Integrity Check Values">

<t>To enable <xref target="ovr-severable"/>, there needs to be a mechanism to verify integrity of any metadata outside the manifest. Integrity Check Values are used to verify the integrity of metadata that is not contained in the manifest. This MAY include Severable Command Sequences, or Text data. Integrated Payloads are integrity-checked using Command Sequences, so they do not have Integrity Check Values present in the Manifest.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text" title="Human-Readable Text">

<t>Text is typically a Severable Element (<xref target="ovr-severable"/>). It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable" title=" Severable Elements">

<t>Severable Elements are elements of the Envelope (<xref target="ovr-envelope"/>) that have Integrity Check Values (<xref target="ovr-integrity"/>) in the Manifest (<xref target="ovr-manifest"/>).</t>

<t>Because of this organisation, these elements can be discarded or “Severed” from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system severs the Text sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated" title="Integrated Payloads">

<t>In some cases, it is beneficial to include a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest’s envelope.</t>
</list></t>

<t>See <xref target="template-integrated-payload"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior" title="Manifest Processor Behavior">

<t>This section describes the behavior of the manifest processor and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the manifest processor: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup" title="Manifest Processor Setup">

<t>Prior to executing any command sequence, the manifest processor or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the manifest processor or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the manifest processor can choose between several manifests, it MUST select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest, according to application-specific policy.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported Component Identifier encountered.</t>
  <t>Payload not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Payload verification failed.</t>
  <t>Missing required component from a Component Set.</t>
  <t>Required parameter not supplied.</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Selecting an older manifest in the event of failure of the latest valid manifest is a robustness mechanism that is necessary for supporting the requirements in <xref target="RFC9019"/>, section 3.5. It may not be appropriate for all applications. In particular Trusted Execution Environments MAY require a failure to invoke a new installation, rather than a rollback approach. See <xref target="I-D.ietf-suit-information-model"/>, Section 4.2.1 for more discussion on the security considerations that apply to rollback.</t>

<t>Following these initial tests, the manifest processor clears all parameter storage. This ensures that the manifest processor begins without any leaked data.</t>

</section>
<section anchor="required-checks" title=" Required Checks">

<t>The RECOMMENDED process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a Recipient receives an incompatible manifest.</t>

<t>When validating authenticity of manifests, the manifest processor MAY use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity.</t>

<t>Once a valid, authentic manifest has been selected, the manifest processor MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component is supported.</t>

<t>For each listed component, the manifest processor MUST provide storage for the supported parameters. If the manifest processor does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The manifest processor SHOULD check that the common sequence contains at least Check Vendor Identifier command and at least one Check Class Identifier command.</t>

<t>Because the common sequence contains Check Vendor Identifier and Check Class Identifier command(s), no custom commands are permitted in the common sequence. This ensures that any custom commands are only executed by devices that understand them.</t>

<t>If the manifest contains more than one component, each command sequence MUST begin with a Set Component Index.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by one update, that is the manifest:</t>

<t><list style="numbers">
  <t>has sufficient permissions imparted by its signatures</t>
  <t>specifies a digest and a payload for every Component in the Component Set.</t>
</list></t>

<section anchor="minimal-sigs" title="Minimizing Signature Verifications">

<t>Signature verification can be energy and time expensive on a constrained device. MAC verification is typically unaffected by these concerns. A Recipient MAY choose to parse and execute only the SUIT_Common section of the manifest prior to signature verification, if all of the below apply:</t>

<t><list style="symbols">
  <t>The Authentication Block contains a COSE_Sign_Tagged or COSE_Sign1_Tagged</t>
  <t>The Recipient receives manifests over an unauthenticated channel, exposing it to more inauthentic or incompatible manifests, and</t>
  <t>The Recipient has a power budget that makes signature verification undesirable</t>
</list></t>

<t>When executing Common prior to authenticity validation, the Manifest Processor MUST first evaluate the integrity of the manifest using the SUIT_Digest present in the authentication block.</t>

<t>The guidelines in Creating Manifests (<xref target="creating-manifests"/>) require that the common section contains the applicability checks, so this section is sufficient for applicability verification. The parser MUST restrict acceptable commands to conditions and the following directives: Override Parameters, Set Parameters, Try Each, and Run Sequence ONLY. The manifest parser MUST NOT execute any command with side-effects outside the parser (for example, Run, Copy, Swap, or Fetch commands) prior to authentication and any such command MUST Abort. The Common Sequence MUST be executed again, in its entirety, after authenticity validation.</t>

<t>A Recipient MAY rely on network infrastructure to filter inapplicable manifests.</t>

</section>
</section>
<section anchor="interpreter-fundamental-properties" title="Interpreter Fundamental Properties">

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a Trusted Invocation MUST either result in an error, or an invoked image.</t>
  <t>Executing the same manifest on multiple Recipients MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

</section>
<section anchor="command-behavior" title="Abstract Machine Description">

<t>The heart of the manifest is the list of commands, which are processed by a Manifest Processor–a form of interpreter. This Manifest Processor can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>Conditions MUST NOT have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag (<xref target="suit-parameter-soft-failure"/>) is set when a Condition reports failure.</t>

<t>Directives MAY have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter MUST Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>To simplify the logic describing the command semantics, the object “current” is used. It represents the component identified by the Component Index:</t>

<figure><artwork><![CDATA[
current := components\[component-index\]
]]></artwork></figure>

<t>As a result, Set Component Index is described as current := components[arg].</t>

<t>The following table describes the behavior of each command. “params” represents the parameters for the current component. Most commands operate on a component.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for-each k,v in arg</c>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in params for-each k,v in arg</c>
      <c>Run</c>
      <c>run(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Slot</c>
      <c>assert(current.slot-index == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>try-each-done if exec(seq) is not error for-each seq in arg</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Run with Arguments</c>
      <c>run(current, arg)</c>
</texttable>

</section>
<section anchor="index-true" title="Special Cases of Component Index">

<t>Component Index can take on one of three types:</t>

<t><list style="numbers">
  <t>Integer</t>
  <t>Array of integers</t>
  <t>True</t>
</list></t>

<t>Integers MUST always be supported by Set Component Index. Arrays of integers MUST be supported by Set Component Index if the Recipient supports 3 or more components. True MUST be supported by Set Component Index if the Recipient supports 2 or more components. Each of these operates on the list of components declared in the manifest.</t>

<t>Integer indices are the default case as described in the previous section. An array of integers represents a list of the components (Set Component Index) to which each subsequent command applies. The value True replaces the list of component indices with the full list of components, as defined in the manifest.</t>

<t>When a command is executed, it either 1. operates on the component identified by the component index if that index is an integer, or 2. it operates on each component identified by an array of indicies, or 3. it operates on every component if the index is the boolean True. This is described by the following pseudocode:</t>

<figure><artwork><![CDATA[
if component-index is true:
    current-list = components
else if component-index is array:
    current-list = [ components[idx] for idx in component-index ]
else:
    current-list = [ components[component-index] ]
for current in current-list:
    cmd(current)
]]></artwork></figure>

<t>Try Each and Run Sequence are affected in the same way as other commands: they are invoked once for each possible Component. This means that the sequences that are arguments to Try Each and Run Sequence are NOT invoked with Component Index = True, nor are they invoked with array indices. They are only invoked with integer indices. The interpreter loops over the whole sequence, setting the Component Index to each index in turn.</t>

</section>
<section anchor="serial-processing" title="Serialized Processing Interpreter">

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor MAY handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

<t>When a serialized Manifest Processor encounters a component index of True, it does not ignore any commands. It applies them to the current component on each iteration.</t>

</section>
<section anchor="parallel-processing" title="Parallel Processing Interpreter">

<t>Advanced Recipients MAY make use of the Strict Order parameter and enable parallel processing of some Command Sequences, or it may reorder some Command Sequences. To perform parallel processing, once the Strict Order parameter is set to False, the Recipient may issue each or every command concurrently until the Strict Order parameter is returned to True or the Command Sequence ends. Then, it waits for all issued commands to complete before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the Recipient consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>When the manifest processor encounters any of these scenarios the parallel processing MUST halt until all issued commands have completed:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, a manifest author may collect sequences of commands in a Run Sequence command. Then, each of these sequences MAY be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence MUST begin with a Set Component Index directive with the following exception: when the index is either True or an array of indices, the Set Component Index is implied. Any further Set Component Index directives MUST cause an Abort. This allows the interpreter that issues Run Sequence commands to check that the first element is correct, then issue the sequence to a parallel execution context to handle the remainder of the sequence.</t>

</section>
</section>
<section anchor="creating-manifests" title="Creating Manifests">

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC8152"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>The author MUST ensure that all parameters consumed by a command are set prior to invoking that command. Where Component Index = True, this means that the parameters consumed by each command MUST have been set for each Component.</t>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<t>NOTE: On systems that support only a single component, Set Component Index has no effect and can be omitted.</t>

<t>NOTE: <spanx style="strong">A digest MUST always be set using Override Parameters.</spanx></t>

<section anchor="template-compatibility-check" title="Compatibility Check Template">

<t>The goal of the compatibility check template ensure that Recipients only install compatible images.</t>

<t>In this template all information is contained in the common sequence and the following sequence of commands is used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="uuid-identifiers"/>)</t>
  <t>Check Class Identifier condition (see <xref target="uuid-identifiers"/>)</t>
</list></t>

</section>
<section anchor="template-secure-boot" title="Trusted Invocation Template">

<t>The goal of the Trusted Invocation template is to ensure that only authorized code is invoked; such as in Secure Boot or when a Trusted Application is loaded into a TEE.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>The system validation sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>Then, the run sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Run directive (see <xref target="suit-directive-run-sequence"/>)</t>
</list></t>

</section>
<section anchor="firmware-download-template" title="Component Download Template">

<t>The goal of the Component Download template is to acquire and store an image.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI (see <xref target="suit-parameter-uri"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-install" title="Install Template">

<t>The goal of the Install template is to use an image already stored in an identified component to copy into a second component.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: the Component Download operations are moved from the Payload Install sequence to the Payload Fetch sequence.</t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="suit-parameter-source-component"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-integrated-payload" title="Integrated Payload Template">

<t>The goal of the Integrated Payload template is to install a payload that is included in the manifest envelope. It is identical to the Component Download template (<xref target="firmware-download-template"/>).</t>

<t>An implementer MAY choose to place a payload in the envelope of a manifest. The payload envelope key MUST be a string. The payload MUST be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way MAY be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4.</t>

<t>A distributor MAY choose to pre-fetch a payload and add it to the manifest envelope, using the URI as the key.</t>

</section>
<section anchor="template-load-ext" title="Load from Nonvolatile Storage Template">

<t>The goal of the Load from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="a-b-template" title="A/B Image Template">

<t>The goal of the A/B Image Template is to acquire, validate, and invoke one of two images, based on a test.</t>

<t>The following commands are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following commands are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

<t>If Trusted Invocation (<xref target="template-secure-boot"/>) is used, only the run sequence is added to this template, since the common sequence is populated by this template:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
    </list></t>
  <t>Run</t>
</list></t>

<t>NOTE: Any test can be used to select between images, Check Slot Condition is used in this template because it is a typical test for execute-in-place devices.</t>

</section>
</section>
<section anchor="metadata-structure" title="Metadata Structure">

<t>The metadata for SUIT updates is composed of several primary constituent parts: the Envelope, Authentication Information, Manifest, and Severable Elements.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding-considerations" title="Encoding Considerations">

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialized variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific values, as described in <xref target="iana"/>.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

</section>
<section anchor="envelope" title="Envelope">

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="authentication-info" title="Authenticated Manifests">

<t>The suit-authentication-wrapper contains a list containing a SUIT Digest Container (see <xref target="SUIT_Digest"/>) and one or more cryptographic authentication wrappers for the Manifest. These blocks are implemented as COSE_Mac_Tagged or COSE_Sign_Tagged structures with null payloads, indicating that the payload to be used is the SUIT Digest Container. This enables modular processing of the manifest. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/>. The suit-authentication-wrapper MUST come before any element in the SUIT_Envelope, regardless of canonical encoding of CBOR. All validators MUST reject any SUIT_Envelope that begins with any element other than a suit-authentication-wrapper (NOTE: key delegation MAY relax this requirement to include a delegation structure as well).</t>

<t>A SUIT_Envelope that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be a list containing only the SUIT_Digest.</t>

<t>A signing application MUST verify the suit-manifest element against the SUIT_Digest prior to signing.</t>

</section>
<section anchor="manifest-structure" title="Manifest">

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
</list></t>

<t>The Text section, or any Command Sequence of the Update Procedure (Image Fetch, Image Installation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable element. Severable elements are RECOMMENDED to implement. In particular, the human-readable text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version" title="suit-manifest-version">

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED to implement.</t>

</section>
<section anchor="manifest-seqnr" title="suit-manifest-sequence-number">

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. Each Recipient MUST reject any manifest that has a sequence number lower than its current sequence number. For convenience, an implementer MAY use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED to implement.</t>

</section>
<section anchor="manifest-reference-uri" title="suit-reference-uri">

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.</t>

</section>
<section anchor="manifest-digest-text" title="suit-text">

<t>suit-text SHOULD be a severable element. suit-text is a map containing two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text</t>
  <t>SUIT_Component_Identifier =&gt; map</t>
</list></t>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text MUST also be present in suit-common (<xref target="manifest-common"/>).</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The YAML (<xref target="YAML"/>)-formatted document that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A free text representation of the component version</c>
</texttable>

<t>suit-text is OPTIONAL to implement.</t>

</section>
<section anchor="manifest-common" title="suit-common">

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is REQUIRED to implement.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED to implement. It is REQUIRED if the optimizations described in <xref target="minimal-sigs"/> will be used. Whenever a parameter or Try Each command is required by more than one Command Sequence, placing that parameter or command in suit-common-sequence results in a smaller encoding.</t>

<section anchor="suit-component-identifier" title="SUIT_Component_Identifier">

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>A Component Identifier can be trivial, such as the simple array [h’00’]. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path “/usr/bin/env” would encode to [‘usr’,’bin’,’env’].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands" title="SUIT_Command_Sequence">

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL to implement.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation. suit-validate is REQUIRED to implement.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL to implement.</t>
  <t>Run or Boot: suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: the “run” directive. suit-run is OPTIONAL to implement.</t>
</list></t>

<t>Goals 1,2 form the Update Procedure. Goals 4,5,6 form the Invocation Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true and any failure is treated as a failure of the update/load/invocation</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>Each condition is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>A <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided. This index is a numeric index into the Component Identifier table defined at the beginning of the manifest.</t>

<t>To facilitate optional conditions, a special directive, suit-directive-try-each (<xref target="suit-directive-try-each"/>), is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/invocation, but a parameter is provided to override this behavior. See suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>).</t>

</section>
<section anchor="reporting-policy" title="Reporting Policy">

<t>To facilitate construction of Reports that describe the success or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>At the completion of each command, a Manifest Processor MAY forward information about the command to a Reporting Engine, which is responsible for reporting boot or update status to a third party. The Reporting Engine is entirely implementation-defined, the reporting policy simply facilitates the Reporting Engine’s interface to the SUIT Manifest Processor.</t>

<t>The information elements provided to the Reporting Engine are:</t>

<t><list style="symbols">
  <t>The reporting policy</t>
  <t>The result of the command</t>
  <t>The values of parameters consumed by the command</t>
  <t>The system information consumed by the command</t>
</list></t>

<t>Together, these elements are called a Record. A group of Records is a Report.</t>

<t>If the component index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine MUST receive one Record for each Component, in the order expressed in the Components list or the component index array.</t>

<t>This specification does not define a particular format of Records or Reports. This specification only defines hints to the Reporting Engine for which Records it should aggregate into the Report. The Reporting Engine MAY choose to ignore these hints and apply its own policy instead.</t>

<t>When used in a Invocation Procedure, the report MAY form the basis of an attestation report. When used in an Update Process, the report MAY form the basis for one or more log entries.</t>

</section>
<section anchor="secparameters" title="SUIT_Parameters">

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reuse of parameters between commands, thus reducing manifest size.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Component Slot</c>
      <c>suit-parameter-component-slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Run Args</c>
      <c>suit-parameter-run-args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately.</t>

<section anchor="cbor-pen-uuid-namespace-identifier" title="CBOR PEN UUID Namespace Identifier">

<t>The CBOR PEN UUID Namespace Identifier is constructed as follows:</t>

<t>It uses the OID Namespace as a starting point, then uses the CBOR OID encoding for the IANA PEN OID (1.3.6.1.4.1):</t>

<figure><artwork><![CDATA[
D8 6F                # tag(111)
   45                # bytes(5)
# Absolute OID encoding of IANA Private Enterprise Number:
#    1.3. 6. 1. 4. 1
      2B 06 01 04 01 # X.690 Clause 8.19
]]></artwork></figure>

<t>Computing a type 5 UUID from these produces:</t>

<figure><artwork><![CDATA[
NAMESPACE_CBOR_PEN = UUID5(NAMESPACE_OID, h'D86F452B06010401')
NAMESPACE_CBOR_PEN = 47fbdabb-f2e4-55f0-bb39-3620c2f6df4e
]]></artwork></figure>

</section>
<section anchor="uuid-identifiers" title="Constructing UUIDs">

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient MAY match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They MUST NOT be used as assertions of identity. They are evaluated by identifier conditions (<xref target="identifier-conditions"/>).</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module’s firmware has a proprietary update mechanism and doesn’t support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:</t>

<figure><artwork><![CDATA[
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)
]]></artwork></figure>

<t>If the Vendor ID is a UUID, the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(Vendor ID, Class-Specific-Information)
]]></artwork></figure>

<t>If the Vendor ID is a CBOR PEN (see <xref target="suit-parameter-vendor-identifier"/>), the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(
    UUID5(NAMESPACE_CBOR_PEN, CBOR_PEN),
    Class-Specific-Information)
]]></artwork></figure>

<t>Class-specific-information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier" title="suit-parameter-vendor-identifier">

<t>suit-parameter-vendor-identifier may be presented in one of two ways:</t>

<t><list style="symbols">
  <t>A Private Enterprise Number</t>
  <t>A byte string containing a UUID (<xref target="RFC4122"/>)</t>
</list></t>

<t>Private Enterprise Numbers are encoded as a relative OID, according to the definition in <xref target="I-D.ietf-cbor-tags-oid"/>. All PENs are relative to the IANA PEN: 1.3.6.1.4.1.</t>

</section>
<section anchor="suit-parameter-class-identifier" title="suit-parameter-class-identifier">

<t>A RFC 4122 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier" title="suit-parameter-device-identifier">

<t>A RFC 4122 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest" title="suit-parameter-image-digest">

<t>A fingerprint computed over the component itself, encoded in the SUIT_Digest <xref target="SUIT_Digest"/> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size" title="suit-parameter-image-size">

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-component-slot" title="suit-parameter-component-slot">

<t>This parameter sets the slot index of a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its index into the component’s storage area. This slot MUST be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-uri" title="suit-parameter-uri">

<t>A URI Reference (<xref target="RFC3986"/>) from which to fetch a resource, encoded as a text string. CBOR Tag 32 is not used because the meaning of the text string is unambiguous in this context.</t>

</section>
<section anchor="suit-parameter-source-component" title="suit-parameter-source-component">

<t>This parameter sets the source component to be used with either suit-directive-copy (<xref target="suit-directive-copy"/>) or with suit-directive-swap (<xref target="suit-directive-swap"/>). The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-run-args" title="suit-parameter-run-args">

<t>This parameter contains an encoded set of arguments for suit-directive-run (<xref target="suit-directive-run"/>). The arguments MUST be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-fetch-arguments" title="suit-parameter-fetch-arguments">

<t>An implementation-defined set of arguments to suit-directive-fetch (<xref target="suit-directive-fetch"/>). Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order" title="suit-parameter-strict-order">

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure" title="suit-parameter-soft-failure">

<t>When executing a command sequence inside suit-directive-try-each (<xref target="suit-directive-try-each"/>) or suit-directive-run-sequence (<xref target="suit-directive-run-sequence"/>) and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates. It MUST NOT be set outside of suit-directive-try-each or suit-directive-run-sequence.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom" title="suit-parameter-custom">

<t>This parameter is an extension point for any proprietary, application specific conditions and directives. It MUST NOT be used in the common sequence. This effectively scopes each custom command to a particular Vendor Identifier/Class Identifier pair.</t>

</section>
</section>
<section anchor="suitcondition" title="SUIT_Condition">

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Component Slot</c>
      <c>suit-condition-component-slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>Abort</c>
      <c>suit-condition-abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>Custom Condition</c>
      <c>suit-condition-custom</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition MUST report a result code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. A subsequent command or command sequence MAY continue executing if suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is set. If a condition requires additional information, this MUST be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it MUST report a failure. If a Recipient encounters an unknown condition, it MUST report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary definition by the author of a manifest processor. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions" title="suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier">

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing Recipient MUST match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. Each component MAY match more than one identifier. Care is needed to ensure that manifests correctly identify their targets using these conditions. Using only a generic class ID for a device-specific firmware could result in matching devices that are not compatible.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers MUST be known to the Manifest Processor in order to evaluate compatibility.</t>

</section>
<section anchor="suit-condition-image-match" title="suit-condition-image-match">

<t>Verify that the current component matches the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>) for the current component. The digest is verified against the digest specified in the Component’s parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-component-slot" title="suit-condition-component-slot">

<t>Verify that the slot index of the current component matches the slot index set in suit-parameter-component-slot (<xref target="suit-parameter-component-slot"/>). This condition allows a manifest to select between several images to match a target slot.</t>

</section>
<section anchor="suit-condition-abort" title="suit-condition-abort">

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each (<xref target="suit-directive-try-each"/>).</t>

</section>
<section anchor="SUIT_Condition_Custom" title="suit-condition-custom">

<t>suit-condition-custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="suitdirective" title="SUIT_Directive">
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Run</c>
      <c>suit-directive-run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it MUST report a result code. If the Directive reports failure, then the current Command Sequence MUST be terminated.</t>

<section anchor="suit-directive-set-component-index" title="suit-directive-set-component-index">

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be one of three types:</t>

<t><list style="numbers">
  <t>An unsigned integer (REQUIRED to implement in parser)</t>
  <t>A boolean (REQUIRED to implement in parser ONLY IF 2 or more components supported)</t>
  <t>An array of unsigned integers (REQUIRED to implement in parser ONLY IF 3 or more components supported)</t>
</list></t>

<t>If the following commands apply to ONE component, an unsigned integer index into the component list is used. If the following commands apply to ALL components, then the boolean value “True” is used instead of an index. If the following commands apply to more than one, but not all components, then an array of unsigned integer indices into the component list is used.
See <xref target="index-true"/> for more details.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-try-each" title="suit-directive-try-each">

<t>This command runs several SUIT_Command_Sequence instances, one after another, in a strict order. Use this command to implement a “try/catch-try/catch” sequence. Manifest processors MAY implement this command.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters" title="suit-directive-override-parameters">

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch" title="suit-directive-fetch">

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more payloads. suit-directive-fetch retrieves each component listed in component-index. If component-index is True, instead of an integer, then all current manifest components are fetched If component-index is an array, then all listed components are fetched.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

</section>
<section anchor="suit-directive-copy" title="suit-directive-copy">

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. As described in <xref target="index-true"/> component index may be a single integer, a list of integers, or True. suit-directive-copy retrieves each component specified by the current component-index, respectively.</t>

<t>suit-directive-copy reads its source from suit-parameter-source-component (<xref target="suit-parameter-source-component"/>).</t>

<t>If either the source component parameter or the source component itself is absent, this command fails.</t>

</section>
<section anchor="suit-directive-run" title="suit-directive-run">

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-run through suit-parameter-run-arguments (<xref target="suit-parameter-run-args"/>) and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-run-sequence" title="suit-directive-run-sequence">

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap" title="suit-directive-swap">

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. As with suit-directive-copy, if the source component is missing, this command fails.</t>

<t>If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they MUST be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="integrity-checks" title="Integrity Check Values">

<t>When the Text section or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope. The keys for the envelope elements have the same values as the keys for the manifest elements.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="severable-fields" title="Severable Elements">

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or “Severed” without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD NOT be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists" title="Access Control Lists">

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or Component Identifier prefixes to the listed identities or identity groups. Any identity can verify an image digest, but fetching into or fetching from a Component Identifier requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the Component Identifier or Component Identifier prefix that an identity can use, and also lists the commands and parameters that the identity can use in combination with that Component Identifier.</t>

</section>
<section anchor="SUIT_Digest" title="SUIT Digest Container">

<t>The SUIT digest is a CBOR List containing two elements: an algorithm identifier and a bstr containing the bytes of the digest. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The values of the algorithm identifier are defined by <xref target="I-D.ietf-cose-hash-algs"/>. The following algorithms MUST be implemented by all Manifest Processors:</t>

<t><list style="symbols">
  <t>SHA-256 (-16)</t>
</list></t>

<t>The following algorithms MAY be implemented in a Manifest Processor:</t>

<t><list style="symbols">
  <t>SHAKE128 (-18)</t>
  <t>SHA-384 (-43)</t>
  <t>SHA-512 (-44)</t>
  <t>SHAKE256 (-45)</t>
</list></t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate CBOR tag 107 in the CBOR Tags registry for the SUIT Envelope.</t>
  <t>allocate CBOR tag 1070 in the CBOR Tags registry for the SUIT Manifest.</t>
  <t>allocate media type application/suit-envelope in the Media Types registry.</t>
  <t>setup several registries as described below.</t>
</list></t>

<t>IANA is requested to setup a registry for SUIT manifests.
Several registries defined in the subsections below need to be created.</t>

<t>For each registry, values 0-23 are Standards Action, 24-255 are IETF Review, 256-65535 are Expert Review, and 65536 or greater are First Come First Served.</t>

<t>Negative values -23 to 0 are Experimental Use, -24 and lower are Private Use.</t>

<section anchor="suit-commands" title="SUIT Commands">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>2</c>
      <c>Class Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>3</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>12</c>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>13</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>14</c>
      <c>Abort</c>
      <c>&#160;</c>
      <c>15</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>16</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>17</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>18</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>21</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>22</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>23</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>24</c>
      <c>Device Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>25</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>31</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>32</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>33</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

</section>
<section anchor="suit-parameters" title="SUIT Parameters">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>2</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>3</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>12</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>13</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>14</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>18</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>21</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>22</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>23</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>24</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

</section>
<section anchor="suit-text-values" title="SUIT Text Values">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Manifest Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Update Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Manifest JSON Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Manifest YAML Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-component-text-values" title=" SUIT Component Text Values">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Model Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Vendor Domain</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Model Info</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>5</c>
      <c>Component Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>6</c>
      <c>Component Version</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>7</c>
      <c>Component Version Required</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="I-D.ietf-suit-information-model"/> documents.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC4122' target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author fullname='P. Leach' initials='P.' surname='Leach'><organization/></author>
<author fullname='M. Mealling' initials='M.' surname='Mealling'><organization/></author>
<author fullname='R. Salz' initials='R.' surname='Salz'><organization/></author>
<date month='July' year='2005'/>
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC3986' target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'><organization/></author>
<author fullname='R. Fielding' initials='R.' surname='Fielding'><organization/></author>
<author fullname='L. Masinter' initials='L.' surname='Masinter'><organization/></author>
<date month='January' year='2005'/>
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference anchor='RFC9019' target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>


<reference anchor='I-D.ietf-suit-information-model'>
   <front>
      <title>A Manifest Information Model for Firmware Updates in IoT Devices</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz'>
	 <organization>Fraunhofer SIT</organization>
      </author>
      <date day='8' month='July' year='2021'/>
      <abstract>
	 <t>   Vulnerabilities with Internet of Things (IoT) devices have raised the
   need for a reliable and secure firmware update mechanism that is also
   suitable for constrained devices.  Ensuring that devices function and
   remain secure over their service life requires such an update
   mechanism to fix vulnerabilities, to update configuration settings,
   as well as adding new functionality.

   One component of such a firmware update is a concise and machine-
   processable meta-data document, or manifest, that describes the
   firmware image(s) and offers appropriate protection.  This document
   describes the information that must be present in the manifest.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-13'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-information-model-13.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-cose-hash-algs'>
   <front>
      <title>CBOR Object Signing and Encryption (COSE): Hash Algorithms</title>
      <author fullname='Jim Schaad'>
	 <organization>August Cellars</organization>
      </author>
      <date day='14' month='September' year='2020'/>
      <abstract>
	 <t>   The CBOR Object Signing and Encryption (COSE) syntax
   [I-D.ietf-cose-rfc8152bis-struct] does not define any direct methods
   for using hash algorithms.  There are, however, circumstances where
   hash algorithms are used, such as indirect signatures where the hash
   of one or more contents are signed, and X.509 certificate or other
   object identification by the use of a fingerprint.  This document
   defines a set of hash algorithms that are identified by COSE
   Algorithm Identifiers.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cose-hash-algs-09'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cose-hash-algs-09.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-teep-architecture'>
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname='Mingliang Pei'>
	 <organization>Broadcom</organization>
      </author>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Dave Thaler'>
	 <organization>Microsoft</organization>
      </author>
      <author fullname='David Wheeler'>
	 <organization>Amazon</organization>
      </author>
      <date day='12' month='July' year='2021'/>
      <abstract>
	 <t>   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-15'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-teep-architecture-15.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-cbor-tags-oid'>
   <front>
      <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
      <author fullname='Carsten Bormann'>
	 <organization>Universität Bremen TZI</organization>
      </author>
      <date day='21' month='May' year='2021'/>
      <abstract>
	 <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.

 This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cbor-tags-oid-08'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Firmware Encryption with SUIT Manifests</title>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='12' month='July' year='2021'/>
      <abstract>
	 <t>   This document specifies a firmware update mechanism where the
   firmware image is encrypted.  This mechanism uses the IETF SUIT
   manifest with key establishment provided by the hybrid public-key
   encryption (HPKE) scheme or AES Key Wrap (AES-KW) with a pre-shared
   key-encryption key.  In either case, AES-GCM or AES-CCM is used for
   firmware encryption.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-firmware-encryption-01.txt' type='TXT'/>
</reference>



<reference anchor='RFC7228' target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='M. Ersue' initials='M.' surname='Ersue'><organization/></author>
<author fullname='A. Keranen' initials='A.' surname='Keranen'><organization/></author>
<date month='May' year='2014'/>
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>


<reference anchor="YAML" target="https://yaml.org/">
  <front>
    <title>YAML Ain't Markup Language</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section anchor="full-cddl" title="A. Full CDDL">
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<t>To be valid, the following CDDL MUST have the COSE CDDL appended to it. The COSE CDDL can be obtained by following the directions in <xref target="RFC8152"/>, section 1.4.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Envelope_Tagged = #6.107(SUIT_Envelope)
SUIT_Envelope = {
  ? suit-delegation => bstr .cbor SUIT_Delegation,
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * SUIT_Integrated_Payload,
  * $$SUIT_Envelope_Extensions,
  * (int => bstr)
}

SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]

SUIT_Digest = [
  suit-digest-algorithm-id : suit-cose-hash-algs,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

SUIT_Severable_Manifest_Members = (
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  ? suit-coswid => bstr .cbor concise-software-identity,
  * $$SUIT_severable-members-extensions,
)

SUIT_Integrated_Payload = (suit-integrated-payload-key => bstr)
suit-integrated-payload-key = str

SUIT_Manifest_Tagged = #6.1070(SUIT_Manifest)

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Severable_Members_Choice,
    SUIT_Unseverable_Members,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-run => bstr .cbor SUIT_Command_Sequence,
  * $$unseverable-manifest-member-extensions,
)

SUIT_Severable_Members_Choice = (
  ? suit-payload-fetch => \
    bstr .cbor SUIT_Command_Sequence / SUIT_Digest,
  ? suit-install => bstr .cbor SUIT_Command_Sequence / SUIT_Digest,
  ? suit-text => bstr .cbor SUIT_Command_Sequence / SUIT_Digest,
  * $$severable-manifest-members-choice-extensions
)

SUIT_Common = {
    ? suit-components             => SUIT_Components,
    ? suit-common-sequence        => bstr .cbor SUIT_Common_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Components           = [ + SUIT_Component_Identifier ]

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
    * $$SUIT_Dependency-extensions,
}

;REQUIRED to implement:
suit-cose-hash-algs /= cose-alg-sha-256

;OPTIONAL to implement:
suit-cose-hash-algs /= cose-alg-shake128
suit-cose-hash-algs /= cose-alg-sha-384
suit-cose-hash-algs /= cose-alg-sha-512
suit-cose-hash-algs /= cose-alg-shake256

SUIT_Component_Identifier =  [* bstr]

SUIT_Common_Sequence = [
    + ( SUIT_Condition // SUIT_Common_Commands )
]

SUIT_Common_Commands //= (suit-directive-set-component-index,  IndexArg)
SUIT_Common_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Common_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Common_Commands //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})

IndexArg /= uint
IndexArg /= bool
IndexArg /= [+uint]

SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-component-slot,    SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-abort,             SUIT_Rep_Policy)

SUIT_Directive //= (suit-directive-set-component-index,  IndexArg)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency, SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-copy,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-swap,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-run,               SUIT_Rep_Policy)

SUIT_Directive_Try_Each_Argument = [
    2* bstr .cbor SUIT_Command_Sequence,
    ?nil
]

SUIT_Rep_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

SUIT_Parameters //= (suit-parameter-vendor-identifier =>
    (RFC4122_UUID / cbor-pen))
cbor-pen = #6.112(bstr)

SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-component-slot => uint)

SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-run-args => bstr)

SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)

SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)

RFC4122_UUID = bstr .size 16

SUIT_Text_Map = {
    SUIT_Text_Keys,
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    }
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

;suit-delegation = 1
suit-authentication-wrapper = 2
suit-manifest = 3

;REQUIRED to implement:
cose-alg-sha-256 = -16

;OPTIONAL to implement:
cose-alg-shake128 = -18
cose-alg-sha-384 = -43
cose-alg-sha-512 = -44
cose-alg-shake256 = -45

suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
;suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text = 13
;suit-coswid = 14

;suit-dependencies = 1
suit-components = 2
suit-common-sequence = 4

;suit-dependency-digest = 1
;suit-dependency-prefix = 2

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
;suit-condition-use-before        = 4
suit-condition-component-slot    = 5

suit-condition-abort                    = 14
suit-condition-device-identifier        = 24
;suit-condition-image-not-match          = 25
;suit-condition-minimum-battery          = 26
;suit-condition-update-authorized        = 27
;suit-condition-version                  = 28

suit-directive-set-component-index      = 12
;suit-directive-set-dependency-index     = 13
suit-directive-try-each                 = 15
;suit-directive-process-dependency       = 18
;suit-directive-set-parameters           = 19
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

;suit-directive-wait                     = 29
;suit-directive-fetch-uri-list           = 30
suit-directive-swap                     = 31
suit-directive-run-sequence             = 32
;suit-directive-unlink                   = 33

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-component-slot    = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14

suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-run-args          = 23

suit-parameter-device-identifier = 24

suit-parameter-custom = nint

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
]]></artwork></figure>

</section>
<section anchor="examples" title="B. Examples">

<t>The following examples demonstrate a small subset of the functionality of the manifest. Even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<t>Note that reporting policies are declared for each non-flow-control command in these examples. The reporting policies used in the examples are described in the following tables.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Label</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Rec-Pass</c>
      <c>suit-send-record-on-failure</c>
      <c>Rec-Fail</c>
      <c>suit-send-sysinfo-success</c>
      <c>Sys-Pass</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Sys-Fail</c>
</texttable>

<texttable>
      <ttcol align='left'>Command</ttcol>
      <ttcol align='left'>Sys-Fail</ttcol>
      <ttcol align='left'>Sys-Pass</ttcol>
      <ttcol align='left'>Rec-Fail</ttcol>
      <ttcol align='left'>Rec-Pass</ttcol>
      <c>suit-condition-vendor-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-class-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-image-match</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-component-slot</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>1</c>
      <c>suit-directive-fetch</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-copy</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-run</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
</texttable>

<section anchor="example-0-secure-boot" title="Example 0: Secure Boot">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
</list></t>

<t>It also serves as the minimum example.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'a6c4590ac53043a98e8c4106e1e31b305516d7cf0a655eddfac6d45c810e036a'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'd11a2dd9610fb62a707335f58407922570
9f96e8117e7eeed98a2f207d05c8ecfba1755208f6abea977b8a6efe3bc2ca3215e119
3be201467d052b42db6b7287'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:0,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / validate / 10:<<[
                / condition-image-match / 3,15
            ]>>,
            / run / 12:<<[
                / directive-run / 23,2
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  161</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820a6c4590ac53043a98e8c4106e1e31b3055
16d7cf0a655eddfac6d45c810e036a035871a50101020003585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f0a4382030f0c43821702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  237</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820a6c4590ac53043a98e8c4106e1e31b3055
16d7cf0a655eddfac6d45c810e036a584ad28443a10126a0f65840d11a2d
d9610fb62a707335f584079225709f96e8117e7eeed98a2f207d05c8ecfb
a1755208f6abea977b8a6efe3bc2ca3215e1193be201467d052b42db6b72
87035871a50101020003585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f0a4382030f0c43821702
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload" title="Example 1: Simultaneous Download and Installation of Payload">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Simultaneous download and installation of payload. No secure boot is present in this example to demonstrate a download-only manifest.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'60c61d6eb7a1aaeddc49ce8157a55cff0821537eeee77a4ded44155b03045132'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'5249dacaf0ffc8326931b09586eb7e3769
e71a0e6a40ad8153db4980db9b05bd1742ddb46085fa11e62b65a79895c12ac7abe266
8ccc5afdd74466aed7bca389'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:1,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / install / 9:<<[
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
            / validate / 10:<<[
                / condition-image-match / 3,15
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  196</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f582060c61d6eb7a1aaeddc49ce8157a55cff08
21537eeee77a4ded44155b03045132035894a50101020103585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f0958258613a115781b687474703a2f2f6578616d706c652e636f6d2f66
696c652e62696e1502030f0a4382030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  272</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f582060c61d6eb7a1aaeddc49ce8157a55cff08
21537eeee77a4ded44155b03045132584ad28443a10126a0f658405249da
caf0ffc8326931b09586eb7e3769e71a0e6a40ad8153db4980db9b05bd17
42ddb46085fa11e62b65a79895c12ac7abe2668ccc5afdd74466aed7bca3
89035894a50101020103585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f0958258613a115781b68747470
3a2f2f6578616d706c652e636f6d2f66696c652e62696e1502030f0a4382
030f
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-secure-boot-severed-fields" title="Example 2: Simultaneous Download, Installation, Secure Boot, Severed Fields">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>This example also demonstrates severable elements (<xref target="ovr-severable"/>), and text (<xref target="manifest-digest-text"/>).</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'e45dcdb2074b951f1c88b866469939c2a83ed433a31fc7dfcb3f63955bd943ec'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'b4fd3a6a18fe1062573488cf24ac96ef9f
30ac746696e50be96533b356b8156e4332587fe6f4e8743ae525d72005fddd4c1213d5
5a8061b2ce67b83640f4777c'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:2,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / install / 9:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'3ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d2'
            ],
            / validate / 10:<<[
                / condition-image-match / 3,15
            ]>>,
            / run / 12:<<[
                / directive-run / 23,2
            ]>>,
            / text / 13:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'2bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918'
            ],
        }>>,
        / install / 9:<<[
            / directive-set-parameters / 19,{
                / uri /
21:'http://example.com/very/long/path/to/file/file.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ]>>,
        / text / 13:<<{
            [h'00']:{
                    / vendor-domain / 3:'arm.com',
                    / component-description / 5:'This component is a
demonstration. The digest is a sample pattern, not a real one.',
                }
        }>>,
    })
]]></artwork></figure>

<t>Total size of the Envelope without COSE authentication object or Severable Elements:  235</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820e45dcdb2074b951f1c88b866469939c2a8
3ed433a31fc7dfcb3f63955bd943ec0358bba70101020203585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f09822f58203ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc
9f949d84ea0e18d20a4382030f0c438217020d822f58202bfc4d0cc6680b
e7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918
]]></artwork></figure>
<t>Total size of the Envelope with COSE authentication object but without Severable Elements:  311</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820e45dcdb2074b951f1c88b866469939c2a8
3ed433a31fc7dfcb3f63955bd943ec584ad28443a10126a0f65840b4fd3a
6a18fe1062573488cf24ac96ef9f30ac746696e50be96533b356b8156e43
32587fe6f4e8743ae525d72005fddd4c1213d55a8061b2ce67b83640f477
7c0358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f09822f58203ee96dc79641970a
e46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a4382030f0c
438217020d822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf918
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object and Severable Elements:  894</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba4025873825824822f5820e45dcdb2074b951f1c88b866469939c2a8
3ed433a31fc7dfcb3f63955bd943ec584ad28443a10126a0f65840b4fd3a
6a18fe1062573488cf24ac96ef9f30ac746696e50be96533b356b8156e43
32587fe6f4e8743ae525d72005fddd4c1213d55a8061b2ce67b83640f477
7c0358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f09822f58203ee96dc79641970a
e46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a4382030f0c
438217020d822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf91809583c8613a1157832687474703a2f2f657861
6d706c652e636f6d2f766572792f6c6f6e672f706174682f746f2f66696c
652f66696c652e62696e1502030f0d590204a20179019d2323204578616d
706c6520323a2053696d756c74616e656f757320446f776e6c6f61642c20
496e7374616c6c6174696f6e2c2053656375726520426f6f742c20536576
65726564204669656c64730a0a2020202054686973206578616d706c6520
636f766572732074686520666f6c6c6f77696e672074656d706c61746573
3a0a202020200a202020202a20436f6d7061746962696c69747920436865
636b20287b7b74656d706c6174652d636f6d7061746962696c6974792d63
6865636b7d7d290a202020202a2053656375726520426f6f7420287b7b74
656d706c6174652d7365637572652d626f6f747d7d290a202020202a2046
69726d7761726520446f776e6c6f616420287b7b6669726d776172652d64
6f776e6c6f61642d74656d706c6174657d7d290a202020200a2020202054
686973206578616d706c6520616c736f2064656d6f6e7374726174657320
736576657261626c6520656c656d656e747320287b7b6f76722d73657665
7261626c657d7d292c20616e64207465787420287b7b6d616e6966657374
2d6469676573742d746578747d7d292e814100a2036761726d2e636f6d05
78525468697320636f6d706f6e656e7420697320612064656d6f6e737472
6174696f6e2e205468652064696765737420697320612073616d706c6520
7061747465726e2c206e6f742061207265616c206f6e652e
]]></artwork></figure>

</section>
<section anchor="example-3-ab-images" title="Example 3: A/B images">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>A/B Image Template (<xref target="a-b-template"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'7c9b3cb72c262608a42f944d59d659ff2b801c78af44def51b8ff51e9f45721b'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'e33d618df0ad21e609529ab1a876afb231
faff1d6a3189b5360324c2794250b87cf00cf83be50ea17dc721ca85393cd8e839a066
d5dec0ad87a903ab31ea9afa'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:3,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    } ,
                    / directive-try-each / 15,[
                        <<[
                            / directive-override-parameters / 20,{
                                / offset / 5:33792,
                            } ,
                            / condition-component-offset / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<<[
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                                ]>>,
                                / image-size / 14:34768,
                            }
                        ]>> ,
                        <<[
                            / directive-override-parameters / 20,{
                                / offset / 5:541696,
                            } ,
                            / condition-component-offset / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<<[
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                                ]>>,
                                / image-size / 14:76834,
                            }
                        ]>>
                    ] ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / install / 9:<<[
                / directive-try-each / 15,[
                    <<[
                        / directive-set-parameters / 19,{
                            / offset / 5:33792,
                        } ,
                        / condition-component-offset / 5,5 ,
                        / directive-set-parameters / 19,{
                            / uri / 21:'http://example.com/file1.bin',
                        }
                    ]>> ,
                    <<[
                        / directive-set-parameters / 19,{
                            / offset / 5:541696,
                        } ,
                        / condition-component-offset / 5,5 ,
                        / directive-set-parameters / 19,{
                            / uri / 21:'http://example.com/file2.bin',
                        }
                    ]>>
                ] ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
            / validate / 10:<<[
                / condition-image-match / 3,15
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  332</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f58207c9b3cb72c262608a42f944d59d659ff2b
801c78af44def51b8ff51e9f45721b0359011ba5010102030358aaa20281
8141000458a18814a20150fa6b4a53d5ad5fdfbe9de663e4d41ffe025014
92af1425695e48bf429b2d51f2ab450f8258368614a105198400050514a2
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0583a8614a1051a00084400050514a20358
24822f58200123456789abcdeffedcba9876543210001122334455667788
99aabbccddeeff0e1a00012c22010f020f095861860f82582a8613a10519
8400050513a115781c687474703a2f2f6578616d706c652e636f6d2f6669
6c65312e62696e582c8613a1051a00084400050513a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65322e62696e1502030f0a4382
030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  408</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f58207c9b3cb72c262608a42f944d59d659ff2b
801c78af44def51b8ff51e9f45721b584ad28443a10126a0f65840e33d61
8df0ad21e609529ab1a876afb231faff1d6a3189b5360324c2794250b87c
f00cf83be50ea17dc721ca85393cd8e839a066d5dec0ad87a903ab31ea9a
fa0359011ba5010102030358aaa202818141000458a18814a20150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450f8258368614a105198400050514a2035824822f582000112233445566
778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d058
3a8614a1051a00084400050514a2035824822f58200123456789abcdeffe
dcba987654321000112233445566778899aabbccddeeff0e1a00012c2201
0f020f095861860f82582a8613a105198400050513a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65312e62696e582c8613a1051a
00084400050513a115781c687474703a2f2f6578616d706c652e636f6d2f
66696c65322e62696e1502030f0a4382030f
]]></artwork></figure>

</section>
<section anchor="example-4-load-from-external-storage" title="Example 4: Load from External Storage">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>Install (<xref target="template-install"/>)</t>
  <t>Load (<xref target="template-load-ext"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'15736702a00f510805dcf89d6913a2cfb417ed414faa760f974d6755c68ba70a'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'3ada2532326d512132c388677798c24ffd
cc979bfae2a26b19c8c8bbf511fd7dd85f1501662c1a9e1976b759c4019bab44ba5434
efb45d3868aedbca593671f3'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:4,
            / common / 3:<<{
                / components / 2:[
                    [h'00'] ,
                    [h'02'] ,
                    [h'01']
                ],
                / common-sequence / 4:<<[
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / payload-fetch / 8:<<[
                / directive-set-component-index / 12,1 ,
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
            / install / 9:<<[
                / directive-set-component-index / 12,0 ,
                / directive-set-parameters / 19,{
                    / source-component / 22:1 / [h'02'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ]>>,
            / validate / 10:<<[
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15
            ]>>,
            / load / 11:<<[
                / directive-set-component-index / 12,2 ,
                / directive-set-parameters / 19,{
                    / image-digest / 3:<<[
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ]>>,
                    / image-size / 14:76834,
                    / source-component / 22:0 / [h'00'] /,
                    / compression-info / 19:<<{
                        / compression-algorithm / 1:1 / "gzip" /,
                    }>>,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ]>>,
            / run / 12:<<[
                / directive-set-component-index / 12,2 ,
                / directive-run / 23,2
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  292</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f582015736702a00f510805dcf89d6913a2cfb4
17ed414faa760f974d6755c68ba70a0358f4a801010204035867a2028381
4100814102814101045858880c0014a40150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824822f582000
112233445566778899aabbccddeeff0123456789abcdeffedcba98765432
100e1987d0010f020f085827880c0113a115781b687474703a2f2f657861
6d706c652e636f6d2f66696c652e62696e1502030f094b880c0013a11601
1602030f0a45840c00030f0b583d880c0213a4035824822f582001234567
89abcdeffedcba987654321000112233445566778899aabbccddeeff0e1a
00012c221343a1010116001602030f0c45840c021702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  368</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f582015736702a00f510805dcf89d6913a2cfb4
17ed414faa760f974d6755c68ba70a584ad28443a10126a0f658403ada25
32326d512132c388677798c24ffdcc979bfae2a26b19c8c8bbf511fd7dd8
5f1501662c1a9e1976b759c4019bab44ba5434efb45d3868aedbca593671
f30358f4a801010204035867a20283814100814102814101045858880c00
14a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48
bf429b2d51f2ab45035824822f582000112233445566778899aabbccddee
ff0123456789abcdeffedcba98765432100e1987d0010f020f085827880c
0113a115781b687474703a2f2f6578616d706c652e636f6d2f66696c652e
62696e1502030f094b880c0013a116011602030f0a45840c00030f0b583d
880c0213a4035824822f58200123456789abcdeffedcba98765432100011
2233445566778899aabbccddeeff0e1a00012c221343a101011600160203
0f0c45840c021702
]]></artwork></figure>

</section>
<section anchor="example-5-two-images" title="Example 5: Two Images">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Furthermore, it shows using these templates with two images.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'd1e73f16e4126007bc4d804cd33b0209fbab34728e60ee8c00f3387126748dd2'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'b7ae0a46a28f02e25cda6d9a255bbaf863
30141831fae5a78012d648bc6cee55102e0f1890bdeacc3adaa4fae0560f83a45eecae
65cabce642f56d84ab97ef8d'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:5,
            / common / 3:<<{
                / components / 2:[
                    [h'00'] ,
                    [h'01']
                ],
                / common-sequence / 4:<<[
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15 ,
                    / directive-set-component-index / 12,1 ,
                    / directive-override-parameters / 20,{
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                        ]>>,
                        / image-size / 14:76834,
                    }
                ]>>,
            }>>,
            / install / 9:<<[
                / directive-set-component-index / 12,0 ,
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file1.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file2.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
            / validate / 10:<<[
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / condition-image-match / 3,15
            ]>>,
            / run / 12:<<[
                / directive-set-component-index / 12,0 ,
                / directive-run / 23,2
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  306</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820d1e73f16e4126007bc4d804cd33b0209fb
ab34728e60ee8c00f3387126748dd203590101a601010205035895a20282
8141008141010458898c0c0014a40150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820001122
33445566778899aabbccddeeff0123456789abcdeffedcba98765432100e
1987d0010f020f0c0114a2035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c2209584f90
0c0013a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65
312e62696e1502030f0c0113a115781c687474703a2f2f6578616d706c65
2e636f6d2f66696c65322e62696e1502030f0a49880c00030f0c01030f0c
45840c001702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  382</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820d1e73f16e4126007bc4d804cd33b0209fb
ab34728e60ee8c00f3387126748dd2584ad28443a10126a0f65840b7ae0a
46a28f02e25cda6d9a255bbaf86330141831fae5a78012d648bc6cee5510
2e0f1890bdeacc3adaa4fae0560f83a45eecae65cabce642f56d84ab97ef
8d03590101a601010205035895a202828141008141010458898c0c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab45035824822f582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d0010f020f0c0114a2035824
822f58200123456789abcdeffedcba987654321000112233445566778899
aabbccddeeff0e1a00012c2209584f900c0013a115781c687474703a2f2f
6578616d706c652e636f6d2f66696c65312e62696e1502030f0c0113a115
781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62696e
1502030f0a49880c00030f0c01030f0c45840c001702
]]></artwork></figure>

</section>
</section>
<section anchor="design-rationale" title="C. Design Rational">

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted invocation operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted invocation of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency’s commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope" title="C.1 Design Rationale: Envelope">

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of Severable Elements (<xref target="severable-fields"/>)</t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers" title="C.2 Byte String Wrappers">

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the common sequence. The common sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>
<section anchor="implementation-matrix" title="D. Implementation Conformance Matrix">

<t>This section summarizes the functionality a minimal manifest processor
implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Class Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Device Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>OPTIONAL</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>REQUIRED</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>Abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>OPTIONAL</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>REQUIRED if more than one component</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>OPTIONAL</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>REQUIRED</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>REQUIRED for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>OPTIONAL</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>REQUIRED for Bootloader</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>OPTIONAL</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>REQUIRED</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>REQUIRED</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>REQUIRED</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>REQUIRED</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>REQUIRED for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>OPTIONAL</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>OPTIONAL</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>OPTIONAL</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>OPTIONAL</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>OPTIONAL</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c>OPTIONAL</c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
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
7GQGOkhQ3TI37iy2lnhPWHzHxdXxIeW1nhqOnROqGE6Csr+LhPs6ldLYb19R
QXmQbkv9asA15rdlNusz/Omz5SavsQ29iD9pCadef3twlLqKfDmA08OCQVpA
2C0e12tPYMjf7rQ4SGMtenUY/42XtK7XM+uNaHEZp36kUroxMHd5GOppUz9y
LgF21CkoMpSZhWbFHMPXLcT1EPGKoSKqlDq6wmKYaIkcUhq6tUUHZtqdlH2m
TnccXcEXTh7uvgbbIfNFAyL5oHKnpPS6osUSe1aS81NfSy7Fc3d95KvraClc
bZbIC5p7TbkZI0dE5IRK/peeONEqK6iCk7lDufnkEqW6eM/WSikqHYFPab0D
LHdHBmb9qEODYEoStSkXtvv+RrGkzgofEfHixYrujueKrmDHHlWfxHKp05eT
kqXvePma5FkssZhLJRBzqPnjtWa3JE+BuOLcqWJ5b6CZkhFxmKF0wWLn7qRb
lmSJ+4Ofc9Vk2kN2Wi8Y2QFNhjyy328o73R39SeRbOyNZApCFd19CvKxiQhN
+fy1VGLybFYbbyffJPOYNUoPw0a5QRwsz7LzttIASN01249oAfoAunpRlnzU
++C2090pKWymDPgRmAZ6xrzCg1Mni6rcCSapgCWLuNQQfLIe0IVTQ5YAeIPW
v0LLWUnzDlA9JND7oGuxubBVd4gt0qRq7a4Q7+6OLdy+IPOiEs+Z+DRJbKlC
q967z0J0MLuM+w7Gy+ph/IqkVjaOUebZQCmSihojiImYFZwg5NTUbsUsvg0r
AQ7fby1VSJZF9QPy/ConhfGLtE+Kg5jnORDQVFVYpDKslhi9gWePjLe5T1iQ
glKvaa53uE0rqQcJ17ukqvH1eihFff0J2LMbq5Eir618JRsphaRL5i7/jV1r
anV7gSvBb3+ChxVnnp3F1ouPvI9DYA216qgFk3FhcIlX2zR4VUwh5uZazdcq
izlwl98kPSr5FrQm4gy7tOBcVwegdPxs9wXhPDc6FBAQ2eRCIedGzz0TQfxK
TCG8aVuEveVJlwidIPvwbWfdFs2CjGkkfk7LIoCeJPhthbq4DVGFanonhSaE
aUn7Sr1YZLJ5QJrVyitR6JatW6TdmBSnYkVn4Ju8+oy3vkqLz8iFKEwgL4xQ
f380YmBVuYY8ZNWJejNKe5ixPxWfliH98dUVep5r+lzbv+M6+glMpEIA4wwv
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
bLGBlmyQPCwt6ShWoBMGI22gEh3cqgw1Cib0OFNtFczoyCcGDkjtWySK4JAD
QARihINmLeJCA7/uFg+QrgUga3kLuvkse3zd3JU9vW6eyh5eNyfFL96dPLW3
oA5G2ltQB/fsL6idZdZ3aROfDAh3J3McHaKXCjr/PB5G5xwDjXEzEg4tRYsc
Bxj9IUrSBYczky8QRepyjIeJL55JJYV4LhHoftj4+Q2n9CGury3vyjTOTUah
RWHilqvUDTyh5ZlFUbUfDle3VWjs4s/PnlxSWOQSeMFyhHGVJ+Smg25Qg8Hj
899dvIhevb749vTNefT1+Xf0be/5xe++Or06P33++PnvHq9//N3l8/1j+Py7
szP5+/b8q8e/272Nby8en/7hD1eny3/87od/PPvmd8+eH+x++/isd/bDd5f1
nz7fPf7hd4t8/ftX5fLJszc/71xnf3p5/fr0xdnp6eX5vDjHLD0//nj8++tv
f8rSRy+Kxc2PPz47el3f9F59PsnqP/5xep3cnJZvqtnX7+rq7Lvzn26/flGX
L776U3b88vHei89v89Nv6urnxevx3vP9+uvsj7yt8xdPwk3Rqb8JfLKWq8k8
m1LAqZuBwUt1VVmAt0Dvm8fPLs4c4D19d3t++91XXxf/ePHzD7tnp3/47kL+
fnL6h+kTANf59e/jx7/7cf/Zjz/eXH737fS7fPVz/Pvy8Mds53zSm/y8s9gv
v53nF3+a3H69++ir9fLZ5HTx+Pn07IdJ/PPr0f7Nm6vk51n1+9unzybPD94l
9c8vn10W86svvnD231gWbZ8TePBWuMrR5VenKCVIuLDQeMVjDAAq6lTTM3gJ
TLNUk6XCG1JK6DWxJDnQmhngnwZU2/zZeQOY7IjWMrBbTddDdS8Rh4/qlK4M
74coLD9E5HKs/sW9QL+IJFH0h+iPPB28grewtdnMuPBjM3Tod5o1dZEfost1
1RyrqY3kRjRST3PI2O+cMZw53VU6TtMfvA1uriw7cv//TrnijvZ+PdfNQzer
te5Ky13bOqyDses2bGUP72jDVS78JujaL2Q/2j1hx+c0elxgpSGu0yw/Ogli
HCRL4Td0Kibv2TO3ZpRkl9l6/14b0bbN75xR6ONHiua0s3odyB0ZRLKCqgz1
ehc1hyZTAINJeyMSjq6U/S576FhplWo7UYcaYycan/z2t3/uuY8rX/uTqPm9
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
gkUG3vQhqgFaajXMqNu7G9D6d1nX8s4kTvKm+cco9dLJUXMQsRqxrRllYwN1
spFiWVNODxXXexx50qW7O+xgzBSZK7i2hYmPDBc01RvBjxzwp2kJ0euSGEIr
qXrX+GZ6xbQa4jB11jPoTKl9iE7aLxgxfoE03kIAJqxYagiTCH4lUfEjYtLZ
2ju02Irnf5mNqo3SWW+zgoTq2R8moLTZsOQkBLE7rP4aLnIbuRHrzTOBjcB4
lqQHnADM5Ywgg5405iV1rmGuwly4aNRO5g1zfFkJmmt62II6rTR8DfFThKAb
YEtjM7xFJmITiFWuta01WZnewaoN0sASFAv+C0x3/kROYQX95wZTxfn5+Z/m
f+J/eJfQMK38EzPSajUrB/t/MCVRiz/++7eXv/74QlzS9qDjqrzQMMghdV7/
8vbl6389+1now4ZfcVxBb9PccD660r5BXpf9vZkv27Gq/Sp6M6c9xcNen+WU
a45UklSw/u4lPBfccg+qUTX2Ad2j3/U76/X2ybNbuj9enm9g+oP0lzcJdIOZ
3EuwxkRnVulFFFjugu766ec08RYBw49yKJTtg+TWx/vabOwaJO1jlUf2f61L
9ifVjnfLe1TWB0CxjI5fa2jEzd1YNfraa53SX1eLsRfr1WK7ddqnTtuH0QFV
e2OngvH63U7T9Q7f3MqbUQHh+XFKMwDVTnUCL3pKuta29xGOOoPRqpv7CNdr
avvWs+VY7eHOvrGab2hdf2c9WvU/zC8M6J3wC7/9+nKsyqqe7da7N/y15MAe
RxrY/KJyWx+f1VfNWE1SKuStG17TetpRgWg0elMivTJiIi1a5zUHs2O0crle
Wtmouaxa5yc5m1MGPDrKqj2vdPmoDx2Txojn/H+LgPT9FBwCAA==

-->

</rfc>

