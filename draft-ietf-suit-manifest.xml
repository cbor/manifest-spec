<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-16" category="std">

  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>

    <date year="2021" month="October" day="26"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about code/data obtained by a recipient (chiefly
the firmware for an IoT device), where to find the that code/data, the
devices to which it applies, and cryptographic information protecting
the manifest. Software updates and Trusted Invocation both tend to use
sequences of common operations, so the manifest encodes those sequences
of operations, rather than declaring the metadata.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata describing one or more code or data payloads and how to:</t>

<t><list style="symbols">
  <t>Obtain any dependencies</t>
  <t>Obtain the payload(s)</t>
  <t>Install them</t>
  <t>Verify them</t>
  <t>Load them into memory</t>
  <t>Invoke them</t>
</list></t>

<t>This specification defines the SUIT manifest format and it is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="I-D.ietf-suit-information-model"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>a Firmware Author to reason about releasing a firmware.</t>
  <t>a Network Operator to reason about compatibility of a firmware.</t>
  <t>a Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>a Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>a device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>a device to reason about the applicability of a firmware.</t>
  <t>a device to reason about the installation of a firmware.</t>
  <t>a device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="RFC9019"/> and the threats, requirements, and user stories in <xref target="I-D.ietf-suit-information-model"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or Trusted Invocation are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In this document, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the language is tailored to software updates and Trusted Invocation.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and Trusted Invocation use cases, there is nothing in the SUIT Information Model (<xref target="I-D.ietf-suit-information-model"/>) that restricts its use to only those use cases. Other use cases include the management of trusted applications (TAs) in a Trusted Execution Environment (TEE), as discussed in <xref target="I-D.ietf-teep-architecture"/>.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements (see: TBD).</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient's storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document"><name>How to use this Document</name>

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rational is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> gives a summarize of the mandatory-to-implement features of this specification.</t>

<t>This specification covers the core features of SUIT. Additional specifications will cover advanced use cases and update management needs:</t>

<t><list style="symbols">
  <t>Firmware Encryption is covered in <xref target="I-D.ietf-suit-firmware-encryption"/></t>
  <t>Update Management is covered in (TBD) <!--{{I-D.moran-suit-update-management}}--></t>
  <t>Multiple Trust Domains (dependencies, key delegation, multiple processors, TEEs, etc.) are covered in (TBD) <!--{{I-D.moran-suit-trust-domains}}--></t>
  <t>Update Compression is covered in (TBD) <!--{{I-D.moran-suit-payload-compression}}--></t>
</list></t>

</section>
<section anchor="background"><name>Background</name>

<t>Distributing software updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="RFC9019"/>. The security aspects are described in <xref target="I-D.ietf-suit-information-model"/>.</t>

<section anchor="iot-firmware-update-constraints"><name>IoT Firmware Update Constraints</name>

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivered to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model"><name>SUIT Workflow Model</name>

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Invocation Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Run image(s).</t>
</list></t>

<t>If verification and running is implemented in a bootloader, then the bootloader MUST also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader may add its own authentication, e.g. a Message Authentication Code (MAC), to the manifest in order to prevent further verifications.</t>

</section>
</section>
<section anchor="metadata-structure-overview"><name>Metadata Structure Overview</name>

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest..</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, such as affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable elements.</t>
    </list></t>
  <t>Severable elements (see <xref target="ovr-severable"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| Integrated Payloads     |          | Structure Version            |
+-------------------------+          | Sequence Number              |
                                     | Reference to Full Manifest   |
                               +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Components IDs          |      +-> +-----------------------+
| Common Command Sequence ---------> | Command Sequence      |
+-------------------------+          +-----------------------+
                                     | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope"><name>Envelope</name>

<t>The SUIT Envelope is a container that encloses the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that would add substantial complexity with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-auth"><name>Authentication Block</name>

<t>The Authentication Block contains a bstr-wrapped SUIT Digest Container, see <xref target="SUIT_Digest"/>, and one or more <xref target="RFC8152"/> CBOR Object Signing and Encryption (COSE) authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>Each of these objects is used in detached payload mode. The payload is the bstr-wrapped SUIT_Digest.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest"><name>Manifest</name>

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical"><name>Critical Metadata</name>

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which manifest is newest and whether the structure version is supported. It also MAY provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, and <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common"><name>Common</name>

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of two parts: a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence MUST NOT have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/> for more detail.</t>

</section>
<section anchor="ovr-commands"><name>Command Sequences</name>

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Payload Fetch, and Payload Installation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Invocation Command Sequences are: System Validation, Image Loading, and Image Invocation. An Invocation Procedure is the complete set of each Invocation Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command (dependencies are not defined in this specification).</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity"><name>Integrity Check Values</name>

<t>To enable <xref target="ovr-severable"/>, there needs to be a mechanism to verify integrity of any metadata outside the manifest. Integrity Check Values are used to verify the integrity of metadata that is not contained in the manifest. This MAY include Severable Command Sequences, or Text data. Integrated Payloads are integrity-checked using Command Sequences, so they do not have Integrity Check Values present in the Manifest.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text"><name>Human-Readable Text</name>

<t>Text is typically a Severable Element (<xref target="ovr-severable"/>). It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable"><name>Â Severable Elements</name>

<t>Severable Elements are elements of the Envelope (<xref target="ovr-envelope"/>) that have Integrity Check Values (<xref target="ovr-integrity"/>) in the Manifest (<xref target="ovr-manifest"/>).</t>

<t>Because of this organisation, these elements can be discarded or "Severed" from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system severs the Text sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated"><name>Integrated Payloads</name>

<t>In some cases, it is beneficial to include a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest's envelope.</t>
</list></t>

<t>See <xref target="template-integrated-payload"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior"><name>Manifest Processor Behavior</name>

<t>This section describes the behavior of the manifest processor and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the manifest processor: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup"><name>Manifest Processor Setup</name>

<t>Prior to executing any command sequence, the manifest processor or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the manifest processor or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the manifest processor can choose between several manifests, it MUST select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest, according to application-specific policy.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported Component Identifier encountered.</t>
  <t>Payload not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Payload verification failed.</t>
  <t>Missing required component from a Component Set.</t>
  <t>Required parameter not supplied.</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Selecting an older manifest in the event of failure of the latest valid manifest is a robustness mechanism that is necessary for supporting the requirements in <xref target="RFC9019"/>, section 3.5. It may not be appropriate for all applications. In particular Trusted Execution Environments MAY require a failure to invoke a new installation, rather than a rollback approach. See <xref target="I-D.ietf-suit-information-model"/>, Section 4.2.1 for more discussion on the security considerations that apply to rollback.</t>

<t>Following these initial tests, the manifest processor clears all parameter storage. This ensures that the manifest processor begins without any leaked data.</t>

</section>
<section anchor="required-checks"><name>Â Required Checks</name>

<t>The RECOMMENDED process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a Recipient receives an incompatible manifest.</t>

<t>When validating authenticity of manifests, the manifest processor MAY use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity.</t>

<t>Once a valid, authentic manifest has been selected, the manifest processor MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component is supported.</t>

<t>For each listed component, the manifest processor MUST provide storage for the supported parameters. If the manifest processor does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The manifest processor SHOULD check that the common sequence contains at least Check Vendor Identifier command and at least one Check Class Identifier command.</t>

<t>Because the common sequence contains Check Vendor Identifier and Check Class Identifier command(s), no custom commands are permitted in the common sequence. This ensures that any custom commands are only executed by devices that understand them.</t>

<t>If the manifest contains more than one component, each command sequence MUST begin with a Set Component Index.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by one update, that is the manifest:</t>

<t><list style="numbers">
  <t>has sufficient permissions imparted by its signatures</t>
  <t>specifies a digest and a payload for every Component in the Component Set.</t>
</list></t>

<section anchor="minimal-sigs"><name>Minimizing Signature Verifications</name>

<t>Signature verification can be energy and time expensive on a constrained device. MAC verification is typically unaffected by these concerns. A Recipient MAY choose to parse and execute only the SUIT_Common section of the manifest prior to signature verification, if all of the below apply:</t>

<t><list style="symbols">
  <t>The Authentication Block contains a COSE_Sign_Tagged or COSE_Sign1_Tagged</t>
  <t>The Recipient receives manifests over an unauthenticated channel, exposing it to more inauthentic or incompatible manifests, and</t>
  <t>The Recipient has a power budget that makes signature verification undesirable</t>
</list></t>

<t>When executing Common prior to authenticity validation, the Manifest Processor MUST first evaluate the integrity of the manifest using the SUIT_Digest present in the authentication block.</t>

<t>The guidelines in Creating Manifests (<xref target="creating-manifests"/>) require that the common section contains the applicability checks, so this section is sufficient for applicability verification. The parser MUST restrict acceptable commands to conditions and the following directives: Override Parameters, Set Parameters, Try Each, and Run Sequence ONLY. The manifest parser MUST NOT execute any command with side-effects outside the parser (for example, Run, Copy, Swap, or Fetch commands) prior to authentication and any such command MUST Abort. The Common Sequence MUST be executed again, in its entirety, after authenticity validation.</t>

<t>A Recipient MAY rely on network infrastructure to filter inapplicable manifests.</t>

</section>
</section>
<section anchor="interpreter-fundamental-properties"><name>Interpreter Fundamental Properties</name>

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a Trusted Invocation MUST either result in an error, or an invoked image.</t>
  <t>Executing the same manifest on multiple Recipients MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

</section>
<section anchor="command-behavior"><name>Abstract Machine Description</name>

<t>The heart of the manifest is the list of commands, which are processed by a Manifest Processor--a form of interpreter. This Manifest Processor can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>Conditions MUST NOT have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag (<xref target="suit-parameter-soft-failure"/>) is set when a Condition reports failure.</t>

<t>Directives MAY have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter MUST Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>To simplify the logic describing the command semantics, the object "current" is used. It represents the component identified by the Component Index:</t>

<figure><artwork><![CDATA[
current := components\[component-index\]
]]></artwork></figure>

<t>As a result, Set Component Index is described as current := components[arg].</t>

<t>The following table describes the behavior of each command. "params" represents the parameters for the current component. Most commands operate on a component.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for-each k,v in arg</c>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in params for-each k,v in arg</c>
      <c>Run</c>
      <c>run(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Slot</c>
      <c>assert(current.slot-index == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>try-each-done if exec(seq) is not error for-each seq in arg</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Run with Arguments</c>
      <c>run(current, arg)</c>
</texttable>

</section>
<section anchor="index-true"><name>Special Cases of Component Index</name>

<t>Component Index can take on one of three types:</t>

<t><list style="numbers">
  <t>Integer</t>
  <t>Array of integers</t>
  <t>True</t>
</list></t>

<t>Integers MUST always be supported by Set Component Index. Arrays of integers MUST be supported by Set Component Index if the Recipient supports 3 or more components. True MUST be supported by Set Component Index if the Recipient supports 2 or more components. Each of these operates on the list of components declared in the manifest.</t>

<t>Integer indices are the default case as described in the previous section. An array of integers represents a list of the components (Set Component Index) to which each subsequent command applies. The value True replaces the list of component indices with the full list of components, as defined in the manifest.</t>

<t>When a command is executed, it either 1. operates on the component identified by the component index if that index is an integer, or 2. it operates on each component identified by an array of indicies, or 3. it operates on every component if the index is the boolean True. This is described by the following pseudocode:</t>

<figure><artwork><![CDATA[
if component-index is true:
    current-list = components
else if component-index is array:
    current-list = [ components[idx] for idx in component-index ]
else:
    current-list = [ components[component-index] ]
for current in current-list:
    cmd(current)
]]></artwork></figure>

<t>Try Each and Run Sequence are affected in the same way as other commands: they are invoked once for each possible Component. This means that the sequences that are arguments to Try Each and Run Sequence are NOT invoked with Component Index = True, nor are they invoked with array indices. They are only invoked with integer indices. The interpreter loops over the whole sequence, setting the Component Index to each index in turn.</t>

</section>
<section anchor="serial-processing"><name>Serialized Processing Interpreter</name>

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor MAY handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

<t>When a serialized Manifest Processor encounters a component index of True, it does not ignore any commands. It applies them to the current component on each iteration.</t>

</section>
<section anchor="parallel-processing"><name>Parallel Processing Interpreter</name>

<t>Advanced Recipients MAY make use of the Strict Order parameter and enable parallel processing of some Command Sequences, or it may reorder some Command Sequences. To perform parallel processing, once the Strict Order parameter is set to False, the Recipient may issue each or every command concurrently until the Strict Order parameter is returned to True or the Command Sequence ends. Then, it waits for all issued commands to complete before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the Recipient consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>When the manifest processor encounters any of these scenarios the parallel processing MUST halt until all issued commands have completed:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, a manifest author may collect sequences of commands in a Run Sequence command. Then, each of these sequences MAY be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence MUST begin with a Set Component Index directive with the following exception: when the index is either True or an array of indices, the Set Component Index is implied. Any further Set Component Index directives MUST cause an Abort. This allows the interpreter that issues Run Sequence commands to check that the first element is correct, then issue the sequence to a parallel execution context to handle the remainder of the sequence.</t>

</section>
</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC8152"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>The author MUST ensure that all parameters consumed by a command are set prior to invoking that command. Where Component Index = True, this means that the parameters consumed by each command MUST have been set for each Component.</t>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<t>NOTE: On systems that support only a single component, Set Component Index has no effect and can be omitted.</t>

<t>NOTE: <strong>A digest MUST always be set using Override Parameters.</strong></t>

<section anchor="template-compatibility-check"><name>Compatibility Check Template</name>

<t>The goal of the compatibility check template ensure that Recipients only install compatible images.</t>

<t>In this template all information is contained in the common sequence and the following sequence of commands is used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="uuid-identifiers"/>)</t>
  <t>Check Class Identifier condition (see <xref target="uuid-identifiers"/>)</t>
</list></t>

</section>
<section anchor="template-secure-boot"><name>Trusted Invocation Template</name>

<t>The goal of the Trusted Invocation template is to ensure that only authorized code is invoked; such as in Secure Boot or when a Trusted Application is loaded into a TEE.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>The system validation sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>Then, the run sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Run directive (see <xref target="suit-directive-run-sequence"/>)</t>
</list></t>

</section>
<section anchor="firmware-download-template"><name>Component Download Template</name>

<t>The goal of the Component Download template is to acquire and store an image.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI (see <xref target="suit-parameter-uri"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-install"><name>Install Template</name>

<t>The goal of the Install template is to use an image already stored in an identified component to copy into a second component.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: the Component Download operations are moved from the Payload Install sequence to the Payload Fetch sequence.</t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="suit-parameter-source-component"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-integrated-payload"><name>Integrated Payload Template</name>

<t>The goal of the Integrated Payload template is to install a payload that is included in the manifest envelope. It is identical to the Component Download template (<xref target="firmware-download-template"/>).</t>

<t>An implementer MAY choose to place a payload in the envelope of a manifest. The payload envelope key MUST be a string. The payload MUST be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way MAY be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4.</t>

<t>A distributor MAY choose to pre-fetch a payload and add it to the manifest envelope, using the URI as the key.</t>

</section>
<section anchor="template-load-ext"><name>Load from Nonvolatile Storage Template</name>

<t>The goal of the Load from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="a-b-template"><name>A/B Image Template</name>

<t>The goal of the A/B Image Template is to acquire, validate, and invoke one of two images, based on a test.</t>

<t>The following commands are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following commands are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

<t>If Trusted Invocation (<xref target="template-secure-boot"/>) is used, only the run sequence is added to this template, since the common sequence is populated by this template:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
    </list></t>
  <t>Run</t>
</list></t>

<t>NOTE: Any test can be used to select between images, Check Slot Condition is used in this template because it is a typical test for execute-in-place devices.</t>

</section>
</section>
<section anchor="metadata-structure"><name>Metadata Structure</name>

<t>The metadata for SUIT updates is composed of several primary constituent parts: the Envelope, Authentication Information, Manifest, and Severable Elements.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding-considerations"><name>Encoding Considerations</name>

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialized variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific values, as described in <xref target="iana"/>.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

</section>
<section anchor="envelope"><name>Envelope</name>

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="authentication-info"><name>Authenticated Manifests</name>

<t>The suit-authentication-wrapper contains a list containing a SUIT Digest Container (see <xref target="SUIT_Digest"/>) and one or more cryptographic authentication wrappers for the Manifest. These blocks are implemented as COSE_Mac_Tagged or COSE_Sign_Tagged structures with null payloads, indicating that the payload to be used is the SUIT Digest Container. This enables modular processing of the manifest. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/>. The suit-authentication-wrapper MUST come before any element in the SUIT_Envelope, regardless of canonical encoding of CBOR. All validators MUST reject any SUIT_Envelope that begins with any element other than a suit-authentication-wrapper (NOTE: key delegation MAY relax this requirement to include a delegation structure as well).</t>

<t>A SUIT_Envelope that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be a list containing only the SUIT_Digest.</t>

<t>A signing application MUST verify the suit-manifest element against the SUIT_Digest prior to signing.</t>

</section>
<section anchor="manifest-structure"><name>Manifest</name>

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
</list></t>

<t>The Text section, or any Command Sequence of the Update Procedure (Image Fetch, Image Installation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable element. Severable elements are RECOMMENDED to implement. In particular, the human-readable text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version"><name>suit-manifest-version</name>

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED to implement.</t>

</section>
<section anchor="manifest-seqnr"><name>suit-manifest-sequence-number</name>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. Each Recipient MUST reject any manifest that has a sequence number lower than its current sequence number. For convenience, an implementer MAY use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED to implement.</t>

</section>
<section anchor="manifest-reference-uri"><name>suit-reference-uri</name>

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.</t>

</section>
<section anchor="manifest-digest-text"><name>suit-text</name>

<t>suit-text SHOULD be a severable element. suit-text is a map containing two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text</t>
  <t>SUIT_Component_Identifier =&gt; map</t>
</list></t>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text MUST also be present in suit-common (<xref target="manifest-common"/>).</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The YAML (<xref target="YAML"/>)-formatted document that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A free text representation of the component version</c>
</texttable>

<t>suit-text is OPTIONAL to implement.</t>

</section>
<section anchor="manifest-common"><name>suit-common</name>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is REQUIRED to implement.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED to implement. It is REQUIRED if the optimizations described in <xref target="minimal-sigs"/> will be used. Whenever a parameter or Try Each command is required by more than one Command Sequence, placing that parameter or command in suit-common-sequence results in a smaller encoding.</t>

<section anchor="suit-component-identifier"><name>SUIT_Component_Identifier</name>

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>A Component Identifier can be trivial, such as the simple array [h'00']. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path "/usr/bin/env" would encode to ['usr','bin','env'].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands"><name>SUIT_Command_Sequence</name>

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL to implement.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation. suit-validate is REQUIRED to implement.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL to implement.</t>
  <t>Run or Boot: suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: the "run" directive. suit-run is OPTIONAL to implement.</t>
</list></t>

<t>Goals 1,2 form the Update Procedure. Goals 4,5,6 form the Invocation Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true and any failure is treated as a failure of the update/load/invocation</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>Each condition is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>A <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided. This index is a numeric index into the Component Identifier table defined at the beginning of the manifest.</t>

<t>To facilitate optional conditions, a special directive, suit-directive-try-each (<xref target="suit-directive-try-each"/>), is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/invocation, but a parameter is provided to override this behavior. See suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>).</t>

</section>
<section anchor="reporting-policy"><name>Reporting Policy</name>

<t>To facilitate construction of Reports that describe the success or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>At the completion of each command, a Manifest Processor MAY forward information about the command to a Reporting Engine, which is responsible for reporting boot or update status to a third party. The Reporting Engine is entirely implementation-defined, the reporting policy simply facilitates the Reporting Engine's interface to the SUIT Manifest Processor.</t>

<t>The information elements provided to the Reporting Engine are:</t>

<t><list style="symbols">
  <t>The reporting policy</t>
  <t>The result of the command</t>
  <t>The values of parameters consumed by the command</t>
  <t>The system information consumed by the command</t>
</list></t>

<t>Together, these elements are called a Record. A group of Records is a Report.</t>

<t>If the component index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine MUST receive one Record for each Component, in the order expressed in the Components list or the component index array.</t>

<t>This specification does not define a particular format of Records or Reports. This specification only defines hints to the Reporting Engine for which Records it should aggregate into the Report. The Reporting Engine MAY choose to ignore these hints and apply its own policy instead.</t>

<t>When used in a Invocation Procedure, the report MAY form the basis of an attestation report. When used in an Update Process, the report MAY form the basis for one or more log entries.</t>

</section>
<section anchor="secparameters"><name>SUIT_Parameters</name>

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reuse of parameters between commands, thus reducing manifest size.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Component Slot</c>
      <c>suit-parameter-component-slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Run Args</c>
      <c>suit-parameter-run-args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately.</t>

<section anchor="cbor-pen-uuid-namespace-identifier"><name>CBOR PEN UUID Namespace Identifier</name>

<t>The CBOR PEN UUID Namespace Identifier is constructed as follows:</t>

<t>It uses the OID Namespace as a starting point, then uses the CBOR OID encoding for the IANA PEN OID (1.3.6.1.4.1):</t>

<figure><artwork><![CDATA[
D8 6F                # tag(111)
   45                # bytes(5)
# Absolute OID encoding of IANA Private Enterprise Number:
#    1.3. 6. 1. 4. 1
      2B 06 01 04 01 # X.690 Clause 8.19
]]></artwork></figure>

<t>Computing a type 5 UUID from these produces:</t>

<figure><artwork><![CDATA[
NAMESPACE_CBOR_PEN = UUID5(NAMESPACE_OID, h'D86F452B06010401')
NAMESPACE_CBOR_PEN = 47fbdabb-f2e4-55f0-bb39-3620c2f6df4e
]]></artwork></figure>

</section>
<section anchor="uuid-identifiers"><name>Constructing UUIDs</name>

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient MAY match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They MUST NOT be used as assertions of identity. They are evaluated by identifier conditions (<xref target="identifier-conditions"/>).</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module's firmware has a proprietary update mechanism and doesn't support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:</t>

<figure><artwork><![CDATA[
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)
]]></artwork></figure>

<t>If the Vendor ID is a UUID, the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(Vendor ID, Class-Specific-Information)
]]></artwork></figure>

<t>If the Vendor ID is a CBOR PEN (see <xref target="suit-parameter-vendor-identifier"/>), the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(
    UUID5(NAMESPACE_CBOR_PEN, CBOR_PEN),
    Class-Specific-Information)
]]></artwork></figure>

<t>Class-specific-information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier"><name>suit-parameter-vendor-identifier</name>

<t>suit-parameter-vendor-identifier may be presented in one of two ways:</t>

<t><list style="symbols">
  <t>A Private Enterprise Number</t>
  <t>A byte string containing a UUID (<xref target="RFC4122"/>)</t>
</list></t>

<t>Private Enterprise Numbers are encoded as a relative OID, according to the definition in <xref target="I-D.ietf-cbor-tags-oid"/>. All PENs are relative to the IANA PEN: 1.3.6.1.4.1.</t>

</section>
<section anchor="suit-parameter-class-identifier"><name>suit-parameter-class-identifier</name>

<t>A RFC 4122 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier"><name>suit-parameter-device-identifier</name>

<t>A RFC 4122 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest"><name>suit-parameter-image-digest</name>

<t>A fingerprint computed over the component itself, encoded in the SUIT_Digest <xref target="SUIT_Digest"/> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size"><name>suit-parameter-image-size</name>

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-component-slot"><name>suit-parameter-component-slot</name>

<t>This parameter sets the slot index of a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its index into the component's storage area. This slot MUST be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-uri"><name>suit-parameter-uri</name>

<t>A URI Reference (<xref target="RFC3986"/>) from which to fetch a resource, encoded as a text string. CBOR Tag 32 is not used because the meaning of the text string is unambiguous in this context.</t>

</section>
<section anchor="suit-parameter-source-component"><name>suit-parameter-source-component</name>

<t>This parameter sets the source component to be used with either suit-directive-copy (<xref target="suit-directive-copy"/>) or with suit-directive-swap (<xref target="suit-directive-swap"/>). The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-run-args"><name>suit-parameter-run-args</name>

<t>This parameter contains an encoded set of arguments for suit-directive-run (<xref target="suit-directive-run"/>). The arguments MUST be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-fetch-arguments"><name>suit-parameter-fetch-arguments</name>

<t>An implementation-defined set of arguments to suit-directive-fetch (<xref target="suit-directive-fetch"/>). Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order"><name>suit-parameter-strict-order</name>

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure"><name>suit-parameter-soft-failure</name>

<t>When executing a command sequence inside suit-directive-try-each (<xref target="suit-directive-try-each"/>) or suit-directive-run-sequence (<xref target="suit-directive-run-sequence"/>) and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates. It MUST NOT be set outside of suit-directive-try-each or suit-directive-run-sequence.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom"><name>suit-parameter-custom</name>

<t>This parameter is an extension point for any proprietary, application specific conditions and directives. It MUST NOT be used in the common sequence. This effectively scopes each custom command to a particular Vendor Identifier/Class Identifier pair.</t>

</section>
</section>
<section anchor="suitcondition"><name>SUIT_Condition</name>

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Component Slot</c>
      <c>suit-condition-component-slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>Abort</c>
      <c>suit-condition-abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>Custom Condition</c>
      <c>suit-condition-custom</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition MUST report a result code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. A subsequent command or command sequence MAY continue executing if suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is set. If a condition requires additional information, this MUST be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it MUST report a failure. If a Recipient encounters an unknown condition, it MUST report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary definition by the author of a manifest processor. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions"><name>suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier</name>

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing Recipient MUST match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. Each component MAY match more than one identifier. Care is needed to ensure that manifests correctly identify their targets using these conditions. Using only a generic class ID for a device-specific firmware could result in matching devices that are not compatible.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers MUST be known to the Manifest Processor in order to evaluate compatibility.</t>

</section>
<section anchor="suit-condition-image-match"><name>suit-condition-image-match</name>

<t>Verify that the current component matches the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>) for the current component. The digest is verified against the digest specified in the Component's parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-component-slot"><name>suit-condition-component-slot</name>

<t>Verify that the slot index of the current component matches the slot index set in suit-parameter-component-slot (<xref target="suit-parameter-component-slot"/>). This condition allows a manifest to select between several images to match a target slot.</t>

</section>
<section anchor="suit-condition-abort"><name>suit-condition-abort</name>

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each (<xref target="suit-directive-try-each"/>).</t>

</section>
<section anchor="SUIT_Condition_Custom"><name>suit-condition-custom</name>

<t>suit-condition-custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="suitdirective"><name>SUIT_Directive</name>
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Run</c>
      <c>suit-directive-run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it MUST report a result code. If the Directive reports failure, then the current Command Sequence MUST be terminated.</t>

<section anchor="suit-directive-set-component-index"><name>suit-directive-set-component-index</name>

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be one of three types:</t>

<t><list style="numbers">
  <t>An unsigned integer (REQUIRED to implement in parser)</t>
  <t>A boolean (REQUIRED to implement in parser ONLY IF 2 or more components supported)</t>
  <t>An array of unsigned integers (REQUIRED to implement in parser ONLY IF 3 or more components supported)</t>
</list></t>

<t>If the following commands apply to ONE component, an unsigned integer index into the component list is used. If the following commands apply to ALL components, then the boolean value "True" is used instead of an index. If the following commands apply to more than one, but not all components, then an array of unsigned integer indices into the component list is used.
See <xref target="index-true"/> for more details.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-try-each"><name>suit-directive-try-each</name>

<t>This command runs several SUIT_Command_Sequence instances, one after another, in a strict order. Use this command to implement a "try/catch-try/catch" sequence. Manifest processors MAY implement this command.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters"><name>suit-directive-override-parameters</name>

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch"><name>suit-directive-fetch</name>

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more payloads. suit-directive-fetch retrieves each component listed in component-index. If component-index is True, instead of an integer, then all current manifest components are fetched. If component-index is an array, then all listed components are fetched.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

</section>
<section anchor="suit-directive-copy"><name>suit-directive-copy</name>

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. As described in <xref target="index-true"/> component index may be a single integer, a list of integers, or True. suit-directive-copy retrieves each component specified by the current component-index, respectively.</t>

<t>suit-directive-copy reads its source from suit-parameter-source-component (<xref target="suit-parameter-source-component"/>).</t>

<t>If either the source component parameter or the source component itself is absent, this command fails.</t>

</section>
<section anchor="suit-directive-run"><name>suit-directive-run</name>

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-run through suit-parameter-run-arguments (<xref target="suit-parameter-run-args"/>) and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-run-sequence"><name>suit-directive-run-sequence</name>

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap"><name>suit-directive-swap</name>

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. As with suit-directive-copy, if the source component is missing, this command fails.</t>

<t>If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they MUST be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="integrity-checks"><name>Integrity Check Values</name>

<t>When the Text section or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope. The keys for the envelope elements have the same values as the keys for the manifest elements.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="severable-fields"><name>Severable Elements</name>

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or "Severed" without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD NOT be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists"><name>Access Control Lists</name>

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or Component Identifier prefixes to the listed identities or identity groups. Any identity can verify an image digest, but fetching into or fetching from a Component Identifier requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the Component Identifier or Component Identifier prefix that an identity can use, and also lists the commands and parameters that the identity can use in combination with that Component Identifier.</t>

</section>
<section anchor="SUIT_Digest"><name>SUIT Digest Container</name>

<t>The SUIT digest is a CBOR List containing two elements: an algorithm identifier and a bstr containing the bytes of the digest. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The values of the algorithm identifier are defined by <xref target="I-D.ietf-cose-hash-algs"/>. The following algorithms MUST be implemented by all Manifest Processors:</t>

<t><list style="symbols">
  <t>SHA-256 (-16)</t>
</list></t>

<t>The following algorithms MAY be implemented in a Manifest Processor:</t>

<t><list style="symbols">
  <t>SHAKE128 (-18)</t>
  <t>SHA-384 (-43)</t>
  <t>SHA-512 (-44)</t>
  <t>SHAKE256 (-45)</t>
</list></t>

</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate CBOR tag 107 in the CBOR Tags registry for the SUIT Envelope.</t>
  <t>allocate CBOR tag 1070 in the CBOR Tags registry for the SUIT Manifest.</t>
  <t>allocate media type application/suit-envelope in the Media Types registry.</t>
  <t>setup several registries as described below.</t>
</list></t>

<t>IANA is requested to setup a registry for SUIT manifests.
Several registries defined in the subsections below need to be created.</t>

<t>For each registry, values 0-23 are Standards Action, 24-255 are IETF Review, 256-65535 are Expert Review, and 65536 or greater are First Come First Served.</t>

<t>Negative values -23 to 0 are Experimental Use, -24 and lower are Private Use.</t>

<section anchor="suit-commands"><name>SUIT Commands</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>2</c>
      <c>Class Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>3</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>12</c>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>13</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>14</c>
      <c>Abort</c>
      <c>&#160;</c>
      <c>15</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>16</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>17</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>18</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>21</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>22</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>23</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>24</c>
      <c>Device Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>25</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>31</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>32</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>33</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

</section>
<section anchor="suit-parameters"><name>SUIT Parameters</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>2</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>3</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>12</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>13</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>14</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>18</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>21</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>22</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>23</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>24</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

</section>
<section anchor="suit-text-values"><name>SUIT Text Values</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Manifest Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Update Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Manifest JSON Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Manifest YAML Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-component-text-values"><name>Â SUIT Component Text Values</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Model Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Vendor Domain</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Model Info</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>5</c>
      <c>Component Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>6</c>
      <c>Component Version</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>7</c>
      <c>Component Version Required</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="I-D.ietf-suit-information-model"/> documents.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Ãyvind RÃ¸nningstad</t>
  <t>Frank Audun KvamtrÃ¸</t>
  <t>Krzysztof ChruÅciÅski</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC4122' target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author fullname='P. Leach' initials='P.' surname='Leach'><organization/></author>
<author fullname='M. Mealling' initials='M.' surname='Mealling'><organization/></author>
<author fullname='R. Salz' initials='R.' surname='Salz'><organization/></author>
<date month='July' year='2005'/>
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC3986' target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'><organization/></author>
<author fullname='R. Fielding' initials='R.' surname='Fielding'><organization/></author>
<author fullname='L. Masinter' initials='L.' surname='Masinter'><organization/></author>
<date month='January' year='2005'/>
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference anchor='RFC9019' target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>


<reference anchor='I-D.ietf-suit-information-model'>
   <front>
      <title>A Manifest Information Model for Firmware Updates in IoT Devices</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz'>
	 <organization>Fraunhofer SIT</organization>
      </author>
      <date day='8' month='July' year='2021'/>
      <abstract>
	 <t>   Vulnerabilities with Internet of Things (IoT) devices have raised the
   need for a reliable and secure firmware update mechanism that is also
   suitable for constrained devices.  Ensuring that devices function and
   remain secure over their service life requires such an update
   mechanism to fix vulnerabilities, to update configuration settings,
   as well as adding new functionality.

   One component of such a firmware update is a concise and machine-
   processable meta-data document, or manifest, that describes the
   firmware image(s) and offers appropriate protection.  This document
   describes the information that must be present in the manifest.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-13'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-information-model-13.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-cose-hash-algs'>
   <front>
      <title>CBOR Object Signing and Encryption (COSE): Hash Algorithms</title>
      <author fullname='Jim Schaad'>
	 <organization>August Cellars</organization>
      </author>
      <date day='14' month='September' year='2020'/>
      <abstract>
	 <t>   The CBOR Object Signing and Encryption (COSE) syntax
   [I-D.ietf-cose-rfc8152bis-struct] does not define any direct methods
   for using hash algorithms.  There are, however, circumstances where
   hash algorithms are used, such as indirect signatures where the hash
   of one or more contents are signed, and X.509 certificate or other
   object identification by the use of a fingerprint.  This document
   defines a set of hash algorithms that are identified by COSE
   Algorithm Identifiers.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cose-hash-algs-09'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cose-hash-algs-09.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-teep-architecture'>
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname='Mingliang Pei'>
	 <organization>Broadcom</organization>
      </author>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Dave Thaler'>
	 <organization>Microsoft</organization>
      </author>
      <author fullname='David Wheeler'>
	 <organization>Amazon</organization>
      </author>
      <date day='12' month='July' year='2021'/>
      <abstract>
	 <t>   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-15'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-teep-architecture-15.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-cbor-tags-oid'>
   <front>
      <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
      <author fullname='Carsten Bormann'>
	 <organization>UniversitÃ¤t Bremen TZI</organization>
      </author>
      <date day='21' month='May' year='2021'/>
      <abstract>
	 <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.

 This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cbor-tags-oid-08'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Firmware Encryption with SUIT Manifests</title>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='25' month='October' year='2021'/>
      <abstract>
	 <t>   This document specifies a firmware update mechanism where the
   firmware image is encrypted.  Firmware encryption uses the IETF SUIT
   manifest with key establishment provided by the hybrid public-key
   encryption (HPKE) scheme and the AES Key Wrap (AES-KW) with a pre-
   shared key-encryption key.  Encryption of the firmware image is
   encrypted using AES-GCM or AES-CCM.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-firmware-encryption-02.txt' type='TXT'/>
</reference>



<reference anchor='RFC7228' target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='M. Ersue' initials='M.' surname='Ersue'><organization/></author>
<author fullname='A. Keranen' initials='A.' surname='Keranen'><organization/></author>
<date month='May' year='2014'/>
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>


<reference anchor="YAML" target="https://yaml.org/">
  <front>
    <title>YAML Ain't Markup Language</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<t>To be valid, the following CDDL MUST have the COSE CDDL appended to it. The COSE CDDL can be obtained by following the directions in <xref target="RFC8152"/>, section 1.4.</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Envelope_Tagged = #6.107(SUIT_Envelope)
SUIT_Envelope = {
  ? suit-delegation => bstr .cbor SUIT_Delegation,
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * SUIT_Integrated_Payload,
  * $$SUIT_Envelope_Extensions,
  * (int => bstr)
}

SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]

SUIT_Digest = [
  suit-digest-algorithm-id : suit-cose-hash-algs,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

SUIT_Severable_Manifest_Members = (
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  * $$SUIT_severable-members-extensions,
)

SUIT_Integrated_Payload = (suit-integrated-payload-key => bstr)
suit-integrated-payload-key = tstr

SUIT_Manifest_Tagged = #6.1070(SUIT_Manifest)

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Severable_Members_Choice,
    SUIT_Unseverable_Members,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-run => bstr .cbor SUIT_Command_Sequence,
  * $$unseverable-manifest-member-extensions,
)

SUIT_Severable_Members_Choice = (
  ? suit-payload-fetch => \
    bstr .cbor SUIT_Command_Sequence / SUIT_Digest,
  ? suit-install => bstr .cbor SUIT_Command_Sequence / SUIT_Digest,
  ? suit-text => bstr .cbor SUIT_Command_Sequence / SUIT_Digest,
  * $$severable-manifest-members-choice-extensions
)

SUIT_Common = {
    ? suit-components             => SUIT_Components,
    ? suit-common-sequence        => bstr .cbor SUIT_Common_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Components           = [ + SUIT_Component_Identifier ]

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
    * $$SUIT_Dependency-extensions,
}

;REQUIRED to implement:
suit-cose-hash-algs /= cose-alg-sha-256

;OPTIONAL to implement:
suit-cose-hash-algs /= cose-alg-shake128
suit-cose-hash-algs /= cose-alg-sha-384
suit-cose-hash-algs /= cose-alg-sha-512
suit-cose-hash-algs /= cose-alg-shake256

SUIT_Component_Identifier =  [* bstr]

SUIT_Common_Sequence = [
    + ( SUIT_Condition // SUIT_Common_Commands )
]

SUIT_Common_Commands //= (suit-directive-set-component-index,  IndexArg)
SUIT_Common_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Common_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Common_Commands //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})

IndexArg /= uint
IndexArg /= bool
IndexArg /= [+uint]

SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-component-slot,    SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-abort,             SUIT_Rep_Policy)

SUIT_Directive //= (suit-directive-set-component-index,  IndexArg)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency, SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-copy,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-swap,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-run,               SUIT_Rep_Policy)

SUIT_Directive_Try_Each_Argument = [
    2* bstr .cbor SUIT_Command_Sequence,
    ?nil
]

SUIT_Rep_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

SUIT_Parameters //= (suit-parameter-vendor-identifier =>
    (RFC4122_UUID / cbor-pen))
cbor-pen = #6.112(bstr)

SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-component-slot => uint)

SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-run-args => bstr)

SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)

SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)

RFC4122_UUID = bstr .size 16

SUIT_Text_Map = {
    SUIT_Text_Keys,
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    }
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

suit-authentication-wrapper = 2
suit-manifest = 3

;REQUIRED to implement:
cose-alg-sha-256 = -16

;OPTIONAL to implement:
cose-alg-shake128 = -18
cose-alg-sha-384 = -43
cose-alg-sha-512 = -44
cose-alg-shake256 = -45

suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text = 13

suit-components = 2
suit-common-sequence = 4

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-component-slot    = 5

suit-condition-abort                    = 14
suit-condition-device-identifier        = 24

suit-directive-set-component-index      = 12
suit-directive-try-each                 = 15
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-swap                     = 31
suit-directive-run-sequence             = 32

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-component-slot    = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14

suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-run-args          = 23

suit-parameter-device-identifier = 24

suit-parameter-custom = nint

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
]]></sourcecode></figure>

</section>
<section anchor="examples"><name>B. Examples</name>

<t>The following examples demonstrate a small subset of the functionality of the manifest. Even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<t>Note that reporting policies are declared for each non-flow-control command in these examples. The reporting policies used in the examples are described in the following tables.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Label</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Rec-Pass</c>
      <c>suit-send-record-on-failure</c>
      <c>Rec-Fail</c>
      <c>suit-send-sysinfo-success</c>
      <c>Sys-Pass</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Sys-Fail</c>
</texttable>

<texttable>
      <ttcol align='left'>Command</ttcol>
      <ttcol align='left'>Sys-Fail</ttcol>
      <ttcol align='left'>Sys-Pass</ttcol>
      <ttcol align='left'>Rec-Fail</ttcol>
      <ttcol align='left'>Rec-Pass</ttcol>
      <c>suit-condition-vendor-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-class-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-image-match</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-component-slot</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>1</c>
      <c>suit-directive-fetch</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-copy</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-run</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
</texttable>

<section anchor="example-0-secure-boot"><name>Example 0: Secure Boot</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
</list></t>

<t>It also serves as the minimum example.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'a6c4590ac53043a98e8c4106e1e31b305516d7cf0a655eddfac6d45c810e036a'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'd11a2dd9610fb62a707335f58407922570
9f96e8117e7eeed98a2f207d05c8ecfba1755208f6abea977b8a6efe3bc2ca3215e119
3be201467d052b42db6b7287'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:0,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / validate / 10:<<[
                / condition-image-match / 3,15
            ]>>,
            / run / 12:<<[
                / directive-run / 23,2
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  161</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820a6c4590ac53043a98e8c4106e1e31b3055
16d7cf0a655eddfac6d45c810e036a035871a50101020003585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f0a4382030f0c43821702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  237</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820a6c4590ac53043a98e8c4106e1e31b3055
16d7cf0a655eddfac6d45c810e036a584ad28443a10126a0f65840d11a2d
d9610fb62a707335f584079225709f96e8117e7eeed98a2f207d05c8ecfb
a1755208f6abea977b8a6efe3bc2ca3215e1193be201467d052b42db6b72
87035871a50101020003585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f0a4382030f0c43821702
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload"><name>Example 1: Simultaneous Download and Installation of Payload</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Simultaneous download and installation of payload. No secure boot is present in this example to demonstrate a download-only manifest.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'60c61d6eb7a1aaeddc49ce8157a55cff0821537eeee77a4ded44155b03045132'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'5249dacaf0ffc8326931b09586eb7e3769
e71a0e6a40ad8153db4980db9b05bd1742ddb46085fa11e62b65a79895c12ac7abe266
8ccc5afdd74466aed7bca389'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:1,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / install / 9:<<[
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
            / validate / 10:<<[
                / condition-image-match / 3,15
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  196</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f582060c61d6eb7a1aaeddc49ce8157a55cff08
21537eeee77a4ded44155b03045132035894a50101020103585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f0958258613a115781b687474703a2f2f6578616d706c652e636f6d2f66
696c652e62696e1502030f0a4382030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  272</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f582060c61d6eb7a1aaeddc49ce8157a55cff08
21537eeee77a4ded44155b03045132584ad28443a10126a0f658405249da
caf0ffc8326931b09586eb7e3769e71a0e6a40ad8153db4980db9b05bd17
42ddb46085fa11e62b65a79895c12ac7abe2668ccc5afdd74466aed7bca3
89035894a50101020103585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f0958258613a115781b68747470
3a2f2f6578616d706c652e636f6d2f66696c652e62696e1502030f0a4382
030f
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-secure-boot-severed-fields"><name>Example 2: Simultaneous Download, Installation, Secure Boot, Severed Fields</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>This example also demonstrates severable elements (<xref target="ovr-severable"/>), and text (<xref target="manifest-digest-text"/>).</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'e45dcdb2074b951f1c88b866469939c2a83ed433a31fc7dfcb3f63955bd943ec'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'b4fd3a6a18fe1062573488cf24ac96ef9f
30ac746696e50be96533b356b8156e4332587fe6f4e8743ae525d72005fddd4c1213d5
5a8061b2ce67b83640f4777c'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:2,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / install / 9:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'3ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d2'
            ],
            / validate / 10:<<[
                / condition-image-match / 3,15
            ]>>,
            / run / 12:<<[
                / directive-run / 23,2
            ]>>,
            / text / 13:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'2bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918'
            ],
        }>>,
        / install / 9:<<[
            / directive-set-parameters / 19,{
                / uri /
21:'http://example.com/very/long/path/to/file/file.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ]>>,
        / text / 13:<<{
            [h'00']:{
                    / vendor-domain / 3:'arm.com',
                    / component-description / 5:'This component is a
demonstration. The digest is a sample pattern, not a real one.',
                }
        }>>,
    })
]]></artwork></figure>

<t>Total size of the Envelope without COSE authentication object or Severable Elements:  235</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820e45dcdb2074b951f1c88b866469939c2a8
3ed433a31fc7dfcb3f63955bd943ec0358bba70101020203585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f09822f58203ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc
9f949d84ea0e18d20a4382030f0c438217020d822f58202bfc4d0cc6680b
e7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918
]]></artwork></figure>
<t>Total size of the Envelope with COSE authentication object but without Severable Elements:  311</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820e45dcdb2074b951f1c88b866469939c2a8
3ed433a31fc7dfcb3f63955bd943ec584ad28443a10126a0f65840b4fd3a
6a18fe1062573488cf24ac96ef9f30ac746696e50be96533b356b8156e43
32587fe6f4e8743ae525d72005fddd4c1213d55a8061b2ce67b83640f477
7c0358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f09822f58203ee96dc79641970a
e46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a4382030f0c
438217020d822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf918
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object and Severable Elements:  894</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba4025873825824822f5820e45dcdb2074b951f1c88b866469939c2a8
3ed433a31fc7dfcb3f63955bd943ec584ad28443a10126a0f65840b4fd3a
6a18fe1062573488cf24ac96ef9f30ac746696e50be96533b356b8156e43
32587fe6f4e8743ae525d72005fddd4c1213d55a8061b2ce67b83640f477
7c0358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f09822f58203ee96dc79641970a
e46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a4382030f0c
438217020d822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf91809583c8613a1157832687474703a2f2f657861
6d706c652e636f6d2f766572792f6c6f6e672f706174682f746f2f66696c
652f66696c652e62696e1502030f0d590204a20179019d2323204578616d
706c6520323a2053696d756c74616e656f757320446f776e6c6f61642c20
496e7374616c6c6174696f6e2c2053656375726520426f6f742c20536576
65726564204669656c64730a0a2020202054686973206578616d706c6520
636f766572732074686520666f6c6c6f77696e672074656d706c61746573
3a0a202020200a202020202a20436f6d7061746962696c69747920436865
636b20287b7b74656d706c6174652d636f6d7061746962696c6974792d63
6865636b7d7d290a202020202a2053656375726520426f6f7420287b7b74
656d706c6174652d7365637572652d626f6f747d7d290a202020202a2046
69726d7761726520446f776e6c6f616420287b7b6669726d776172652d64
6f776e6c6f61642d74656d706c6174657d7d290a202020200a2020202054
686973206578616d706c6520616c736f2064656d6f6e7374726174657320
736576657261626c6520656c656d656e747320287b7b6f76722d73657665
7261626c657d7d292c20616e64207465787420287b7b6d616e6966657374
2d6469676573742d746578747d7d292e814100a2036761726d2e636f6d05
78525468697320636f6d706f6e656e7420697320612064656d6f6e737472
6174696f6e2e205468652064696765737420697320612073616d706c6520
7061747465726e2c206e6f742061207265616c206f6e652e
]]></artwork></figure>

</section>
<section anchor="example-3-ab-images"><name>Example 3: A/B images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>A/B Image Template (<xref target="a-b-template"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'7c9b3cb72c262608a42f944d59d659ff2b801c78af44def51b8ff51e9f45721b'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'e33d618df0ad21e609529ab1a876afb231
faff1d6a3189b5360324c2794250b87cf00cf83be50ea17dc721ca85393cd8e839a066
d5dec0ad87a903ab31ea9afa'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:3,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    } ,
                    / directive-try-each / 15,[
                        <<[
                            / directive-override-parameters / 20,{
                                / offset / 5:33792,
                            } ,
                            / condition-component-offset / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<<[
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                                ]>>,
                                / image-size / 14:34768,
                            }
                        ]>> ,
                        <<[
                            / directive-override-parameters / 20,{
                                / offset / 5:541696,
                            } ,
                            / condition-component-offset / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<<[
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                                ]>>,
                                / image-size / 14:76834,
                            }
                        ]>>
                    ] ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / install / 9:<<[
                / directive-try-each / 15,[
                    <<[
                        / directive-set-parameters / 19,{
                            / offset / 5:33792,
                        } ,
                        / condition-component-offset / 5,5 ,
                        / directive-set-parameters / 19,{
                            / uri / 21:'http://example.com/file1.bin',
                        }
                    ]>> ,
                    <<[
                        / directive-set-parameters / 19,{
                            / offset / 5:541696,
                        } ,
                        / condition-component-offset / 5,5 ,
                        / directive-set-parameters / 19,{
                            / uri / 21:'http://example.com/file2.bin',
                        }
                    ]>>
                ] ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
            / validate / 10:<<[
                / condition-image-match / 3,15
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  332</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f58207c9b3cb72c262608a42f944d59d659ff2b
801c78af44def51b8ff51e9f45721b0359011ba5010102030358aaa20281
8141000458a18814a20150fa6b4a53d5ad5fdfbe9de663e4d41ffe025014
92af1425695e48bf429b2d51f2ab450f8258368614a105198400050514a2
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0583a8614a1051a00084400050514a20358
24822f58200123456789abcdeffedcba9876543210001122334455667788
99aabbccddeeff0e1a00012c22010f020f095861860f82582a8613a10519
8400050513a115781c687474703a2f2f6578616d706c652e636f6d2f6669
6c65312e62696e582c8613a1051a00084400050513a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65322e62696e1502030f0a4382
030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  408</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f58207c9b3cb72c262608a42f944d59d659ff2b
801c78af44def51b8ff51e9f45721b584ad28443a10126a0f65840e33d61
8df0ad21e609529ab1a876afb231faff1d6a3189b5360324c2794250b87c
f00cf83be50ea17dc721ca85393cd8e839a066d5dec0ad87a903ab31ea9a
fa0359011ba5010102030358aaa202818141000458a18814a20150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450f8258368614a105198400050514a2035824822f582000112233445566
778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d058
3a8614a1051a00084400050514a2035824822f58200123456789abcdeffe
dcba987654321000112233445566778899aabbccddeeff0e1a00012c2201
0f020f095861860f82582a8613a105198400050513a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65312e62696e582c8613a1051a
00084400050513a115781c687474703a2f2f6578616d706c652e636f6d2f
66696c65322e62696e1502030f0a4382030f
]]></artwork></figure>

</section>
<section anchor="example-4-load-from-external-storage"><name>Example 4: Load from External Storage</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>Install (<xref target="template-install"/>)</t>
  <t>Load (<xref target="template-load-ext"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'15736702a00f510805dcf89d6913a2cfb417ed414faa760f974d6755c68ba70a'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'3ada2532326d512132c388677798c24ffd
cc979bfae2a26b19c8c8bbf511fd7dd85f1501662c1a9e1976b759c4019bab44ba5434
efb45d3868aedbca593671f3'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:4,
            / common / 3:<<{
                / components / 2:[
                    [h'00'] ,
                    [h'02'] ,
                    [h'01']
                ],
                / common-sequence / 4:<<[
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / payload-fetch / 8:<<[
                / directive-set-component-index / 12,1 ,
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
            / install / 9:<<[
                / directive-set-component-index / 12,0 ,
                / directive-set-parameters / 19,{
                    / source-component / 22:1 / [h'02'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ]>>,
            / validate / 10:<<[
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15
            ]>>,
            / load / 11:<<[
                / directive-set-component-index / 12,2 ,
                / directive-set-parameters / 19,{
                    / image-digest / 3:<<[
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ]>>,
                    / image-size / 14:76834,
                    / source-component / 22:0 / [h'00'] /,
                    / compression-info / 19:<<{
                        / compression-algorithm / 1:1 / "gzip" /,
                    }>>,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ]>>,
            / run / 12:<<[
                / directive-set-component-index / 12,2 ,
                / directive-run / 23,2
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  292</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f582015736702a00f510805dcf89d6913a2cfb4
17ed414faa760f974d6755c68ba70a0358f4a801010204035867a2028381
4100814102814101045858880c0014a40150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824822f582000
112233445566778899aabbccddeeff0123456789abcdeffedcba98765432
100e1987d0010f020f085827880c0113a115781b687474703a2f2f657861
6d706c652e636f6d2f66696c652e62696e1502030f094b880c0013a11601
1602030f0a45840c00030f0b583d880c0213a4035824822f582001234567
89abcdeffedcba987654321000112233445566778899aabbccddeeff0e1a
00012c221343a1010116001602030f0c45840c021702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  368</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f582015736702a00f510805dcf89d6913a2cfb4
17ed414faa760f974d6755c68ba70a584ad28443a10126a0f658403ada25
32326d512132c388677798c24ffdcc979bfae2a26b19c8c8bbf511fd7dd8
5f1501662c1a9e1976b759c4019bab44ba5434efb45d3868aedbca593671
f30358f4a801010204035867a20283814100814102814101045858880c00
14a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48
bf429b2d51f2ab45035824822f582000112233445566778899aabbccddee
ff0123456789abcdeffedcba98765432100e1987d0010f020f085827880c
0113a115781b687474703a2f2f6578616d706c652e636f6d2f66696c652e
62696e1502030f094b880c0013a116011602030f0a45840c00030f0b583d
880c0213a4035824822f58200123456789abcdeffedcba98765432100011
2233445566778899aabbccddeeff0e1a00012c221343a101011600160203
0f0c45840c021702
]]></artwork></figure>

</section>
<section anchor="example-5-two-images"><name>Example 5: Two Images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Furthermore, it shows using these templates with two images.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'd1e73f16e4126007bc4d804cd33b0209fbab34728e60ee8c00f3387126748dd2'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'b7ae0a46a28f02e25cda6d9a255bbaf863
30141831fae5a78012d648bc6cee55102e0f1890bdeacc3adaa4fae0560f83a45eecae
65cabce642f56d84ab97ef8d'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:5,
            / common / 3:<<{
                / components / 2:[
                    [h'00'] ,
                    [h'01']
                ],
                / common-sequence / 4:<<[
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15 ,
                    / directive-set-component-index / 12,1 ,
                    / directive-override-parameters / 20,{
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                        ]>>,
                        / image-size / 14:76834,
                    }
                ]>>,
            }>>,
            / install / 9:<<[
                / directive-set-component-index / 12,0 ,
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file1.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file2.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
            / validate / 10:<<[
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / condition-image-match / 3,15
            ]>>,
            / run / 12:<<[
                / directive-set-component-index / 12,0 ,
                / directive-run / 23,2
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  306</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820d1e73f16e4126007bc4d804cd33b0209fb
ab34728e60ee8c00f3387126748dd203590101a601010205035895a20282
8141008141010458898c0c0014a40150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820001122
33445566778899aabbccddeeff0123456789abcdeffedcba98765432100e
1987d0010f020f0c0114a2035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c2209584f90
0c0013a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65
312e62696e1502030f0c0113a115781c687474703a2f2f6578616d706c65
2e636f6d2f66696c65322e62696e1502030f0a49880c00030f0c01030f0c
45840c001702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  382</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820d1e73f16e4126007bc4d804cd33b0209fb
ab34728e60ee8c00f3387126748dd2584ad28443a10126a0f65840b7ae0a
46a28f02e25cda6d9a255bbaf86330141831fae5a78012d648bc6cee5510
2e0f1890bdeacc3adaa4fae0560f83a45eecae65cabce642f56d84ab97ef
8d03590101a601010205035895a202828141008141010458898c0c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab45035824822f582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d0010f020f0c0114a2035824
822f58200123456789abcdeffedcba987654321000112233445566778899
aabbccddeeff0e1a00012c2209584f900c0013a115781c687474703a2f2f
6578616d706c652e636f6d2f66696c65312e62696e1502030f0c0113a115
781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62696e
1502030f0a49880c00030f0c01030f0c45840c001702
]]></artwork></figure>

</section>
</section>
<section anchor="design-rationale"><name>C. Design Rational</name>

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted invocation operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted invocation of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency's commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope"><name>C.1 Design Rationale: Envelope</name>

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of Severable Elements (<xref target="severable-fields"/>)</t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers"><name>C.2 Byte String Wrappers</name>

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the common sequence. The common sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>
<section anchor="implementation-matrix"><name>D. Implementation Conformance Matrix</name>

<t>This section summarizes the functionality a minimal manifest processor
implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Class Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Device Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>OPTIONAL</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>REQUIRED</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>Abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>OPTIONAL</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>REQUIRED if more than one component</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>OPTIONAL</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>REQUIRED</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>REQUIRED for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>OPTIONAL</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>REQUIRED for Bootloader</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>OPTIONAL</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>REQUIRED</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>REQUIRED</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>REQUIRED</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>REQUIRED</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>REQUIRED for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>OPTIONAL</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>OPTIONAL</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>OPTIONAL</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>OPTIONAL</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>OPTIONAL</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c>OPTIONAL</c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
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
wsqQznZQHV60JLpVTSLDCsEuHcoOvs47sLQdDAjv1Oa2fddksKRer+PFG85E
vtEw9TSXnzRMTa/6aatxrGBdIbWftClPyd791GEoPUE3cP+rDdOpIcUnXuj1
Q3zyVV4/7Cdd4vVDSqCH82q1ocL6cT6ODGwwILFdD5zmBsNwUMZfPQwa436D
YQAvKqM8iKL1czVP2qguyzexyMCZAJUyb5qdK2ASHPTHFMXL8oiWP8DfJGTI
/xF6/d2W5Y0KQBtogXVRe5I6CmT8Qbe5hUZXnXjyFrUoVgUqRZ1BRm1N7Ci7
hk91TM4W8utKz37xJY2+JVl931Cy3Z2ACrfCXdje7ug/RdgcjrZYaN1owlqi
VuAC3am2NxrFtWB2Wnhl5kE/ZjxyQhZZdrN+Pom2fTfqjKKtSLSbzVaLGv+o
tZr6fEbLsFG3eubb2oltBiphH75ER8odZGmYW/iIpbj2Y9oFDLIp5JwQRtOz
4+H4F4JBhAVDZa9V/2MkH/vrN/HKaBLWsOJfSke/s22Lw1CDD0Zaa2ghQrgn
8urtxbLlrljnaknc5mRQqbZuby6jS230DUdHQrTR6PbquMkLN2juKqm85iTL
N3R4G6+aJHhzho2gtYbATVbHZjSv7TpI6dg/FSj2s4X54darcD5rbO1vvL7d
tVr/QCTOuVUN7raL1VX5GVr3hmuk6Jq4TB2OOlXpGH/e2+1UhWH6ea9Tk33p
9/2Ov3KDGV8Ew8qXmsIyMHK2qHF29U13FY9fBHsaDO0pvYIj1dCK7io47lR0
gcFw0HH0fMFQlkQ6vEDFfFZcBcNdk+jXqGkqS7TaIVyU/WJFMPiA9uxayuCG
J17hsyZ/ujt/U8Zqud0Kt9ayQ9Rov7Yoztbc8B+sba/auP4EmcajvXr8dkNa
UB16VG1sEoY1rGN/kzxWuo5Bc3afxh2Oho2ZY1oa19aMKNTWeLc5nL259W5t
HV5UfaXxqJYYYA1mrWH4LGa1JHvXCWsjrcGsFiahcu4tDIG2qs3osIUWLfZq
U3o2isoZr+HenMNt4NKaTnUtV2bvQp3pcilD+/Nmj6/9UbOn1/6U2cNrf8Ac
MraOlfEW1MK/eAtqYVr8BTVzKkrs17EnwX5jG48nCQ7QyI++E0/6wTmHkGLY
gUSTStEXx39APwRRPOdoUHKloEBHdpE34ZlTyUQfziSA14+6Pb/jjCj0Ajel
rZiEqUnIMs9M2GcRu377tDyzKKqWwtG+toqHXfz52dMriipbwLucDzEs7YS8
HNCLpNd7cv7VxYvg1euL706vz4Nvzr+nXzuXF199fXpzfnr55PKrJ6ufv7q6
3DuGv786O5N/359//eSrwX14f/Hk9I9/vDld/NP3P/3T2bdfPb/cH3z35Kxz
9tP3V+WfPx8c//TVPF394VW+ePr8+ted2+TPL29fn744Oz29Op9l55jk5Oef
j/9w+90vSXz4Ipvf/fzz86PX5V3n1ecgtf/pT5Pb6O40vy6m37wti7Pvz3+5
/+ZFmb/4+s/J8csnuy8+v09Pvy2LX+evR7uXe+U3yZ94W+cvntY3Rad+XXNp
WSzHs2RC8XpuALuXKaiwAG+A3rdPnl+cOcB79vb+/P77r7/J/uni158GZ6d/
/P5C/v309I+TpwCu89s/hE+++nnv+c8/3119/93k+3T5a/iH/ODnZOd83Bn/
ujPfy7+bpRd/Ht9/Mzj8erV4Pj6dP7mcnP00Dn99Pdy7u76Jfp0Wf7h/9nx8
uf82Kn99+fwqm9188YWz/8qyaPuc/4C3wlVirr4+RY5Noi2FxiseY/xEVsYa
3e4lgExiTTYJb0gukav0WKdAa6aAfxqPavMPpxVgsh9Pw8BuNVIP1b08Bj6q
U7YnvB+iJ3ofkMemumd2amodJImitkF3zknvFbyFjc2mxgMam6E/tNOsqgJ6
H1ytiupYVSUQN6KROpqCw/7mjOHM6a7S8Tl9721wfWXOofv/H+QyH2jv18Nc
P3S12uVAWg5s63odgYHbsJEpe6ANVwnwm6BntJD9YHDCfqNx8CTDSi1c51Y+
Ovk1HCSL4Rv6ZJLz4Zlbc0eSc2y9e6eNaNvmOydk+fCBguHsrF4H8uaMe5jJ
7QMZnkqO7CT/b5M1ZJ6kyXw515Wy21oH/dKsLmMnaBEpd4LRye9//0PHfVz5
2p8E1d9lINdpagclSvjfRyDsAeF4FOx0G7p4zlM7ndvH4cFkb/94EE72dwd7
u+HxUXw02RsODuJhvDsc7w7294cH0eFkOggP9vfjKJqGk4Nob39yNBzEg92D
8LE3yY9ffunPajJr4B6GR1v1bfC6xMc3xn38/vfvGluZTcP/Dk96h7jZ86u2
veJ/H6rLscMsU3fK5gk/tHUWuRb+9QxBngIJaFnBjoUA/Pv2cTQchqMoOj4Y
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

-->

</rfc>

