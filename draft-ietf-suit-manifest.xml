<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-17" category="std">

  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>

    <date year="2022" month="April" day="28"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about code/data obtained by a recipient (chiefly
the firmware for an IoT device), where to find the that code/data, the
devices to which it applies, and cryptographic information protecting
the manifest. Software updates and Trusted Invocation both tend to use
sequences of common operations, so the manifest encodes those sequences
of operations, rather than declaring the metadata.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata describing one or more code or data payloads and how to:</t>

<t><list style="symbols">
  <t>Obtain any dependencies</t>
  <t>Obtain the payload(s)</t>
  <t>Install them</t>
  <t>Verify them</t>
  <t>Load them into memory</t>
  <t>Invoke them</t>
</list></t>

<t>This specification defines the SUIT manifest format and it is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="RFC9124"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>a Firmware Author to reason about releasing a firmware.</t>
  <t>a Network Operator to reason about compatibility of a firmware.</t>
  <t>a Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>a Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>a device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>a device to reason about the applicability of a firmware.</t>
  <t>a device to reason about the installation of a firmware.</t>
  <t>a device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="RFC9019"/> and the threats, requirements, and user stories in <xref target="RFC9124"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or Trusted Invocation are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In this document, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the language is tailored to software updates and Trusted Invocation.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and Trusted Invocation use cases, there is nothing in the SUIT Information Model (<xref target="RFC9124"/>) that restricts its use to only those use cases. Other use cases include the management of trusted applications (TAs) in a Trusted Execution Environment (TEE), as discussed in <xref target="I-D.ietf-teep-architecture"/>.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient's storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document"><name>How to use this Document</name>

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rational is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> gives a summarize of the mandatory-to-implement features of this specification.</t>

<t>This specification covers the core features of SUIT. Additional specifications describe functionality of advanced use cases, such as:</t>

<t><list style="symbols">
  <t>Firmware Encryption is covered in <xref target="I-D.ietf-suit-firmware-encryption"/></t>
  <t>Update Management is covered in <xref target="I-D.ietf-suit-update-management"/></t>
  <t>Features, such as dependencies, key delegation, multiple processors, required by the use of multiple trust domains are covered in <xref target="I-D.ietf-suit-trust-domains"/></t>
  <t>Secure reporting of the update status is covered in <xref target="I-D.ietf-suit-report"/></t>
  <t>Compression of firmware images</t>
</list></t>

</section>
<section anchor="background"><name>Background</name>

<t>Distributing software updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="RFC9019"/>. The security aspects are described in <xref target="RFC9124"/>.</t>

<section anchor="iot-firmware-update-constraints"><name>IoT Firmware Update Constraints</name>

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivered to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model"><name>SUIT Workflow Model</name>

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Invocation Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Run image(s).</t>
</list></t>

<t>If verification and running is implemented in a bootloader, then the bootloader MUST also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader may add its own authentication, e.g. a Message Authentication Code (MAC), to the manifest in order to prevent further verifications.</t>

</section>
</section>
<section anchor="metadata-structure-overview"><name>Metadata Structure Overview</name>

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest..</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, such as affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable elements.</t>
    </list></t>
  <t>Severable elements (see <xref target="ovr-severable"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| Integrated Payloads     |          | Structure Version            |
+-------------------------+          | Sequence Number              |
                                     | Reference to Full Manifest   |
                               +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Components IDs          |      +-> +-----------------------+
| Common Command Sequence ---------> | Command Sequence      |
+-------------------------+          +-----------------------+
                                     | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope"><name>Envelope</name>

<t>The SUIT Envelope is a container that encloses the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that would add substantial complexity with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-auth"><name>Authentication Block</name>

<t>The Authentication Block contains a bstr-wrapped SUIT Digest Container, see <xref target="SUIT_Digest"/>, and one or more <xref target="RFC8152"/> CBOR Object Signing and Encryption (COSE) authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>Each of these objects is used in detached payload mode. The payload is the bstr-wrapped SUIT_Digest.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest"><name>Manifest</name>

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical"><name>Critical Metadata</name>

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which manifest is newest and whether the structure version is supported. It also MAY provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, and <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common"><name>Common</name>

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of two parts: a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence MUST NOT have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/> for more detail.</t>

</section>
<section anchor="ovr-commands"><name>Command Sequences</name>

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Payload Fetch, and Payload Installation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Invocation Command Sequences are: System Validation, Image Loading, and Image Invocation. An Invocation Procedure is the complete set of each Invocation Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command (dependencies are not defined in this specification).</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity"><name>Integrity Check Values</name>

<t>To enable <xref target="ovr-severable"/>, there needs to be a mechanism to verify integrity of any metadata outside the manifest. Integrity Check Values are used to verify the integrity of metadata that is not contained in the manifest. This MAY include Severable Command Sequences, or Text data. Integrated Payloads are integrity-checked using Command Sequences, so they do not have Integrity Check Values present in the Manifest.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text"><name>Human-Readable Text</name>

<t>Text is typically a Severable Element (<xref target="ovr-severable"/>). It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable"><name>Â Severable Elements</name>

<t>Severable Elements are elements of the Envelope (<xref target="ovr-envelope"/>) that have Integrity Check Values (<xref target="ovr-integrity"/>) in the Manifest (<xref target="ovr-manifest"/>).</t>

<t>Because of this organisation, these elements can be discarded or "Severed" from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system severs the Text sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated"><name>Integrated Payloads</name>

<t>In some cases, it is beneficial to include a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest's envelope.</t>
</list></t>

<t>See <xref target="template-integrated-payload"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior"><name>Manifest Processor Behavior</name>

<t>This section describes the behavior of the manifest processor and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the manifest processor: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup"><name>Manifest Processor Setup</name>

<t>Prior to executing any command sequence, the manifest processor or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the manifest processor or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the manifest processor can choose between several manifests, it MUST select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest, according to application-specific policy.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported Component Identifier encountered.</t>
  <t>Payload not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Payload verification failed.</t>
  <t>Missing required component from a Component Set.</t>
  <t>Required parameter not supplied.</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Selecting an older manifest in the event of failure of the latest valid manifest is a robustness mechanism that is necessary for supporting the requirements in <xref target="RFC9019"/>, section 3.5. It may not be appropriate for all applications. In particular Trusted Execution Environments MAY require a failure to invoke a new installation, rather than a rollback approach. See <xref target="RFC9124"/>, Section 4.2.1 for more discussion on the security considerations that apply to rollback.</t>

<t>Following these initial tests, the manifest processor clears all parameter storage. This ensures that the manifest processor begins without any leaked data.</t>

</section>
<section anchor="required-checks"><name>Â Required Checks</name>

<t>The RECOMMENDED process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a Recipient receives an incompatible manifest.</t>

<t>When validating authenticity of manifests, the manifest processor MAY use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity.</t>

<t>Once a valid, authentic manifest has been selected, the manifest processor MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component is supported.</t>

<t>For each listed component, the manifest processor MUST provide storage for the supported parameters. If the manifest processor does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The manifest processor SHOULD check that the common sequence contains at least Check Vendor Identifier command and at least one Check Class Identifier command.</t>

<t>Because the common sequence contains Check Vendor Identifier and Check Class Identifier command(s), no custom commands are permitted in the common sequence. This ensures that any custom commands are only executed by devices that understand them.</t>

<t>If the manifest contains more than one component, each command sequence MUST begin with a Set Component Index.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by one update, that is the manifest:</t>

<t><list style="numbers">
  <t>has sufficient permissions imparted by its signatures</t>
  <t>specifies a digest and a payload for every Component in the Component Set.</t>
</list></t>

<section anchor="minimal-sigs"><name>Minimizing Signature Verifications</name>

<t>Signature verification can be energy and time expensive on a constrained device. MAC verification is typically unaffected by these concerns. A Recipient MAY choose to parse and execute only the SUIT_Common section of the manifest prior to signature verification, if all of the below apply:</t>

<t><list style="symbols">
  <t>The Authentication Block contains a COSE_Sign_Tagged or COSE_Sign1_Tagged</t>
  <t>The Recipient receives manifests over an unauthenticated channel, exposing it to more inauthentic or incompatible manifests, and</t>
  <t>The Recipient has a power budget that makes signature verification undesirable</t>
</list></t>

<t>When executing Common prior to authenticity validation, the Manifest Processor MUST first evaluate the integrity of the manifest using the SUIT_Digest present in the authentication block.</t>

<t>The guidelines in Creating Manifests (<xref target="creating-manifests"/>) require that the common section contains the applicability checks, so this section is sufficient for applicability verification. The parser MUST restrict acceptable commands to conditions and the following directives: Override Parameters, Set Parameters, Try Each, and Run Sequence ONLY. The manifest parser MUST NOT execute any command with side-effects outside the parser (for example, Run, Copy, Swap, or Fetch commands) prior to authentication and any such command MUST Abort. The Common Sequence MUST be executed again, in its entirety, after authenticity validation.</t>

<t>A Recipient MAY rely on network infrastructure to filter inapplicable manifests.</t>

</section>
</section>
<section anchor="interpreter-fundamental-properties"><name>Interpreter Fundamental Properties</name>

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a Trusted Invocation MUST either result in an error, or an invoked image.</t>
  <t>Executing the same manifest on multiple Recipients MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

</section>
<section anchor="command-behavior"><name>Abstract Machine Description</name>

<t>The heart of the manifest is the list of commands, which are processed by a Manifest Processor--a form of interpreter. This Manifest Processor can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>Conditions MUST NOT have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag (<xref target="suit-parameter-soft-failure"/>) is set when a Condition reports failure.</t>

<t>Directives MAY have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter MUST Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>To simplify the logic describing the command semantics, the object "current" is used. It represents the component identified by the Component Index:</t>

<figure><artwork><![CDATA[
current := components\[component-index\]
]]></artwork></figure>

<t>As a result, Set Component Index is described as current := components[arg].</t>

<t>The following table describes the behavior of each command. "params" represents the parameters for the current component. Most commands operate on a component.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for-each k,v in arg</c>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in params for-each k,v in arg</c>
      <c>Run</c>
      <c>run(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Slot</c>
      <c>assert(current.slot-index == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>try-each-done if exec(seq) is not error for-each seq in arg</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Run with Arguments</c>
      <c>run(current, arg)</c>
</texttable>

</section>
<section anchor="index-true"><name>Special Cases of Component Index</name>

<t>Component Index can take on one of three types:</t>

<t><list style="numbers">
  <t>Integer</t>
  <t>Array of integers</t>
  <t>True</t>
</list></t>

<t>Integers MUST always be supported by Set Component Index. Arrays of integers MUST be supported by Set Component Index if the Recipient supports 3 or more components. True MUST be supported by Set Component Index if the Recipient supports 2 or more components. Each of these operates on the list of components declared in the manifest.</t>

<t>Integer indices are the default case as described in the previous section. An array of integers represents a list of the components (Set Component Index) to which each subsequent command applies. The value True replaces the list of component indices with the full list of components, as defined in the manifest.</t>

<t>When a command is executed, it either 1. operates on the component identified by the component index if that index is an integer, or 2. it operates on each component identified by an array of indicies, or 3. it operates on every component if the index is the boolean True. This is described by the following pseudocode:</t>

<figure><artwork><![CDATA[
if component-index is true:
    current-list = components
else if component-index is array:
    current-list = [ components[idx] for idx in component-index ]
else:
    current-list = [ components[component-index] ]
for current in current-list:
    cmd(current)
]]></artwork></figure>

<t>Try Each and Run Sequence are affected in the same way as other commands: they are invoked once for each possible Component. This means that the sequences that are arguments to Try Each and Run Sequence are NOT invoked with Component Index = True, nor are they invoked with array indices. They are only invoked with integer indices. The interpreter loops over the whole sequence, setting the Component Index to each index in turn.</t>

</section>
<section anchor="serial-processing"><name>Serialized Processing Interpreter</name>

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor MAY handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

<t>When a serialized Manifest Processor encounters a component index of True, it does not ignore any commands. It applies them to the current component on each iteration.</t>

</section>
<section anchor="parallel-processing"><name>Parallel Processing Interpreter</name>

<t>Advanced Recipients MAY make use of the Strict Order parameter and enable parallel processing of some Command Sequences, or it may reorder some Command Sequences. To perform parallel processing, once the Strict Order parameter is set to False, the Recipient may issue each or every command concurrently until the Strict Order parameter is returned to True or the Command Sequence ends. Then, it waits for all issued commands to complete before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the Recipient consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>When the manifest processor encounters any of these scenarios the parallel processing MUST halt until all issued commands have completed:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, a manifest author may collect sequences of commands in a Run Sequence command. Then, each of these sequences MAY be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence MUST begin with a Set Component Index directive with the following exception: when the index is either True or an array of indices, the Set Component Index is implied. Any further Set Component Index directives MUST cause an Abort. This allows the interpreter that issues Run Sequence commands to check that the first element is correct, then issue the sequence to a parallel execution context to handle the remainder of the sequence.</t>

</section>
</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC8152"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>The author MUST ensure that all parameters consumed by a command are set prior to invoking that command. Where Component Index = True, this means that the parameters consumed by each command MUST have been set for each Component.</t>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<t>NOTE: On systems that support only a single component, Set Component Index has no effect and can be omitted.</t>

<t>NOTE: <strong>A digest MUST always be set using Override Parameters.</strong></t>

<section anchor="template-compatibility-check"><name>Compatibility Check Template</name>

<t>The goal of the compatibility check template ensure that Recipients only install compatible images.</t>

<t>In this template all information is contained in the common sequence and the following sequence of commands is used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="uuid-identifiers"/>)</t>
  <t>Check Class Identifier condition (see <xref target="uuid-identifiers"/>)</t>
</list></t>

</section>
<section anchor="template-secure-boot"><name>Trusted Invocation Template</name>

<t>The goal of the Trusted Invocation template is to ensure that only authorized code is invoked; such as in Secure Boot or when a Trusted Application is loaded into a TEE.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>The system validation sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>Then, the run sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Run directive (see <xref target="suit-directive-run-sequence"/>)</t>
</list></t>

</section>
<section anchor="firmware-download-template"><name>Component Download Template</name>

<t>The goal of the Component Download template is to acquire and store an image.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI (see <xref target="suit-parameter-uri"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-install"><name>Install Template</name>

<t>The goal of the Install template is to use an image already stored in an identified component to copy into a second component.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: the Component Download operations are moved from the Payload Install sequence to the Payload Fetch sequence.</t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="suit-parameter-source-component"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-integrated-payload"><name>Integrated Payload Template</name>

<t>The goal of the Integrated Payload template is to install a payload that is included in the manifest envelope. It is identical to the Component Download template (<xref target="firmware-download-template"/>).</t>

<t>An implementer MAY choose to place a payload in the envelope of a manifest. The payload envelope key MUST be a string. The payload MUST be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way MAY be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4.</t>

<t>A distributor MAY choose to pre-fetch a payload and add it to the manifest envelope, using the URI as the key.</t>

</section>
<section anchor="template-load-ext"><name>Load from Nonvolatile Storage Template</name>

<t>The goal of the Load from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="a-b-template"><name>A/B Image Template</name>

<t>The goal of the A/B Image Template is to acquire, validate, and invoke one of two images, based on a test.</t>

<t>The following commands are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following commands are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

<t>If Trusted Invocation (<xref target="template-secure-boot"/>) is used, only the run sequence is added to this template, since the common sequence is populated by this template:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
    </list></t>
  <t>Run</t>
</list></t>

<t>NOTE: Any test can be used to select between images, Check Slot Condition is used in this template because it is a typical test for execute-in-place devices.</t>

</section>
</section>
<section anchor="metadata-structure"><name>Metadata Structure</name>

<t>The metadata for SUIT updates is composed of several primary constituent parts: the Envelope, Authentication Information, Manifest, and Severable Elements.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding-considerations"><name>Encoding Considerations</name>

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialized variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific values, as described in <xref target="iana"/>.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

</section>
<section anchor="envelope"><name>Envelope</name>

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="authentication-info"><name>Authenticated Manifests</name>

<t>The suit-authentication-wrapper contains a SUIT Digest Container (see <xref target="SUIT_Digest"/>) and one or more SUIT Authentication Blocks. The SUIT_Digest carries the result of computing the indicated hash algorithm over the suit-manifest element. A signing application MUST verify the suit-manifest element against the SUIT_Digest prior to signing. A SUIT Authentication Block is implemented as COSE_Mac_Tagged, COSE_Mac0_Tagged, COSE_Sign_Tagged or COSE_Sign1_Tagged structures with detached payloads, as described in RFC 8152 <xref target="RFC8152"/>.</t>

<t>For COSE_Sign and COSE_Sign1 a special signature structure (called Sig_structure) has to be created onto which the selected digital signature algorithm is applied to, see Section 4.4 of <xref target="RFC8152"/> for details. This specification requires Sig_structure to be populated as follows:
* The external_aad field MUST be set to a zero-length binary string (i.e. there is no external additional authenticated data).
* The payload field contains the SUIT_Digest wrapped in a bstr, as per the requirements in Section 4.4 of RFC 8152.
All other fields in the Sig_structure are populated as described in Section 4.4 of <xref target="RFC8152"/>.</t>

<t>Likewise, Section 6.3 of <xref target="RFC8152"/> describes the details for computing a MAC and the fields of the MAC_structure need to be populated. The rules for external_aad and the payload fields described in the paragraph above also apply to this structure.</t>

<t>The suit-authentication-wrapper MUST come before the suit-manifest element, regardless of canonical encoding of CBOR.</t>

<t>A SUIT_Envelope that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be a list containing only the SUIT_Digest.</t>

</section>
<section anchor="manifest-structure"><name>Manifest</name>

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
</list></t>

<t>The Text section, or any Command Sequence of the Update Procedure (Image Fetch, Image Installation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable element. Severable elements are RECOMMENDED to implement. In particular, the human-readable text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version"><name>suit-manifest-version</name>

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED to implement.</t>

</section>
<section anchor="manifest-seqnr"><name>suit-manifest-sequence-number</name>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. Each Recipient MUST reject any manifest that has a sequence number lower than its current sequence number. For convenience, an implementer MAY use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED to implement.</t>

</section>
<section anchor="manifest-reference-uri"><name>suit-reference-uri</name>

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.</t>

</section>
<section anchor="manifest-digest-text"><name>suit-text</name>

<t>suit-text SHOULD be a severable element. suit-text is a map containing two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text</t>
  <t>SUIT_Component_Identifier =&gt; map</t>
</list></t>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text MUST also be present in suit-common (<xref target="manifest-common"/>).</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The YAML (<xref target="YAML"/>)-formatted document that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A free text representation of the component version</c>
</texttable>

<t>suit-text is OPTIONAL to implement.</t>

</section>
<section anchor="manifest-common"><name>suit-common</name>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is REQUIRED to implement.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED to implement. It is REQUIRED if the optimizations described in <xref target="minimal-sigs"/> will be used. Whenever a parameter or Try Each command is required by more than one Command Sequence, placing that parameter or command in suit-common-sequence results in a smaller encoding.</t>

<section anchor="suit-component-identifier"><name>SUIT_Component_Identifier</name>

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>A Component Identifier can be trivial, such as the simple array [h'00']. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path "/usr/bin/env" would encode to ['usr','bin','env'].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands"><name>SUIT_Command_Sequence</name>

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL to implement.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation. suit-validate is REQUIRED to implement.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL to implement.</t>
  <t>Run or Boot: suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: the "run" directive. suit-run is OPTIONAL to implement.</t>
</list></t>

<t>Goals 1,2 form the Update Procedure. Goals 4,5,6 form the Invocation Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true and any failure is treated as a failure of the update/load/invocation</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>Each condition is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>A <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided. This index is a numeric index into the Component Identifier table defined at the beginning of the manifest.</t>

<t>To facilitate optional conditions, a special directive, suit-directive-try-each (<xref target="suit-directive-try-each"/>), is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/invocation, but a parameter is provided to override this behavior. See suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>).</t>

</section>
<section anchor="reporting-policy"><name>Reporting Policy</name>

<t>To facilitate construction of Reports that describe the success or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>At the completion of each command, a Manifest Processor MAY forward information about the command to a Reporting Engine, which is responsible for reporting boot or update status to a third party. The Reporting Engine is entirely implementation-defined, the reporting policy simply facilitates the Reporting Engine's interface to the SUIT Manifest Processor.</t>

<t>The information elements provided to the Reporting Engine are:</t>

<t><list style="symbols">
  <t>The reporting policy</t>
  <t>The result of the command</t>
  <t>The values of parameters consumed by the command</t>
  <t>The system information consumed by the command</t>
</list></t>

<t>Together, these elements are called a Record. A group of Records is a Report.</t>

<t>If the component index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine MUST receive one Record for each Component, in the order expressed in the Components list or the component index array.</t>

<t>This specification does not define a particular format of Records or Reports. This specification only defines hints to the Reporting Engine for which Records it should aggregate into the Report. The Reporting Engine MAY choose to ignore these hints and apply its own policy instead.</t>

<t>When used in a Invocation Procedure, the report MAY form the basis of an attestation report. When used in an Update Process, the report MAY form the basis for one or more log entries.</t>

</section>
<section anchor="secparameters"><name>SUIT_Parameters</name>

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reuse of parameters between commands, thus reducing manifest size.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Component Slot</c>
      <c>suit-parameter-component-slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Run Args</c>
      <c>suit-parameter-run-args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately.</t>

<section anchor="cbor-pen-uuid-namespace-identifier"><name>CBOR PEN UUID Namespace Identifier</name>

<t>The CBOR PEN UUID Namespace Identifier is constructed as follows:</t>

<t>It uses the OID Namespace as a starting point, then uses the CBOR absolute OID encoding for the IANA PEN OID (1.3.6.1.4.1):</t>

<figure><artwork><![CDATA[
D8 6F                # tag(111)
   45                # bytes(5)
# Absolute OID encoding of IANA Private Enterprise Number:
#    1.3. 6. 1. 4. 1
      2B 06 01 04 01 # X.690 Clause 8.19
]]></artwork></figure>

<t>Computing a type 5 UUID from these produces:</t>

<figure><artwork><![CDATA[
NAMESPACE_CBOR_PEN = UUID5(NAMESPACE_OID, h'D86F452B06010401')
NAMESPACE_CBOR_PEN = 47fbdabb-f2e4-55f0-bb39-3620c2f6df4e
]]></artwork></figure>

</section>
<section anchor="uuid-identifiers"><name>Constructing UUIDs</name>

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient MAY match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They MUST NOT be used as assertions of identity. They are evaluated by identifier conditions (<xref target="identifier-conditions"/>).</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module's firmware has a proprietary update mechanism and doesn't support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:</t>

<figure><artwork><![CDATA[
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)
]]></artwork></figure>

<t>If the Vendor ID is a UUID, the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(Vendor ID, Class-Specific-Information)
]]></artwork></figure>

<t>If the Vendor ID is a CBOR PEN (see <xref target="suit-parameter-vendor-identifier"/>), the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(
    UUID5(NAMESPACE_CBOR_PEN, CBOR_PEN),
    Class-Specific-Information)
]]></artwork></figure>

<t>Class-specific-information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier"><name>suit-parameter-vendor-identifier</name>

<t>suit-parameter-vendor-identifier may be presented in one of two ways:</t>

<t><list style="symbols">
  <t>A Private Enterprise Number</t>
  <t>A byte string containing a UUID (<xref target="RFC4122"/>)</t>
</list></t>

<t>Private Enterprise Numbers are encoded as a relative OID, according to the definition in <xref target="I-D.ietf-cbor-tags-oid"/>. All PENs are relative to the IANA PEN: 1.3.6.1.4.1.</t>

</section>
<section anchor="suit-parameter-class-identifier"><name>suit-parameter-class-identifier</name>

<t>A RFC 4122 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier"><name>suit-parameter-device-identifier</name>

<t>A RFC 4122 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest"><name>suit-parameter-image-digest</name>

<t>A fingerprint computed over the component itself, encoded in the SUIT_Digest <xref target="SUIT_Digest"/> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size"><name>suit-parameter-image-size</name>

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-component-slot"><name>suit-parameter-component-slot</name>

<t>This parameter sets the slot index of a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its index into the component's storage area. This slot MUST be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-uri"><name>suit-parameter-uri</name>

<t>A URI Reference (<xref target="RFC3986"/>) from which to fetch a resource, encoded as a text string. CBOR Tag 32 is not used because the meaning of the text string is unambiguous in this context.</t>

</section>
<section anchor="suit-parameter-source-component"><name>suit-parameter-source-component</name>

<t>This parameter sets the source component to be used with either suit-directive-copy (<xref target="suit-directive-copy"/>) or with suit-directive-swap (<xref target="suit-directive-swap"/>). The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-run-args"><name>suit-parameter-run-args</name>

<t>This parameter contains an encoded set of arguments for suit-directive-run (<xref target="suit-directive-run"/>). The arguments MUST be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-fetch-arguments"><name>suit-parameter-fetch-arguments</name>

<t>An implementation-defined set of arguments to suit-directive-fetch (<xref target="suit-directive-fetch"/>). Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order"><name>suit-parameter-strict-order</name>

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure"><name>suit-parameter-soft-failure</name>

<t>When executing a command sequence inside suit-directive-try-each (<xref target="suit-directive-try-each"/>) or suit-directive-run-sequence (<xref target="suit-directive-run-sequence"/>) and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates. It MUST NOT be set outside of suit-directive-try-each or suit-directive-run-sequence.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom"><name>suit-parameter-custom</name>

<t>This parameter is an extension point for any proprietary, application specific conditions and directives. It MUST NOT be used in the common sequence. This effectively scopes each custom command to a particular Vendor Identifier/Class Identifier pair.</t>

</section>
</section>
<section anchor="suitcondition"><name>SUIT_Condition</name>

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Component Slot</c>
      <c>suit-condition-component-slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>Abort</c>
      <c>suit-condition-abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>Custom Condition</c>
      <c>suit-condition-custom</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition MUST report a result code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. A subsequent command or command sequence MAY continue executing if suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is set. If a condition requires additional information, this MUST be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it MUST report a failure. If a Recipient encounters an unknown condition, it MUST report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary definition by the author of a manifest processor. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions"><name>suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier</name>

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing Recipient MUST match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. Each component MAY match more than one identifier. Care is needed to ensure that manifests correctly identify their targets using these conditions. Using only a generic class ID for a device-specific firmware could result in matching devices that are not compatible.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers MUST be known to the Manifest Processor in order to evaluate compatibility.</t>

</section>
<section anchor="suit-condition-image-match"><name>suit-condition-image-match</name>

<t>Verify that the current component matches the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>) for the current component. The digest is verified against the digest specified in the Component's parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-component-slot"><name>suit-condition-component-slot</name>

<t>Verify that the slot index of the current component matches the slot index set in suit-parameter-component-slot (<xref target="suit-parameter-component-slot"/>). This condition allows a manifest to select between several images to match a target slot.</t>

</section>
<section anchor="suit-condition-abort"><name>suit-condition-abort</name>

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each (<xref target="suit-directive-try-each"/>).</t>

</section>
<section anchor="SUIT_Condition_Custom"><name>suit-condition-custom</name>

<t>suit-condition-custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="suitdirective"><name>SUIT_Directive</name>
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Run</c>
      <c>suit-directive-run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it MUST report a result code. If the Directive reports failure, then the current Command Sequence MUST be terminated.</t>

<section anchor="suit-directive-set-component-index"><name>suit-directive-set-component-index</name>

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be one of three types:</t>

<t><list style="numbers">
  <t>An unsigned integer (REQUIRED to implement in parser)</t>
  <t>A boolean (REQUIRED to implement in parser ONLY IF 2 or more components supported)</t>
  <t>An array of unsigned integers (REQUIRED to implement in parser ONLY IF 3 or more components supported)</t>
</list></t>

<t>If the following commands apply to ONE component, an unsigned integer index into the component list is used. If the following commands apply to ALL components, then the boolean value "True" is used instead of an index. If the following commands apply to more than one, but not all components, then an array of unsigned integer indices into the component list is used.
See <xref target="index-true"/> for more details.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-try-each"><name>suit-directive-try-each</name>

<t>This command runs several SUIT_Command_Sequence instances, one after another, in a strict order. Use this command to implement a "try/catch-try/catch" sequence. Manifest processors MAY implement this command.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters"><name>suit-directive-override-parameters</name>

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch"><name>suit-directive-fetch</name>

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more payloads. suit-directive-fetch retrieves each component listed in component-index. If component-index is True, instead of an integer, then all current manifest components are fetched. If component-index is an array, then all listed components are fetched.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

</section>
<section anchor="suit-directive-copy"><name>suit-directive-copy</name>

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. As described in <xref target="index-true"/> component index may be a single integer, a list of integers, or True. suit-directive-copy retrieves each component specified by the current component-index, respectively.</t>

<t>suit-directive-copy reads its source from suit-parameter-source-component (<xref target="suit-parameter-source-component"/>).</t>

<t>If either the source component parameter or the source component itself is absent, this command fails.</t>

</section>
<section anchor="suit-directive-run"><name>suit-directive-run</name>

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-run through suit-parameter-run-arguments (<xref target="suit-parameter-run-args"/>) and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-run-sequence"><name>suit-directive-run-sequence</name>

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap"><name>suit-directive-swap</name>

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. As with suit-directive-copy, if the source component is missing, this command fails.</t>

<t>If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they MUST be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="integrity-checks"><name>Integrity Check Values</name>

<t>When the Text section or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope. The keys for the envelope elements have the same values as the keys for the manifest elements.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="severable-fields"><name>Severable Elements</name>

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or "Severed" without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD NOT be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists"><name>Access Control Lists</name>

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or Component Identifier prefixes to the listed identities or identity groups. Any identity can verify an image digest, but fetching into or fetching from a Component Identifier requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the Component Identifier or Component Identifier prefix that an identity can use, and also lists the commands and parameters that the identity can use in combination with that Component Identifier.</t>

</section>
<section anchor="SUIT_Digest"><name>SUIT Digest Container</name>

<t>The SUIT digest is a CBOR List containing two elements: an algorithm identifier and a bstr containing the bytes of the digest. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The values of the algorithm identifier are defined by <xref target="I-D.ietf-cose-hash-algs"/>. The following algorithms MUST be implemented by all Manifest Processors:</t>

<t><list style="symbols">
  <t>SHA-256 (-16)</t>
</list></t>

<t>The following algorithms MAY be implemented in a Manifest Processor:</t>

<t><list style="symbols">
  <t>SHAKE128 (-18)</t>
  <t>SHA-384 (-43)</t>
  <t>SHA-512 (-44)</t>
  <t>SHAKE256 (-45)</t>
</list></t>

</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate CBOR tag 107 in the CBOR Tags registry for the SUIT Envelope.</t>
  <t>allocate CBOR tag 1070 in the CBOR Tags registry for the SUIT Manifest.</t>
  <t>allocate media type application/suit-envelope in the Media Types registry.</t>
  <t>setup several registries as described below.</t>
</list></t>

<t>IANA is requested to setup a registry for SUIT manifests.
Several registries defined in the subsections below need to be created.</t>

<t>For each registry, values 0-23 are Standards Action, 24-255 are IETF Review, 256-65535 are Expert Review, and 65536 or greater are First Come First Served.</t>

<t>Negative values -23 to 0 are Experimental Use, -24 and lower are Private Use.</t>

<section anchor="suit-commands"><name>SUIT Commands</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>2</c>
      <c>Class Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>3</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>12</c>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>13</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>14</c>
      <c>Abort</c>
      <c>&#160;</c>
      <c>15</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>16</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>17</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>18</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>21</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>22</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>23</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>24</c>
      <c>Device Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>25</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>31</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>32</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>33</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
</texttable>

</section>
<section anchor="suit-parameters"><name>SUIT Parameters</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>2</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>3</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>4</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>12</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>13</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>14</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>18</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>19</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>21</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>22</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>23</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>24</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>26</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>30</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

</section>
<section anchor="suit-text-values"><name>SUIT Text Values</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Manifest Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Update Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Manifest JSON Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Manifest YAML Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-component-text-values"><name>Â SUIT Component Text Values</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Model Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Vendor Domain</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Model Info</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>5</c>
      <c>Component Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>6</c>
      <c>Component Version</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>7</c>
      <c>Component Version Required</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Ãyvind RÃ¸nningstad</t>
  <t>Frank Audun KvamtrÃ¸</t>
  <t>Krzysztof ChruÅciÅski</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC4122' target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author fullname='P. Leach' initials='P.' surname='Leach'><organization/></author>
<author fullname='M. Mealling' initials='M.' surname='Mealling'><organization/></author>
<author fullname='R. Salz' initials='R.' surname='Salz'><organization/></author>
<date month='July' year='2005'/>
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC3986' target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'><organization/></author>
<author fullname='R. Fielding' initials='R.' surname='Fielding'><organization/></author>
<author fullname='L. Masinter' initials='L.' surname='Masinter'><organization/></author>
<date month='January' year='2005'/>
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference anchor='RFC9019' target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>



<reference anchor='RFC9124' target='https://www.rfc-editor.org/info/rfc9124'>
<front>
<title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<date month='January' year='2022'/>
<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t><t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9124'/>
<seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-cose-hash-algs'>
   <front>
      <title>CBOR Object Signing and Encryption (COSE): Hash Algorithms</title>
      <author fullname='Jim Schaad'>
	 <organization>August Cellars</organization>
      </author>
      <date day='14' month='September' year='2020'/>
      <abstract>
	 <t>   The CBOR Object Signing and Encryption (COSE) syntax
   [I-D.ietf-cose-rfc8152bis-struct] does not define any direct methods
   for using hash algorithms.  There are, however, circumstances where
   hash algorithms are used, such as indirect signatures where the hash
   of one or more contents are signed, and X.509 certificate or other
   object identification by the use of a fingerprint.  This document
   defines a set of hash algorithms that are identified by COSE
   Algorithm Identifiers.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cose-hash-algs-09'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cose-hash-algs-09.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-teep-architecture'>
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname='Mingliang Pei'>
	 <organization>Broadcom</organization>
      </author>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Dave Thaler'>
	 <organization>Microsoft</organization>
      </author>
      <author fullname='David Wheeler'>
	 <organization>Amazon</organization>
      </author>
      <date day='19' month='April' year='2022'/>
      <abstract>
	 <t>   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-17'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-teep-architecture-17.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-cbor-tags-oid'>
   <front>
      <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
      <author fullname='Carsten Bormann'>
	 <organization>UniversitÃ¤t Bremen TZI</organization>
      </author>
      <date day='21' month='May' year='2021'/>
      <abstract>
	 <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.

 This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cbor-tags-oid-08'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Firmware Encryption with SUIT Manifests</title>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='20' month='April' year='2022'/>
      <abstract>
	 <t>   This document specifies a firmware update mechanism where the
   firmware image is encrypted.  Firmware encryption uses the IETF SUIT
   manifest with key establishment provided by the hybrid public-key
   encryption (HPKE) scheme and the AES Key Wrap (AES-KW) with a pre-
   shared key-encryption key.  Encryption of the firmware image is
   accomplished using the established content encryption key and a
   mutually agreed symmetric encryption algorithm, such as AES-GCM or
   AES-CCM.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-04'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-firmware-encryption-04.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-update-management'>
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to IoT
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-update-management-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-update-management-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-trust-domains'>
   <front>
      <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   (as defined in [I-D.ietf-suit-manifest]) for use in deployments with
   multiple trust domains.  A device has more than one trust domain when
   it uses different trust anchors for different purposes or components
   in the context of firmware update.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-trust-domains-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-trust-domains-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-report'>
   <front>
      <title>Secure Reporting of Update Status</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz'>
	 <organization>Fraunhofer SIT</organization>
      </author>
      <date day='12' month='January' year='2022'/>
      <abstract>
	 <t>   The Software Update for the Internet of Things (SUIT) manifest
   provides a way for many different update and boot workflows to be
   described by a common format.  However, this does not provide a
   feedback mechanism for developers in the event that an update or boot
   fails.

   This specification describes a lightweight feedback mechanism that
   allows a developer in possession of a manifest to reconstruct the
   decisions made and actions performed by a manifest processor.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-report-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-report-01.txt' type='TXT'/>
</reference>



<reference anchor='RFC7228' target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='M. Ersue' initials='M.' surname='Ersue'><organization/></author>
<author fullname='A. Keranen' initials='A.' surname='Keranen'><organization/></author>
<date month='May' year='2014'/>
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>


<reference anchor="YAML" target="https://yaml.org/">
  <front>
    <title>YAML Ain't Markup Language</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<t>To be valid, the following CDDL MUST have the COSE CDDL appended to it. The COSE CDDL can be obtained by following the directions in <xref target="RFC8152"/>, Section 1.3.</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Envelope_Tagged = #6.107(SUIT_Envelope)
SUIT_Envelope = {
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * SUIT_Integrated_Payload,
  * $$SUIT_Envelope_Extensions,
  * (int => bstr)
}

SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]

SUIT_Digest = [
  suit-digest-algorithm-id : suit-cose-hash-algs,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

SUIT_Severable_Manifest_Members = (
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  * $$SUIT_severable-members-extensions,
)

SUIT_Integrated_Payload = (suit-integrated-payload-key => bstr)
suit-integrated-payload-key = tstr

SUIT_Manifest_Tagged = #6.1070(SUIT_Manifest)

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Severable_Members_Choice,
    SUIT_Unseverable_Members,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-run => bstr .cbor SUIT_Command_Sequence,
  * $$unseverable-manifest-member-extensions,
)

SUIT_Severable_Members_Choice = (
  ? suit-payload-fetch =>
    bstr .cbor SUIT_Command_Sequence / SUIT_Digest,
  ? suit-install => bstr .cbor SUIT_Command_Sequence / SUIT_Digest,
  ? suit-text => bstr .cbor SUIT_Command_Sequence / SUIT_Digest,
  * $$severable-manifest-members-choice-extensions
)

SUIT_Common = {
    ? suit-components             => SUIT_Components,
    ? suit-common-sequence        => bstr .cbor SUIT_Common_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Components           = [ + SUIT_Component_Identifier ]

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
    * $$SUIT_Dependency-extensions,
}

;REQUIRED to implement:
suit-cose-hash-algs /= cose-alg-sha-256

;OPTIONAL to implement:
suit-cose-hash-algs /= cose-alg-shake128
suit-cose-hash-algs /= cose-alg-sha-384
suit-cose-hash-algs /= cose-alg-sha-512
suit-cose-hash-algs /= cose-alg-shake256

SUIT_Component_Identifier =  [* bstr]

SUIT_Common_Sequence = [
    + ( SUIT_Condition // SUIT_Common_Commands )
]

SUIT_Common_Commands //= (suit-directive-set-component-index,  IndexArg)
SUIT_Common_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Common_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Common_Commands //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})

IndexArg /= uint
IndexArg /= bool
IndexArg /= [+uint]

SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-component-slot,    SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-abort,             SUIT_Rep_Policy)

SUIT_Directive //= (suit-directive-set-component-index,  IndexArg)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency, SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-copy,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-swap,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-run,               SUIT_Rep_Policy)

SUIT_Directive_Try_Each_Argument = [
    2* bstr .cbor SUIT_Command_Sequence,
    ?nil
]

SUIT_Rep_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

SUIT_Parameters //= (suit-parameter-vendor-identifier =>
    (RFC4122_UUID / cbor-pen))
cbor-pen = #6.112(bstr)

SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-component-slot => uint)

SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-run-args => bstr)

SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)

SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)

RFC4122_UUID = bstr .size 16

SUIT_Text_Map = {
    SUIT_Text_Keys,
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    }
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

suit-authentication-wrapper = 2
suit-manifest = 3

;REQUIRED to implement:
cose-alg-sha-256 = -16

;OPTIONAL to implement:
cose-alg-shake128 = -18
cose-alg-sha-384 = -43
cose-alg-sha-512 = -44
cose-alg-shake256 = -45

suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text = 13

suit-components = 2
suit-common-sequence = 4

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-component-slot    = 5

suit-condition-abort                    = 14
suit-condition-device-identifier        = 24

suit-directive-set-component-index      = 12
suit-directive-try-each                 = 15
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-swap                     = 31
suit-directive-run-sequence             = 32

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-component-slot    = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14

suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-run-args          = 23

suit-parameter-device-identifier = 24

suit-parameter-custom = nint

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
]]></sourcecode></figure>

</section>
<section anchor="examples"><name>B. Examples</name>

<t>The following examples demonstrate a small subset of the functionality of the manifest. Even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<t>Note that reporting policies are declared for each non-flow-control command in these examples. The reporting policies used in the examples are described in the following tables.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Label</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Rec-Pass</c>
      <c>suit-send-record-on-failure</c>
      <c>Rec-Fail</c>
      <c>suit-send-sysinfo-success</c>
      <c>Sys-Pass</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Sys-Fail</c>
</texttable>

<texttable>
      <ttcol align='left'>Command</ttcol>
      <ttcol align='left'>Sys-Fail</ttcol>
      <ttcol align='left'>Sys-Pass</ttcol>
      <ttcol align='left'>Rec-Fail</ttcol>
      <ttcol align='left'>Rec-Pass</ttcol>
      <c>suit-condition-vendor-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-class-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-image-match</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-component-slot</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>1</c>
      <c>suit-directive-fetch</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-copy</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-run</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
</texttable>

<section anchor="example-0-secure-boot"><name>Example 0: Secure Boot</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
</list></t>

<t>It also serves as the minimum example.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'a6c4590ac53043a98e8c4106e1e31b305516d7cf0a655eddfac6d45c810e036a'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'd11a2dd9610fb62a707335f58407922570
9f96e8117e7eeed98a2f207d05c8ecfba1755208f6abea977b8a6efe3bc2ca3215e119
3be201467d052b42db6b7287'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:0,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / validate / 10:<<[
                / condition-image-match / 3,15
            ]>>,
            / run / 12:<<[
                / directive-run / 23,2
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  161</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820a6c4590ac53043a98e8c4106e1e31b3055
16d7cf0a655eddfac6d45c810e036a035871a50101020003585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f0a4382030f0c43821702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  237</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820a6c4590ac53043a98e8c4106e1e31b3055
16d7cf0a655eddfac6d45c810e036a584ad28443a10126a0f65840d11a2d
d9610fb62a707335f584079225709f96e8117e7eeed98a2f207d05c8ecfb
a1755208f6abea977b8a6efe3bc2ca3215e1193be201467d052b42db6b72
87035871a50101020003585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f0a4382030f0c43821702
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload"><name>Example 1: Simultaneous Download and Installation of Payload</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Simultaneous download and installation of payload. No secure boot is present in this example to demonstrate a download-only manifest.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'60c61d6eb7a1aaeddc49ce8157a55cff0821537eeee77a4ded44155b03045132'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'5249dacaf0ffc8326931b09586eb7e3769
e71a0e6a40ad8153db4980db9b05bd1742ddb46085fa11e62b65a79895c12ac7abe266
8ccc5afdd74466aed7bca389'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:1,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / install / 9:<<[
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
            / validate / 10:<<[
                / condition-image-match / 3,15
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  196</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f582060c61d6eb7a1aaeddc49ce8157a55cff08
21537eeee77a4ded44155b03045132035894a50101020103585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f0958258613a115781b687474703a2f2f6578616d706c652e636f6d2f66
696c652e62696e1502030f0a4382030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  272</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f582060c61d6eb7a1aaeddc49ce8157a55cff08
21537eeee77a4ded44155b03045132584ad28443a10126a0f658405249da
caf0ffc8326931b09586eb7e3769e71a0e6a40ad8153db4980db9b05bd17
42ddb46085fa11e62b65a79895c12ac7abe2668ccc5afdd74466aed7bca3
89035894a50101020103585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f0958258613a115781b68747470
3a2f2f6578616d706c652e636f6d2f66696c652e62696e1502030f0a4382
030f
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-secure-boot-severed-fields"><name>Example 2: Simultaneous Download, Installation, Secure Boot, Severed Fields</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>This example also demonstrates severable elements (<xref target="ovr-severable"/>), and text (<xref target="manifest-digest-text"/>).</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'e45dcdb2074b951f1c88b866469939c2a83ed433a31fc7dfcb3f63955bd943ec'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'b4fd3a6a18fe1062573488cf24ac96ef9f
30ac746696e50be96533b356b8156e4332587fe6f4e8743ae525d72005fddd4c1213d5
5a8061b2ce67b83640f4777c'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:2,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / install / 9:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'3ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d2'
            ],
            / validate / 10:<<[
                / condition-image-match / 3,15
            ]>>,
            / run / 12:<<[
                / directive-run / 23,2
            ]>>,
            / text / 13:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'2bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918'
            ],
        }>>,
        / install / 9:<<[
            / directive-set-parameters / 19,{
                / uri /
21:'http://example.com/very/long/path/to/file/file.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ]>>,
        / text / 13:<<{
            [h'00']:{
                    / vendor-domain / 3:'arm.com',
                    / component-description / 5:'This component is a
demonstration. The digest is a sample pattern, not a real one.',
                }
        }>>,
    })
]]></artwork></figure>

<t>Total size of the Envelope without COSE authentication object or Severable Elements:  235</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820e45dcdb2074b951f1c88b866469939c2a8
3ed433a31fc7dfcb3f63955bd943ec0358bba70101020203585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f09822f58203ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc
9f949d84ea0e18d20a4382030f0c438217020d822f58202bfc4d0cc6680b
e7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918
]]></artwork></figure>
<t>Total size of the Envelope with COSE authentication object but without Severable Elements:  311</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820e45dcdb2074b951f1c88b866469939c2a8
3ed433a31fc7dfcb3f63955bd943ec584ad28443a10126a0f65840b4fd3a
6a18fe1062573488cf24ac96ef9f30ac746696e50be96533b356b8156e43
32587fe6f4e8743ae525d72005fddd4c1213d55a8061b2ce67b83640f477
7c0358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f09822f58203ee96dc79641970a
e46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a4382030f0c
438217020d822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf918
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object and Severable Elements:  894</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba4025873825824822f5820e45dcdb2074b951f1c88b866469939c2a8
3ed433a31fc7dfcb3f63955bd943ec584ad28443a10126a0f65840b4fd3a
6a18fe1062573488cf24ac96ef9f30ac746696e50be96533b356b8156e43
32587fe6f4e8743ae525d72005fddd4c1213d55a8061b2ce67b83640f477
7c0358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f09822f58203ee96dc79641970a
e46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a4382030f0c
438217020d822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf91809583c8613a1157832687474703a2f2f657861
6d706c652e636f6d2f766572792f6c6f6e672f706174682f746f2f66696c
652f66696c652e62696e1502030f0d590204a20179019d2323204578616d
706c6520323a2053696d756c74616e656f757320446f776e6c6f61642c20
496e7374616c6c6174696f6e2c2053656375726520426f6f742c20536576
65726564204669656c64730a0a2020202054686973206578616d706c6520
636f766572732074686520666f6c6c6f77696e672074656d706c61746573
3a0a202020200a202020202a20436f6d7061746962696c69747920436865
636b20287b7b74656d706c6174652d636f6d7061746962696c6974792d63
6865636b7d7d290a202020202a2053656375726520426f6f7420287b7b74
656d706c6174652d7365637572652d626f6f747d7d290a202020202a2046
69726d7761726520446f776e6c6f616420287b7b6669726d776172652d64
6f776e6c6f61642d74656d706c6174657d7d290a202020200a2020202054
686973206578616d706c6520616c736f2064656d6f6e7374726174657320
736576657261626c6520656c656d656e747320287b7b6f76722d73657665
7261626c657d7d292c20616e64207465787420287b7b6d616e6966657374
2d6469676573742d746578747d7d292e814100a2036761726d2e636f6d05
78525468697320636f6d706f6e656e7420697320612064656d6f6e737472
6174696f6e2e205468652064696765737420697320612073616d706c6520
7061747465726e2c206e6f742061207265616c206f6e652e
]]></artwork></figure>

</section>
<section anchor="example-3-ab-images"><name>Example 3: A/B images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>A/B Image Template (<xref target="a-b-template"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'7c9b3cb72c262608a42f944d59d659ff2b801c78af44def51b8ff51e9f45721b'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'e33d618df0ad21e609529ab1a876afb231
faff1d6a3189b5360324c2794250b87cf00cf83be50ea17dc721ca85393cd8e839a066
d5dec0ad87a903ab31ea9afa'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:3,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    } ,
                    / directive-try-each / 15,[
                        <<[
                            / directive-override-parameters / 20,{
                                / offset / 5:33792,
                            } ,
                            / condition-component-offset / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<<[
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                                ]>>,
                                / image-size / 14:34768,
                            }
                        ]>> ,
                        <<[
                            / directive-override-parameters / 20,{
                                / offset / 5:541696,
                            } ,
                            / condition-component-offset / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<<[
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                                ]>>,
                                / image-size / 14:76834,
                            }
                        ]>>
                    ] ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / install / 9:<<[
                / directive-try-each / 15,[
                    <<[
                        / directive-set-parameters / 19,{
                            / offset / 5:33792,
                        } ,
                        / condition-component-offset / 5,5 ,
                        / directive-set-parameters / 19,{
                            / uri / 21:'http://example.com/file1.bin',
                        }
                    ]>> ,
                    <<[
                        / directive-set-parameters / 19,{
                            / offset / 5:541696,
                        } ,
                        / condition-component-offset / 5,5 ,
                        / directive-set-parameters / 19,{
                            / uri / 21:'http://example.com/file2.bin',
                        }
                    ]>>
                ] ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
            / validate / 10:<<[
                / condition-image-match / 3,15
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  332</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f58207c9b3cb72c262608a42f944d59d659ff2b
801c78af44def51b8ff51e9f45721b0359011ba5010102030358aaa20281
8141000458a18814a20150fa6b4a53d5ad5fdfbe9de663e4d41ffe025014
92af1425695e48bf429b2d51f2ab450f8258368614a105198400050514a2
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0583a8614a1051a00084400050514a20358
24822f58200123456789abcdeffedcba9876543210001122334455667788
99aabbccddeeff0e1a00012c22010f020f095861860f82582a8613a10519
8400050513a115781c687474703a2f2f6578616d706c652e636f6d2f6669
6c65312e62696e582c8613a1051a00084400050513a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65322e62696e1502030f0a4382
030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  408</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f58207c9b3cb72c262608a42f944d59d659ff2b
801c78af44def51b8ff51e9f45721b584ad28443a10126a0f65840e33d61
8df0ad21e609529ab1a876afb231faff1d6a3189b5360324c2794250b87c
f00cf83be50ea17dc721ca85393cd8e839a066d5dec0ad87a903ab31ea9a
fa0359011ba5010102030358aaa202818141000458a18814a20150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450f8258368614a105198400050514a2035824822f582000112233445566
778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d058
3a8614a1051a00084400050514a2035824822f58200123456789abcdeffe
dcba987654321000112233445566778899aabbccddeeff0e1a00012c2201
0f020f095861860f82582a8613a105198400050513a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65312e62696e582c8613a1051a
00084400050513a115781c687474703a2f2f6578616d706c652e636f6d2f
66696c65322e62696e1502030f0a4382030f
]]></artwork></figure>

</section>
<section anchor="example-4-load-from-external-storage"><name>Example 4: Load from External Storage</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>Install (<xref target="template-install"/>)</t>
  <t>Load (<xref target="template-load-ext"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'15736702a00f510805dcf89d6913a2cfb417ed414faa760f974d6755c68ba70a'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'3ada2532326d512132c388677798c24ffd
cc979bfae2a26b19c8c8bbf511fd7dd85f1501662c1a9e1976b759c4019bab44ba5434
efb45d3868aedbca593671f3'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:4,
            / common / 3:<<{
                / components / 2:[
                    [h'00'] ,
                    [h'02'] ,
                    [h'01']
                ],
                / common-sequence / 4:<<[
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / payload-fetch / 8:<<[
                / directive-set-component-index / 12,1 ,
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
            / install / 9:<<[
                / directive-set-component-index / 12,0 ,
                / directive-set-parameters / 19,{
                    / source-component / 22:1 / [h'02'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ]>>,
            / validate / 10:<<[
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15
            ]>>,
            / load / 11:<<[
                / directive-set-component-index / 12,2 ,
                / directive-set-parameters / 19,{
                    / image-digest / 3:<<[
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ]>>,
                    / image-size / 14:76834,
                    / source-component / 22:0 / [h'00'] /,
                    / compression-info / 19:<<{
                        / compression-algorithm / 1:1 / "gzip" /,
                    }>>,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ]>>,
            / run / 12:<<[
                / directive-set-component-index / 12,2 ,
                / directive-run / 23,2
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  292</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f582015736702a00f510805dcf89d6913a2cfb4
17ed414faa760f974d6755c68ba70a0358f4a801010204035867a2028381
4100814102814101045858880c0014a40150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824822f582000
112233445566778899aabbccddeeff0123456789abcdeffedcba98765432
100e1987d0010f020f085827880c0113a115781b687474703a2f2f657861
6d706c652e636f6d2f66696c652e62696e1502030f094b880c0013a11601
1602030f0a45840c00030f0b583d880c0213a4035824822f582001234567
89abcdeffedcba987654321000112233445566778899aabbccddeeff0e1a
00012c221343a1010116001602030f0c45840c021702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  368</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f582015736702a00f510805dcf89d6913a2cfb4
17ed414faa760f974d6755c68ba70a584ad28443a10126a0f658403ada25
32326d512132c388677798c24ffdcc979bfae2a26b19c8c8bbf511fd7dd8
5f1501662c1a9e1976b759c4019bab44ba5434efb45d3868aedbca593671
f30358f4a801010204035867a20283814100814102814101045858880c00
14a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48
bf429b2d51f2ab45035824822f582000112233445566778899aabbccddee
ff0123456789abcdeffedcba98765432100e1987d0010f020f085827880c
0113a115781b687474703a2f2f6578616d706c652e636f6d2f66696c652e
62696e1502030f094b880c0013a116011602030f0a45840c00030f0b583d
880c0213a4035824822f58200123456789abcdeffedcba98765432100011
2233445566778899aabbccddeeff0e1a00012c221343a101011600160203
0f0c45840c021702
]]></artwork></figure>

</section>
<section anchor="example-5-two-images"><name>Example 5: Two Images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Furthermore, it shows using these templates with two images.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'd1e73f16e4126007bc4d804cd33b0209fbab34728e60ee8c00f3387126748dd2'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'b7ae0a46a28f02e25cda6d9a255bbaf863
30141831fae5a78012d648bc6cee55102e0f1890bdeacc3adaa4fae0560f83a45eecae
65cabce642f56d84ab97ef8d'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:5,
            / common / 3:<<{
                / components / 2:[
                    [h'00'] ,
                    [h'01']
                ],
                / common-sequence / 4:<<[
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15 ,
                    / directive-set-component-index / 12,1 ,
                    / directive-override-parameters / 20,{
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                        ]>>,
                        / image-size / 14:76834,
                    }
                ]>>,
            }>>,
            / install / 9:<<[
                / directive-set-component-index / 12,0 ,
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file1.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file2.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
            / validate / 10:<<[
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / condition-image-match / 3,15
            ]>>,
            / run / 12:<<[
                / directive-set-component-index / 12,0 ,
                / directive-run / 23,2
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  306</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820d1e73f16e4126007bc4d804cd33b0209fb
ab34728e60ee8c00f3387126748dd203590101a601010205035895a20282
8141008141010458898c0c0014a40150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820001122
33445566778899aabbccddeeff0123456789abcdeffedcba98765432100e
1987d0010f020f0c0114a2035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c2209584f90
0c0013a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65
312e62696e1502030f0c0113a115781c687474703a2f2f6578616d706c65
2e636f6d2f66696c65322e62696e1502030f0a49880c00030f0c01030f0c
45840c001702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  382</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820d1e73f16e4126007bc4d804cd33b0209fb
ab34728e60ee8c00f3387126748dd2584ad28443a10126a0f65840b7ae0a
46a28f02e25cda6d9a255bbaf86330141831fae5a78012d648bc6cee5510
2e0f1890bdeacc3adaa4fae0560f83a45eecae65cabce642f56d84ab97ef
8d03590101a601010205035895a202828141008141010458898c0c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab45035824822f582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d0010f020f0c0114a2035824
822f58200123456789abcdeffedcba987654321000112233445566778899
aabbccddeeff0e1a00012c2209584f900c0013a115781c687474703a2f2f
6578616d706c652e636f6d2f66696c65312e62696e1502030f0c0113a115
781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62696e
1502030f0a49880c00030f0c01030f0c45840c001702
]]></artwork></figure>

</section>
</section>
<section anchor="design-rationale"><name>C. Design Rational</name>

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted invocation operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted invocation of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency's commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope"><name>C.1 Design Rationale: Envelope</name>

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of Severable Elements (<xref target="severable-fields"/>)</t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers"><name>C.2 Byte String Wrappers</name>

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the common sequence. The common sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>
<section anchor="implementation-matrix"><name>D. Implementation Conformance Matrix</name>

<t>This section summarizes the functionality a minimal manifest processor
implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Class Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Device Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>OPTIONAL</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>REQUIRED</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>Abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>OPTIONAL</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>REQUIRED if more than one component</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>OPTIONAL</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>REQUIRED</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>REQUIRED for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>OPTIONAL</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>REQUIRED for Bootloader</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>OPTIONAL</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>REQUIRED</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>REQUIRED</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>REQUIRED</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>REQUIRED</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>REQUIRED for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>OPTIONAL</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>OPTIONAL</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>OPTIONAL</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>OPTIONAL</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>OPTIONAL</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c>OPTIONAL</c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
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
hs9CVkt+dp2wNtIGyGphEir33sIQaKvajA5baMFirzalZ6Go3PEG7s253AYu
relWN3Jl9i3UmS4XM7STN3t97UTN3l47KbOX107AHDS2iZXxFtTCv3gLamFa
/AU1cyqK7DexJ8F+YxuPJwkO0F6PbhCP+8E5R31ipIAEgEqdFscVQD8EUbzg
AE7yiqDYRPZqNxGVU0keH84l5tYPlD2/4SQmRIGbMk1MwtTkUFlkJlKziF1X
e1qeWRQVOOEAXVt4wy7+/OzJFQWCLYEu50OMJDshhwV0COn1Hp9/ffE8ePnq
4rvT1+fBt+ff06+dy4uvvzm9Pj+9fHz59eP1z19fXe4dw99fn53Jv2/Pv3n8
9eA2vL14fPrHP16fLv/p+5/+6ezN188u9wffPT7rnP30/VX55y8Hxz99vUjX
f3iZL588e/3rziz584vZq9PnZ6enV+fz7Bzzkvz88/EfZt/9ksSHz7PFzc8/
Pzt6Vd50Xn4JUvuf/jSZRTen+eti+u27sjj7/vyX22+fl/nzb/6cHL94vPv8
y9v09E1Z/Lp4Ndq93Cu/Tf7E2zp//qS+Kbr11zXvlOVqPE8mFGLnxpx7yX0K
e+ANp/fm8bOLM+fwnr67Pb/9/ptvs3+6+PWnwdnpH7+/kH8/Of3j5Akc1/ns
D+Hjr3/ee/bzzzdX3383+T5d/Rr+IT/4Odk5H3fGv+4s9vLv5unFn8e33w4O
v1kvn41PF48vJ2c/jcNfXw33bl5fR79Oiz/cPn02vtx/F5W/vnh2lc2vv/rK
2X9lWbR9TlnAW+HCLlffnCLHJgGSguMVjjHkIStjDUj3cjYmseaHBBqSS7Ap
EesUcM0U4E9DSG3K4LRymOyS0zCwW0DUA3Uv9YAP6pSgCd+H6Ik+BORkqR6V
nZpaB1GiqG3QA3PSewm0sLHZ1DgtYzN0YXaaVVVAH4KrdVEdq6oE4kY0Ukez
ZtjfnDGcOd1VOm6iH7wNbi6mOXT//51c5h3t/RKWm4euFqgcSMuBbV1P/T9w
GzYyZXe04cT+fhN0Zha0HwxO2NUzDh5nWFyFS9PKRyclhgNkMXxDN0ryIzxz
y+RIPo2t9++1EW3bfOccKh8/UvyandXrQA6YcQ+Tr30kw1PJwZjksm0SfSyS
NFmsFrpS9kDroIuZ1WXsBC0i5U4wOvnd737ouMSVn/1JUP1dBnJdpnZQooT/
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
MuDRUVbteaXLR33omDRGPOf/AycjL8hEGwIA

-->

</rfc>

